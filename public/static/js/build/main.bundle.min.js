// Main Hue Object
// All client variables and functions go here
const Hue = {}

// This enables information about socket calls to the server in the console
// Setting it to true is recommended
Hue.debug_socket = true

// This wraps all functions with a function
// It shows every triggered function name
// This is mainly to check for loops
// Should be false unless debugging
Hue.debug_functions = false

// This enables or disables script loading
// This should be always true unless developing without an internet connection
Hue.load_scripts = true

// Initial variables declarations
Hue.config = {}
Hue.ls_global_settings = "global_settings_v1"
Hue.ls_room_settings = "room_settings_v1"
Hue.ls_room_state = "room_state_v1"
Hue.ls_input_history = "input_history_v17"
Hue.ls_first_time = "first_time_v2"
Hue.ls_last_message_board_post_checked = "last_message_board_post_checked_v4"
Hue.vtypes = ["voice_1", "voice_2", "voice_3", "voice_4"]
Hue.optypes = ["op_1", "op_2", "op_3", "op_4"]
Hue.roles = ["admin"].concat(Hue.optypes).concat(Hue.vtypes)
Hue.topic = ""
Hue.topic_setter = ""
Hue.topic_date = ""
Hue.colorlib = ColorLib()
Hue.played = []
Hue.input_history = []
Hue.input_history_index = 0
Hue.userlist = []
Hue.usernames = []
Hue.all_usernames = []
Hue.role = ""
Hue.can_chat = false
Hue.can_image = false
Hue.can_tv = false
Hue.can_messageboard = false
Hue.tab_info = {}
Hue.create_room_open = false
Hue.open_room_open = false
Hue.tv_picker_open = false
Hue.image_picker_open = false
Hue.goto_room_open = false
Hue.import_settings_open = false
Hue.background_image_input_open = false
Hue.admin_list_open = false
Hue.ban_list_open = false
Hue.image_upload_comment_open = false
Hue.modal_image_number_open = false
Hue.change_user_username_open = false
Hue.change_user_password_open = false
Hue.change_user_email_open = false
Hue.media_menu_open = false
Hue.writing_reply = false
Hue.modal_open = false
Hue.alert_mode = 0
Hue.commands_list_sorted = {}
Hue.commands_list_sorted_2 = {}
Hue.utilz = Utilz()
Hue.room_image_mode = "enabled"
Hue.room_tv_mode = "enabled"
Hue.background_image_setter = ""
Hue.background_image_date = ""
Hue.files = {}
Hue.youtube_video_play_on_queue = false
Hue.message_id = 0
Hue.chat_content_container_id = 0
Hue.popup_message_id = 0
Hue.popup_id = 0
Hue.modal_id = 0
Hue.writing_message = false
Hue.double_tap_key_pressed = 0
Hue.double_tap_key_2_pressed = 0
Hue.double_tap_key_3_pressed = 0
Hue.image_visible = true
Hue.tv_visible = true
Hue.modal_image_open = false
Hue.current_image_data = {}
Hue.filter_delay = 350
Hue.resize_delay = 350
Hue.double_tap_delay = 250
Hue.wheel_delay = 100
Hue.wheel_delay_2 = 25
Hue.check_scrollers_delay = 100
Hue.requesting_roomlist = false
Hue.emit_queue = []
Hue.app_focused = true
Hue.message_unames = ""
Hue.aura_timeouts = {}
Hue.reaction_types = ["like", "love", "happy", "meh", "sad", "dislike"]
Hue.mouse_over_chat_functions = false
Hue.chat_functions_hover_delay = 3000
Hue.user_functions = [1, 2, 3, 4, 5, 6]
Hue.mouse_is_down = false
Hue.draw_message_just_entered = false
Hue.draw_image_just_entered = false
Hue.draw_image_mode = "pencil"
Hue.draw_image_scale = 2.4
Hue.draw_image_num_strokes_save = 500
Hue.draw_image_max_levels = 200
Hue.draw_image_open = false
Hue.command_aliases = {}
Hue.commands_queue = {}
Hue.user_leaving = false
Hue.admin_activity_filter_string = ""
Hue.access_log_filter_string = ""
Hue.keys_pressed = {}
Hue.hide_infotip_delay = 2000
Hue.hide_media_reactions_delay = 2000
Hue.active_modal = false
Hue.activity_list = []
Hue.last_activity_trigger = 0
Hue.HOUR = 3600000
Hue.DAY = 86400000
Hue.YEAR = 31536000000
Hue.editing_message = false
Hue.editing_message_container = false
Hue.editing_message_area = false
Hue.local_storage_to_save = {}
Hue.local_storage_save_delay = 250
Hue.sending_whisper = false
Hue.small_scroll_amount = 250
Hue.fresh_messages_list = []
Hue.max_fresh_messages = 100
Hue.fresh_messages_duration = 2000
Hue.autoscrolling = false
Hue.chat_scrolled = false
Hue.lockscreen_peek_delay = 500
Hue.lockscreen_peek_active = false
Hue.context_menu_open = false
Hue.image_upload_comment_file = false
Hue.image_upload_comment_type = false
Hue.just_tabbed = false
Hue.userlist_mode = "normal"
Hue.usercount = 0
Hue.markdown_regexes = {}
Hue.show_media_history_type = ""
Hue.add_to_chat_searches_delay = 2000
Hue.chat_functions_box_open = false
Hue.first_media_change = false
Hue.calc_round_places = 10
Hue.typing_delay = 100
Hue.loaded_image = {}
Hue.loaded_tv = {}
Hue.open_profile_username = false
Hue.open_profile_user = false
Hue.show_profile_audio_clip_started = false
Hue.send_badge_disabled = true
Hue.info_popups = []
Hue.connected = false
Hue.connections = 0
Hue.connecting = true
Hue.last_scroll_date = Date.now()
Hue.recent_scroll_time = 1000
Hue.typing = false
Hue.favicon_mode = 0
Hue.handle_url_open = false
Hue.screen_locked = false
Hue.num_socket_in = 0
Hue.num_socket_out = 0
Hue.last_autoscroll_diff = 0
Hue.max_displayed_url = 100
Hue.media_info_max_length = 60
Hue.image_locked = false
Hue.tv_locked = false

// Initial media-loading variables declarations
Hue.youtube_loading = false
Hue.youtube_loaded = false
Hue.youtube_video_player_requested = false
Hue.youtube_video_player_request = false
Hue.twitch_loading = false
Hue.twitch_loaded = false
Hue.twitch_video_player_requested = false
Hue.twitch_video_player_request = false
Hue.soundcloud_loading = false
Hue.soundcloud_loaded = false
Hue.soundcloud_video_player_requested = false
Hue.soundcloud_video_player_request = false
Hue.media_info_image_data = []
Hue.media_info_tv_data = []

// This runs after the application's load event
// This is the first function that gets executed
Hue.init = function () {
  Hue.load_date_1 = Date.now()

  Hue.create_debouncers()
  Hue.setup_separators()
  Hue.setup_markdown_regexes()
  Hue.activate_key_detection()
  Hue.setup_templates()
  Hue.get_global_settings()
  Hue.get_room_settings()
  Hue.get_room_state()
  Hue.start_msg()
  Hue.start_settings_widgets("global_settings")
  Hue.start_settings_widgets_listeners("global_settings")
  Hue.start_settings_widgets("room_settings")
  Hue.start_settings_widgets_listeners("room_settings")
  Hue.setup_settings_windows()
  Hue.start_filters()
  Hue.start_image_events()
  Hue.start_dropzone()
  Hue.generate_highlight_words_regex()
  Hue.generate_ignored_words_regex()
  Hue.activate_visibility_listener()
  Hue.copypaste_events()
  Hue.scroll_events()
  Hue.resize_events()
  Hue.start_chat_mouse_events()
  Hue.start_body_events()
  Hue.start_roomlist_click_events()
  Hue.start_generic_uname_click_events()
  Hue.start_user_context_menu()
  Hue.start_media_maxer_context_menu()
  Hue.start_chat_maxer_context_menu()
  Hue.start_chat_menu_context_menu()
  Hue.start_msg_close_buttons_context_menu()
  Hue.start_search_context_menus()
  Hue.setup_show_profile()
  Hue.setup_room_menu()
  Hue.setup_input()
  Hue.setup_input_history()
  Hue.setup_modal_image()
  Hue.setup_footer()
  Hue.setup_reactions()
  Hue.setup_chat_functions()
  Hue.prepare_media_settings()
  Hue.setup_message_window()
  Hue.setup_draw_image()
  Hue.setup_autocomplete()
  Hue.setup_modal_image_number()
  Hue.setup_command_aliases()
  Hue.setup_fonts()
  Hue.setup_before_unload()
  Hue.maxers_mouse_events()
  Hue.setup_iframe_video()
  Hue.show_console_message()
  Hue.setup_expand_image()
  Hue.setup_local_storage()
  Hue.get_ignored_usernames_list()
  Hue.get_accept_commands_from_list()
  Hue.setup_lockscreen()
  Hue.setup_image_upload_comment()
  Hue.setup_drag_events()
  Hue.setup_open_url()
  Hue.setup_user_functions()
  Hue.setup_media_pickers()
  Hue.setup_generic_separators()
  Hue.setup_media_menu()
  Hue.configure_notifications()
  Hue.start_media_info_events()
  Hue.setup_chat()
  Hue.setup_message_board()
  Hue.change_media_layout()
  Hue.setup_profile_image_cropper()
  Hue.setup_badges()
  Hue.setup_image_picker()
  Hue.setup_userlist_window()
  Hue.setup_user_menu()
  Hue.setup_header()
  Hue.setup_media()
  Hue.setup_activity_bar()
  Hue.setup_reply()
  Hue.start_socket_stats()
  Hue.setup_maxers()
  Hue.start_media_info()

  if (Hue.debug_functions) {
    Hue.wrap_functions()
  }

  Hue.start_socket()

  Hue.load_date_2 = Date.now()
}

// What to do after the user's socket joins the room
// This handles the first signal received after a successful connection
Hue.on_join = function (data) {
  Hue.connections += 1
  Hue.started = false
  Hue.started_safe = false
  Hue.image_changed = []
  Hue.tv_changed = []
  Hue.log_messages_processed = false
  Hue.superuser = data.superuser

  Hue.load_date_3 = Date.now()
  Hue.loginfo("Joined Room")

  Hue.room_locked = data.room_locked

  if (data.room_locked) {
    Hue.start_locked_mode()
    return false
  }

  Hue.init_data = data
  Hue.room_name = data.room_name
  Hue.user_reg_date = data.reg_date
  Hue.userlist = data.userlist
  Hue.log_enabled = data.log
  Hue.log_messages = data.log_messages
  Hue.is_public = data.public

  Hue.setup_commands()
  Hue.set_username(data.username)
  Hue.set_email(data.email)
  Hue.set_bio(data.bio)
  Hue.setup_profile_image(data.profile_image)
  Hue.generate_favicon(0)
  Hue.update_userlist()
  Hue.set_media_info(data.media_info)
  Hue.setup_theme_and_background(data)
  Hue.apply_background()
  Hue.apply_theme()
  Hue.setup_active_media(data)
  Hue.start_permissions(data)
  Hue.set_role(data.role, false)
  Hue.set_topic_info(data)
  Hue.update_title()
  Hue.update_user_menu()
  Hue.clear_chat()
  Hue.check_firstime()
  Hue.get_input_history()
  Hue.show_joined()
  Hue.check_media_maxers()
  Hue.config_room_menu()
  Hue.goto_bottom()
  Hue.make_main_container_visible()
  Hue.check_latest_highlight()
  Hue.init_message_board(data)
  Hue.start_active_media()
  Hue.fix_current_image_data()
  Hue.update_input_placeholder()

  Hue.at_startup()
}

// This executes at the end of the join function
// When the client is ready for use
Hue.at_startup = function () {
  Hue.date_joined = Date.now()
  Hue.connected = true
  Hue.started = true

  if (Hue.connections === 1) {
    Hue.execute_commands("at_startup")
  }

  setTimeout(function () {
    Hue.started_safe = true
  }, 2000)

  Hue.process_visibility()
  Hue.load_date_4 = Date.now()
  Hue.compare_load_dates()
}

// Sets the initial state of the activity bar
// Setups events for the activity bar
Hue.setup_activity_bar = function () {
  setInterval(function () {
    Hue.check_activity_bar()
  }, Hue.config.activity_bar_interval)

  setInterval(function () {
    Hue.check_trigger_activity()
  }, Hue.config.activity_bar_trigger_interval)

  $("#activity_bar").on("click", ".activity_bar_item", function () {
    Hue.show_profile_by_user_id($(this).data("user_id"))
  })

  $("#activity_bar").on("auxclick", ".activity_bar_item", function (
    e
  ) {
    if (e.which === 2) {
      Hue.process_write_whisper_by_user_id($(this).data("user_id"))
    }
  })
}

// Check if it's ok to trigger activity
Hue.check_trigger_activity = function () {
  if (Hue.app_focused && !Hue.screen_locked) {
    if (Date.now() - Hue.last_activity_trigger >= (Hue.config.activity_bar_trigger_interval / 2)) {
      Hue.trigger_activity()
    }
  }
}

// Sends an activity signal to the server
// This is used to know which users might be active
// This is used to display users in the activity bar
Hue.trigger_activity = function () {
  Hue.last_activity_trigger = Date.now()
  Hue.socket_emit("activity_trigger", {})
}

// Checks if the activity list has changed and the activity bar must be updated
Hue.check_activity_bar = function (update = true) {
  if (Hue.activity_list.length === 0) {
    return false
  }

  let d = Date.now() - Hue.config.max_activity_bar_delay
  let new_top = []
  let changed = false

  for (let item of Hue.activity_list) {
    let user = Hue.get_user_by_user_id(item.user_id)

    if (item.date > d && user && !Hue.user_is_ignored(user.username)) {
      new_top.push(item)
    } else {
      changed = true
    }
  }

  if (changed) {
    Hue.activity_list = new_top

    if (update) {
      Hue.update_activity_bar()
    }
  }

  return changed
}

// Updates the activity bar
// If items are still in the list they are not removed
// This is to keep states like profile image rotation from being interrupted
Hue.update_activity_bar = function () {
  let c = $("#activity_bar_inner")

  if (Hue.activity_list.length === 0) {
    Hue.clear_activity_bar_items()
    $("#activity_bar_no_activity").css("display", "block")
    return false
  }

  $("#activity_bar_no_activity").css("display", "none")

  let ids_included = []

  $(".activity_bar_item").each(function () {
    let id = $(this).data("user_id")
    let user = Hue.get_user_by_user_id(id)

    if (user && Hue.activity_list.some((item) => item.user_id === id)) {
      let t = Hue.get_user_info_title(user, true)
      $(this).attr("title", t)
      $(this).data("otitle", t)
      ids_included.push(id)
    } else {
      $(this).remove()
    }
  })

  if (Hue.activity_list.length > ids_included.length) {
    for (let item of Hue.activity_list) {
      let user = Hue.get_user_by_user_id(item.user_id)

      if (ids_included.includes(user.user_id)) {
        continue
      }

      if (user) {
        let pi = user.profile_image || Hue.config.default_profile_image_url

        let h = $(`
          <div class='activity_bar_item dynamic_title'>
              <div class='activity_bar_image_container round_image_container'>
                  <img class='activity_bar_image profile_image' src='${pi}' loading='lazy'>
              </div>
              <div class='activity_bar_text'></div>
          </div>`)

        let text_el = h.find(".activity_bar_text").eq(0)
        let img_el = h.find(".activity_bar_image").eq(0)

        img_el.on("error", function () {
          if ($(this).attr("src") !== Hue.config.default_profile_image_url) {
            $(this).attr("src", Hue.config.default_profile_image_url)
          }
        })

        img_el.data("user_id", user.user_id)
        text_el.text(user.username)

        let t = Hue.get_user_info_title(user, true)

        h.attr("title", t)
        h.data("otitle", t)
        h.data("date", user.date_joined)
        h.data("user_id", user.user_id)

        c.append(h)
      }
    }
  }
}

// Pushes a user to the activity list and updates the activity bar
Hue.push_to_activity_bar = function (id, date) {
  let user = Hue.get_user_by_user_id(id)

  if (!user) {
    return false
  }

  if (!user || !Hue.check_media_permission(user.role, "chat")) {
    return false
  }

  let d = Date.now() - Hue.config.max_activity_bar_delay

  if (date < d) {
    return false
  }

  if (Hue.user_is_ignored(user.username)) {
    return false
  }

  for (let i = 0; i < Hue.activity_list.length; i++) {
    if (Hue.activity_list[i].user_id === id) {
      Hue.activity_list.splice(i, 1)
      break
    }
  }

  Hue.activity_list.unshift({ user_id: id, date: date })

  if (Hue.activity_list.length > Hue.config.max_activity_bar_items) {
    Hue.activity_list.pop()
  }

  Hue.check_activity_bar(false)

  if (Hue.started) {
    Hue.update_activity_bar()
  }
}

// Gets an activity bar item by username
Hue.get_activity_bar_item_by_user_id = function (id) {
  let item = false

  $(".activity_bar_item").each(function () {
    if ($(this).data("user_id") === id) {
      item = this
      return false
    }
  })

  return item
}

// Removes all items on the activity bar
Hue.clear_activity_bar_items = function () {
  $("#activity_bar_inner")
    .find(".activity_bar_item")
    .each(function () {
      $(this).remove()
    })
}

// Updates the profile image of an item in the activity bar
Hue.update_activity_bar_image = function (id, src) {
  $("#activity_bar_inner")
    .find(".activity_bar_item")
    .each(function () {
      if ($(this).data("user_id") === id) {
        $(this).find(".activity_bar_image").eq(0).attr("src", src)
        return false
      }
    })
}

// Updates the username of an activity bar item
Hue.update_activity_bar_username = function (id, uname) {
  $("#activity_bar_inner")
  .find(".activity_bar_item")
  .each(function () {
    if ($(this).data("user_id") === id) {
      $(this).find(".activity_bar_text").eq(0).text(uname)
      return false
    }
  }) 
}
// Generates an array of autocompletable words on demand
Hue.generate_words_to_autocomplete = function () {
  let susernames = []

  for (let uname of Hue.usernames) {
    susernames.push(`${uname}'s`)
  }

  let words = []

  words.push(
    ...Hue.commands_list_with_prefix,
    ...Hue.usernames,
    ...susernames,
    ...["@everyone"],
    ...Object.keys(Hue.command_aliases),
    ...Hue.all_usernames
  )

  words = [...new Set(words)]

  let autocomplete = Hue.get_setting("other_words_to_autocomplete")

  if (autocomplete) {
    words.push(...autocomplete.split("\n"))
  }

  words.sort()

  return words
}

// Tries to find the closest item to autocomplate after a tab action
Hue.get_closest_autocomplete = function (element, w) {
  let info = Hue.tab_info[element.id]
  let l = Hue.generate_words_to_autocomplete()
  let wl = w.toLowerCase()
  let has = false

  for (let i = 0; i < l.length; i++) {
    let pw = l[i]

    if (pw.startsWith(w)) {
      has = true

      if (!info.tabbed_list.includes(pw)) {
        info.tabbed_list.push(pw)
        return l[i]
      }
    }
  }

  for (let i = 0; i < l.length; i++) {
    let pw = l[i]
    let pwl = pw.toLowerCase()

    if (pwl.startsWith(wl)) {
      has = true

      if (!info.tabbed_list.includes(pw)) {
        info.tabbed_list.push(pw)
        return l[i]
      }
    }
  }

  if (has) {
    info.tabbed_list = []
    return Hue.get_closest_autocomplete(element, w)
  }

  return ""
}

// Attemps to autocomplete a word after a user presses tab on a textbox
Hue.tabbed = function (element) {
  if (!element.id) {
    return false
  }

  let info = Hue.tab_info[element.id]

  if (info === undefined) {
    Hue.clear_tabbed(element)
    info = Hue.tab_info[element.id]
  }

  if (info.tabbed_word !== "") {
    Hue.replace_tabbed(element, info.tabbed_word)
    return
  }

  let split = element.selectionStart
  let value = element.value.replace(/\n/g, " ")
  let a = value.substring(0, split).match(/[^ ]*$/)[0]
  let b = value.substring(split).match(/^[^ ]*/)[0]
  let word = a + b

  info.tabbed_start = split - a.length
  info.tabbed_end = split + b.length

  if (word !== "") {
    info.tabbed_word = word
    Hue.replace_tabbed(element, word)
  }
}

// Replaces current word next to the caret with the selected autocomplete item
Hue.replace_tabbed = function (element, word) {
  let info = Hue.tab_info[element.id]
  let result = Hue.get_closest_autocomplete(element, word)

  if (result) {
    if (element.value[info.tabbed_end] === " ") {
      element.value = Hue.utilz.replace_between(
        element.value,
        info.tabbed_start,
        info.tabbed_end,
        result
      )
    } else {
      element.value = Hue.utilz.replace_between(
        element.value,
        info.tabbed_start,
        info.tabbed_end,
        `${result} `
      )
    }

    let pos = info.tabbed_start + result.length

    element.setSelectionRange(pos + 1, pos + 1)

    info.tabbed_start = pos - result.length
    info.tabbed_end = pos

    Hue.just_tabbed = true
  }
}

// Resets 'tabbed' state generated after autocompleting words
Hue.clear_tabbed = function (element) {
  if (!element.id) {
    return false
  }

  Hue.tab_info[element.id] = {
    tabbed_list: [],
    tabbed_word: "",
    tabbed_start: 0,
    tabbed_end: 0,
  }
}

// Setups autocomplete functionality
// This allows to have tab autocomplete on all allowed textboxes
Hue.setup_autocomplete = function () {
  $("body").on(
    "keydown",
    "textarea, input[type='text'], input[type='search']",
    function (e) {
      Hue.just_tabbed = false

      if (e.key === "Tab") {
        let value = $(this).val()

        if (value.length > 0) {
          Hue.tabbed(this)
          return
        }
      }

      Hue.clear_tabbed(this)
    }
  )

  $("body").on(
    "click",
    "textarea, input[type='text'], input[type='search']",
    function (e) {
      Hue.clear_tabbed(this)
    }
  )
}

// Starts body events
Hue.start_body_events = function () {
  $("body").on("click", ".spoiler", function () {
    $(this).removeClass("spoiler")
    $(this).removeAttr("title")
  })
  
  $("body").on("mouseenter", ".dynamic_title", function () {
    let new_title = `${$(this).data("otitle")} (${Hue.get_timeago(
      $(this).data("date")
    )})`
    $(this).attr("title", new_title)
  })

  $("body").on("auxclick", ".Msg-window-inner-x", function (e) {
    if (e.which === 2) {
      Hue.process_msg_close_button(this)
    }
  })

  $("body").mousedown(function () {
    Hue.mouse_is_down = true
  })

  $("body").mouseup(function (e) {
    Hue.mouse_is_down = false
  })

  $("body").mouseleave(function () {
    Hue.mouse_is_down = false
  })
}

// This generates all user chat messages inserted into the chat
Hue.update_chat = function (args = {}) {
  let def_args = {
    id: false,
    user_id: false,
    username: "",
    message: "",
    prof_image: "",
    date: false,
    third_person: false,
    brk: false,
    public: true,
    link_title: false,
    link_description: false,
    link_image: false,
    link_url: false,
    edited: false,
    just_edited: false,
  }

  args = Object.assign(def_args, args)

  if (Hue.check_ignored_words(args.message, args.username)) {
    return false
  }

  if (args.username) {
    if (Hue.user_is_ignored(args.username)) {
      return false
    }
  }

  let num_lines = args.message.split("\n").length

  if (num_lines === 1) {
    if (args.message.startsWith(Hue.config.commands_prefix + Hue.config.commands_prefix)) {
      args.message = args.message.slice(1)
    }
  }

  args.message = Hue.replace_message_vars(args.id, args.message)

  let message_classes = "message chat_message"
  let container_classes = "chat_content_container chat_menu_button_main"
  let content_classes = "chat_content dynamic_title"
  let d = args.date ? args.date : Date.now()
  let nd = Hue.utilz.nice_date(d)
  let pi

  if (args.prof_image === "" || args.prof_image === undefined) {
    pi = Hue.config.default_profile_image_url
  } else {
    pi = args.prof_image
  }

  let image_preview = false
  let image_preview_src_original = false
  let image_preview_text = false
  let starts_me =
    args.message.startsWith(`${Hue.config.commands_prefix}me `) || args.message.startsWith(`${Hue.config.commands_prefix}em `)

  if (!starts_me && Hue.get_setting("show_image_previews")) {
    let ans = Hue.make_image_preview(args.message)

    image_preview = ans.image_preview
    image_preview_src_original = ans.image_preview_src_original
    image_preview_text = ans.image_preview_text
  }

  let link_preview = false
  let link_preview_text = false

  if (
    !starts_me &&
    !image_preview &&
    (args.link_title || args.link_description) &&
    Hue.get_setting("show_link_previews")
  ) {
    let ans = Hue.make_link_preview({
      message: args.message,
      image: args.link_image,
      title: args.link_title,
      description: args.link_description,
    })

    link_preview = ans.link_preview
    link_preview_text = ans.link_preview_text
  }

  let highlighted = false
  let preview_text_classes = ""

  if (args.username !== Hue.username) {
    if (image_preview && image_preview_text) {
      if (Hue.check_highlights(image_preview_text)) {
        preview_text_classes += " highlighted4"
        highlighted = true
      }
    } else if (link_preview && link_preview_text) {
      if (Hue.check_highlights(link_preview_text)) {
        preview_text_classes += " highlighted4"
        highlighted = true
      }
    } else {
      if (Hue.check_highlights(args.message)) {
        content_classes += " highlighted4"
        highlighted = true
      }
    }
  }

  let fmessage
  let title = nd

  if (args.id) {
    title = `${args.id.slice(-3)} | ${title}`
  }

  if (starts_me || args.third_person) {
    let tpt

    if (starts_me) {
      tpt = args.message.substr(4)
    } else {
      tpt = args.message
    }

    if (!args.brk) {
      args.brk = Hue.get_chat_icon("user")
    }

    message_classes += " thirdperson"
    container_classes += " chat_content_container_third"

    let s = `
        <div class='${message_classes}'>
            <div class='chat_third_container'>
                <div class='brk chat_third_brk'>${args.brk}</div>
                <div class='${container_classes}'>
                    <div class='chat_menu_button_container'>
                      <svg class='other_icon chat_menu_button chat_menu_button_menu'>
                        <use href='#icon_ellipsis'>
                      </svg>
                    </div>

                    <div class='chat_third_content'>
                        <span class='chat_uname action'></span><span class='${content_classes}' title='${title}' data-otitle='${title}' data-date='${d}'></span>
                    </div>

                    <div class='message_edited_label'>(Edited)</div>

                    <div class='message_edit_container'>
                        <textarea class='message_edit_area'></textarea>
                        <div class='message_edit_buttons'>
                            <div class='message_edit_button action message_edit_cancel'>Cancel</div>
                            <div class='message_edit_button action message_edit_submit'>Submit</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>`

    fmessage = $(s)
    fmessage.find(".chat_content").eq(0).text(tpt)
    fmessage.find(".chat_content_container").eq(0).data("original_message", tpt)
  } else {
    let s = `
        <div class='${message_classes}'>
            <div class='chat_left_side'>
                <div class='chat_profile_image_container round_image_container action4'>
                    <img class='chat_profile_image profile_image' src='${pi}' loading='lazy'>
                </div>
            </div>
            <div class='chat_right_side'>
                <div class='chat_uname_container'>
                    <div class='chat_uname action'></div>
                </div>
                <div class='chat_container'>
                    <div class='${container_classes}'>

                        <div class='chat_menu_button_container'>
                            <svg class='other_icon chat_menu_button chat_menu_button_menu'>
                              <use href='#icon_ellipsis'>
                            </svg>
                        </div>

                        <div class='${content_classes}' title='${title}' data-otitle='${title}' data-date='${d}'></div>

                        <div class='message_edited_label'>(Edited)</div>

                        <div class='message_edit_container'>
                            <textarea class='message_edit_area'></textarea>
                            <div class='message_edit_buttons'>
                                <div class='message_edit_button action message_edit_cancel'>Cancel</div>
                                <div class='message_edit_button action message_edit_submit'>Submit</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>`

    fmessage = $(s)
    fmessage
      .find(".chat_content_container")
      .eq(0)
      .data("original_message", args.message)

    if (image_preview) {
      fmessage.find(".chat_content").eq(0).html(image_preview)
      fmessage.find(".image_preview_text").eq(0).addClass(preview_text_classes)
    } else if (link_preview) {
      fmessage.find(".chat_content").eq(0).html(link_preview)
      fmessage.find(".link_preview_text").eq(0).addClass(preview_text_classes)
    } else {
      fmessage
        .find(".chat_content")
        .eq(0)
        .html(Hue.replace_markdown(Hue.utilz.make_html_safe(args.message)))
    }
  }

  let huname = fmessage.find(".chat_uname").eq(0)

  huname.text(args.username)
  huname.attr("title", `ID: ${args.user_id}`)
  huname.data("prof_image", pi)

  fmessage
    .find(".chat_profile_image")
    .eq(0)
    .on("error", function () {
      if ($(this).attr("src") !== Hue.config.default_profile_image_url) {
        $(this).attr("src", Hue.config.default_profile_image_url)
      }
    })

  let has_embed = false

  if (image_preview || link_preview) {
    has_embed = true
  }

  let first_url = false

  if (image_preview) {
    first_url = image_preview_src_original
  } else if (link_preview) {
    first_url = args.link_url
  } else {
    first_url = Hue.utilz.get_first_url(args.message)
  }

  fmessage.data("user_id", args.user_id)
  fmessage.data("public", args.public)
  fmessage.data("date", d)
  fmessage.data("highlighted", highlighted)
  fmessage.data("uname", args.username)
  fmessage.data("mode", "chat")
  fmessage.data("has_embed", has_embed)

  let chat_content_container = fmessage.find(".chat_content_container").eq(0)
  let chat_content = fmessage.find(".chat_content").eq(0)
  let edited_label = fmessage.find(".message_edited_label").eq(0)

  if (args.edited) {
    edited_label.css("display", "block")
  }

  chat_content_container.data("id", args.id)
  chat_content_container.data("edited", args.edited)
  chat_content_container.data("highlighted", highlighted)
  chat_content_container.data("date", d)
  chat_content_container.data("first_url", first_url)

  if (!image_preview && !link_preview) {
    chat_content.urlize()
  }

  if (image_preview) {
    Hue.setup_image_preview(fmessage, image_preview_src_original, args.user_id)
  }

  if (link_preview) {
    Hue.setup_link_preview(fmessage, args.link_url)
  }

  Hue.setup_whispers_click(fmessage, args.username)

  let message_id = Hue.add_to_chat({
    id: args.id,
    message: fmessage,
    save: true,
    just_edited: args.just_edited,
  }).message_id

  if (!args.edited) {
    if (args.username !== Hue.username) {
      if (highlighted) {
        Hue.on_highlight()
      } else {
        Hue.on_activity("message")
      }
    }
  }

  if (args.user_id) {
    Hue.replace_property_in_userlist_by_user_id(
      args.user_id,
      "last_message",
      args.message
    )
  }

  Hue.push_to_all_usernames(args.username)

  return {
    message_id: message_id
  }
}

// This generates all announcements inserted into the chat
Hue.chat_announce = function (args = {}) {
  let def_args = {
    id: false,
    brk: "",
    message: "",
    highlight: false,
    title: false,
    onclick: false,
    on_middle_click: false,
    container_id: false,
    date: false,
    type: "normal",
    info1: "",
    info2: "",
    username: false,
    open_profile: false,
    public: false,
    link_title: false,
    link_description: false,
    link_image: false,
    link_url: false,
    preview_image: false,
    comment: "",
    comment_icon: true,
    comment_onclick: false,
    user_id: false,
    replace_markdown: false,
    in_log: true,
    media_source: ""
  }

  args = Object.assign(def_args, args)

  let ignore = false

  if (Hue.check_ignored_words(args.message, args.username)) {
    ignore = true
  }

  if (args.username) {
    if (Hue.user_is_ignored(args.username)) {
      ignore = true
    }
  }

  let message_classes = "message announcement"
  let container_classes = "announcement_content_container chat_menu_button_main"
  let split_classes = "announcement_content_split dynamic_title"
  let content_classes = "announcement_content"
  let brk_classes = "brk announcement_brk"

  let container_id = " "

  if (args.container_id) {
    container_id = ` id='${args.container_id}' `
  }

  let highlighted = false

  if (args.highlight) {
    content_classes += " highlighted4"
    highlighted = true
  }

  let d = args.date ? args.date : Date.now()
  let t = args.title ? args.title : Hue.utilz.nice_date(d)
  let image_preview = false
  let image_preview_src_original = false
  let image_preview_text = false

  if (args.preview_image && Hue.get_setting("show_image_previews")) {
    let ans = Hue.make_image_preview(args.message)
    image_preview = ans.image_preview
    image_preview_src_original = ans.image_preview_src_original
    image_preview_text = ans.image_preview_text
  }

  let comment = ""

  if (args.comment) {
    let cls = "announcement_comment"

    if (args.username && args.username !== Hue.username) {
      if (!highlighted && Hue.check_highlights(args.comment)) {
        cls += " highlighted4"
        highlighted = true
      }
    }

    let c = Hue.replace_markdown(Hue.utilz.make_html_safe(args.comment))

    if (args.comment_icon) {
      comment = `<div class='${cls}'><div class='announcement_comment_inner flex_row_center'>
      <svg class='announcement_comment_icon chat_icon'><use href='#icon_comment'></svg>${c}</div></div>`
    } else {
      comment = `<div class='${cls}'><div class='announcement_comment_inner flex_row_center'>${c}</div></div>`
    }
  } else {
    comment = `<div class='announcement_comment'></div>`
  }

  let link_preview = false
  let link_preview_text = false

  if (
    !image_preview &&
    (args.link_title || args.link_description) &&
    Hue.get_setting("show_link_previews")
  ) {
    let ans = Hue.make_link_preview({
      message: args.message,
      image: args.link_image,
      title: args.link_title,
      description: args.link_description,
    })

    link_preview = ans.link_preview
    link_preview_text = ans.link_preview_text
  }

  if (
    (args.onclick ||
      args.on_middle_click ||
      (args.username && args.open_profile)) &&
    !link_preview &&
    !image_preview
  ) {
    content_classes += " pointer action"
  }

  if (args.username) {
    brk_classes += " pointer action"
  }

  let first_url = false

  if (image_preview) {
    first_url = image_preview_src_original
  } else if (link_preview) {
    first_url = args.link_url
  }

  let preview_text_classes = ""

  if (args.username !== Hue.username) {
    if (image_preview && image_preview_text) {
      if (Hue.check_highlights(image_preview_text)) {
        preview_text_classes += " highlighted4"
        highlighted = true
      }
    } else if (link_preview && link_preview_text) {
      if (Hue.check_highlights(link_preview_text)) {
        preview_text_classes += " highlighted4"
        highlighted = true
      }
    }
  }

  let s = `
    <div${container_id}class='${message_classes}'>
        <div class='${brk_classes}'>${args.brk}</div>
        <div class='${container_classes}'>
            <div class='chat_menu_button_container'>
                <svg class='other_icon chat_menu_button chat_menu_button_menu'>
                  <use href='#icon_ellipsis'>
                </svg>
            </div>
            <div class='${split_classes}'>
                <div class='${content_classes}'></div>
                ${comment}
            </div>
        </div>
    </div>`

  let fmessage = $(s)
  let content = fmessage.find(".announcement_content").eq(0)
  let comment_el = fmessage.find(".announcement_comment_inner").eq(0)
  let split = fmessage.find(".announcement_content_split").eq(0)
  let brk = fmessage.find(".brk").eq(0)

  split.attr("title", t)
  split.data("otitle", t)
  split.data("date", d)

  if (image_preview) {
    content.html(image_preview)
    content.find(".image_preview_text").eq(0).addClass(preview_text_classes)
    Hue.setup_image_preview(fmessage, image_preview_src_original, "none")
  } else if (link_preview) {
    content.html(link_preview)
    content.find(".link_preview_text").eq(0).addClass(preview_text_classes)
    Hue.setup_link_preview(fmessage, args.link_url)
  } else {
    if (args.replace_markdown) {
      content
        .html(Hue.replace_markdown(Hue.utilz.make_html_safe(args.message)))
        .urlize()
    } else {
      content.text(args.message).urlize()
    }
  }

  if (args.comment) {
    comment_el.urlize()

    if (args.username) {
      Hue.setup_whispers_click(comment_el, args.username)
    }

    if (args.comment_onclick) {
      comment_el.click(args.comment_onclick)
      comment_el.addClass("special_link")
    }
  }

  let pif = function () {
    Hue.show_profile(args.username)
  }

  if (args.onclick && !link_preview && !image_preview) {
    content.on("click", args.onclick)
  } else if (args.username && args.open_profile) {
    content.on("click", pif)
    brk.on("click", pif)
  }

  if (args.username) {
    brk.on("click", pif)
  }

  if (args.on_middle_click) {
    content.on("auxclick", function (e) {
      if (e.which === 2) {
        args.on_middle_click()
      }
    })
  }

  fmessage.data("id", args.id)
  fmessage.data("public", args.public)
  fmessage.data("date", d)
  fmessage.data("highlighted", highlighted)
  fmessage.data("type", args.type)
  fmessage.data("info1", args.info1)
  fmessage.data("info2", args.info2)
  fmessage.data("uname", args.username)
  fmessage.data("mode", "announcement")
  fmessage.data("first_url", first_url)
  fmessage.data("user_id", args.user_id)
  fmessage.data("in_log", args.in_log)
  fmessage.data("media_source", args.media_source)

  let message_id

  if (!ignore) {
    message_id = Hue.add_to_chat({
      message: fmessage
    }).message_id

    if (highlighted) {
      Hue.on_highlight()
    }
  }

  Hue.push_to_all_usernames(args.username)

  return {
    message_id: message_id
  }
}

// This is a centralized function to insert all chat or announcement messages into the chat
Hue.add_to_chat = function (args = {}) {
  let def_args = {
    id: false,
    message: false,
    notify: true,
    just_edited: false,
    fader: true,
  }

  args = Object.assign(def_args, args)

  if (!args.message) {
    return false
  }

  let chat_area = $("#chat_area")
  let last_message = $("#chat_area > .message").last()
  let appended = false
  let mode = args.message.data("mode")
  let uname = args.message.data("uname")
  let user_id = args.message.data("user_id")
  let date = args.message.data("date")
  let is_public = args.message.data("public")
  let highlighted = args.message.data("highlighted")
  let content_container, message_id

  if (mode === "chat") {
    content_container = args.message.find(".chat_content_container").eq(0)
    Hue.chat_content_container_id += 1
    content_container.data(
      "chat_content_container_id",
      Hue.chat_content_container_id
    )
    content_container.addClass(
      `chat_content_container_${Hue.chat_content_container_id}`
    )

    if (args.just_edited && args.id) {
      $(".chat_content_container").each(function () {
        if ($(this).data("id") === args.id) {
          $(this).replaceWith(content_container.clone(true, true))
          $(this).find(".message_edited_label").css("display", "block")
          Hue.goto_bottom(false, false)
          return false
        }
      })

      return false
    }
  }

  if (
    args.message.hasClass("chat_message") &&
    !args.message.hasClass("thirdperson") &&
    last_message.hasClass("chat_message") &&
    !last_message.hasClass("thirdperson")
  ) {
    if (
      args.message.find(".chat_uname").eq(0).text() ===
      last_message.find(".chat_uname").eq(0).text()
    ) {
      if (
        last_message.find(".chat_content").length <
        Hue.config.max_same_post_messages
      ) {
        let date_diff =
          args.message.find(".chat_content").last().data("date") -
          last_message.find(".chat_content").last().data("date")

        if (date_diff < Hue.config.max_same_post_diff) {
          if (Hue.started && Hue.app_focused && args.fader) {
            content_container.addClass("fader")
          }

          content_container.data("date", date)
          content_container.data("highlighted", highlighted)

          last_message.find(".chat_container").eq(0).append(content_container)
          message_id = last_message.data("message_id")

          if (!last_message.data("highlighted")) {
            last_message.data("highlighted", highlighted)
          }

          appended = true
        }
      }
    }
  }

  if (!appended) {
    if (Hue.started && Hue.app_focused && args.fader) {
      args.message.addClass("fader")
    }

    let last = $("#chat_area > .message").last()
    let last_date = last.data("date")

    if (date && last_date) {
      if (date - last_date > Hue.config.old_activity_min) {
        chat_area.append(
          Hue.generate_vseparator(Hue.get_old_activity_message(last_date, date))
        )
      }
    }

    chat_area.append(args.message)

    let length = $("#chat_area > .message").length
    let limit = Hue.get_setting("chat_crop_limit")

    if (length > limit) {
      $("#chat_area")
        .find(`.message:lt(${length - limit})`)
        .remove()
    }

    Hue.message_id += 1
    message_id = Hue.message_id
    args.message.data("message_id", message_id)
    args.message.addClass(`message_id_${message_id}`)
  }

  if (Hue.started) {
    Hue.goto_bottom(false, false)

    if (highlighted) {
      if (Hue.room_state.last_highlight_date < date) {
        Hue.room_state.last_highlight_date = date
        Hue.save_room_state()
      }
    }
  }

  if (Hue.started && !Hue.app_focused) {
    if (content_container) {
      Hue.add_fresh_message(content_container)
    } else {
      Hue.add_fresh_message(args.message)
    }
  }

  Hue.scroll_timer()

  if (is_public && user_id && date) {
    Hue.push_to_activity_bar(user_id, date)
  }

  if (
    args.notify &&
    Hue.started &&
    highlighted
  ) {
    Hue.electron_signal("highlighted")
  }

  return {
    message_id: message_id
  }
}

// Generates a string to indicate how much time has passed between one date and another
Hue.get_old_activity_message = function (last_date, date) {
  let diff = date - last_date
  let s

  if (diff < Hue.HOUR) {
    let n = Math.floor(diff / 60 / 1000)

    if (n === 1) {
      s = `Over ${n} Minute Passed`
    } else {
      s = `Over ${n} Minutes Passed`
    }
  } else if (diff >= Hue.HOUR && diff < Hue.DAY) {
    let n = Math.floor(diff / 60 / 60 / 1000)

    if (n === 1) {
      s = `Over ${n} Hour Passed`
    } else {
      s = `Over ${n} Hours Passed`
    }
  } else if (diff >= Hue.DAY && diff < Hue.YEAR) {
    let n = Math.floor(diff / 24 / 60 / 60 / 1000)

    if (n === 1) {
      s = `Over ${n} Day Passed`
    } else {
      s = `Over ${n} Days Passed`
    }
  } else if (diff >= Hue.YEAR) {
    let n = Math.floor(diff / 365 / 24 / 60 / 60 / 1000)

    if (n === 1) {
      s = `Over ${n} Year Passed`
    } else {
      s = `Over ${n} Years Passed`
    }
  }

  return s
}

// Generates a horizontal line with text in the middle
// To separate chat messages and convey information
Hue.generate_vseparator = function (message = "", classes = "") {
  let s = `
        <div class='message vseparator_container ${classes}'>
            <div class='vseparator_line'></div>
            <div class='vseparator_text'>${message}</div>
            <div class='vseparator_line'></div>
        </div>
    `

  return s
}

// Starts chat mouse events
Hue.start_chat_mouse_events = function () {
  $(".chat_area").on("click", ".chat_uname", function () {
    let m = $(this).closest(".message")
    Hue.show_profile(
      m.data("uname"),
      $(this).data("prof_image"),
      m.data("user_id")
    )
  })

  $(".chat_area").on("click", ".chat_profile_image", function () {
    let m = $(this).closest(".message")
    Hue.show_profile(
      m.data("uname"),
      $(this).attr("src"),
      m.data("user_id")
    )
  })

  $(".chat_area").on("click", ".message_edit_submit", function () {
    Hue.send_edit_messsage()
  })

  $(".chat_area").on("click", ".message_edit_cancel", function () {
    Hue.stop_edit_message()
  })

  $(".chat_area").on("mouseup", ".chat_uname", function (e) {
    if (e.button === 1) {
      e.preventDefault()
      e.stopPropagation()
      Hue.process_write_whisper($(this).closest(".message").data("uname"))
    }
  })

  $(".chat_area").on("mouseup", ".chat_profile_image", function (e) {
    if (e.button === 1) {
      e.preventDefault()
      e.stopPropagation()
      Hue.process_write_whisper($(this).closest(".message").data("uname"))
    }
  })

  $(".chat_area").on("mouseup", ".chat_content", function (e) {
    if (e.button === 1) {
      if (Hue.start_reply(e.target)) {
        e.preventDefault()
        e.stopPropagation()
      }
    }
  })
}

// Setup reply
Hue.setup_reply = function () {
  $("#reply_submit").click(function () {
    Hue.submit_reply()
  })
}

// Prepare data to show the reply window
Hue.start_reply = function (target) {
  if ($(target).is("a")) {
    return false
  }

  let uname = $(target).closest(".chat_message").data("uname")
  let text = $(target)
    .closest(".chat_content_container")
    .data("original_message")
  let selection = window.getSelection().toString()

  if (selection) {
    if (text.includes(selection)) {
      text = selection
    }
  }

  if (!uname || !text) {
    return false
  }

  text = $(`<div>${Hue.replace_markdown(text, false, true)}</div>`).text()

  if (!text || !text.match(/\w/)) {
    Hue.feedback("Can't quote that")
    return
  }

  text = Hue.utilz.clean_string2(text)
  let add_dots = text.length > Hue.config.quote_max_length
  text = text.substring(0, Hue.config.quote_max_length).trim()

  if (add_dots) {
    text += "..."
  }

  Hue.reply_text_raw = `>> $${uname}$ said: ${text}`
  Hue.show_reply(uname, text)
  return true
}

// Show the reply window
Hue.show_reply = function (username, quote) {
  $("#reply_text").html(quote)
  $("#reply_input").val("")

  Hue.msg_reply.set_title(`Re: ${username}`)

  Hue.msg_reply.show(function () {
    $("#reply_input").focus()
  })
}

// Submit the reply window
Hue.submit_reply = function () {
  let reply = $("#reply_input").val().trim()

  if (Hue.is_command(reply)) {
    reply = `/${reply}`
  }

  Hue.msg_reply.close()
  Hue.goto_bottom(true, false)
  Hue.process_message({
    message: Hue.reply_text_raw,
    to_history: false
  })

  if (reply) {
    Hue.process_message({
      message: reply
    })
  }
}

// Adds a message to the fresh message list
// This is a list of messages to temporarily highlight when a user refocus the client
// This is to give an indicator of fresh changes
Hue.add_fresh_message = function (container) {
  Hue.fresh_messages_list.push(container)

  if (Hue.fresh_messages_list.length > Hue.max_fresh_messages) {
    Hue.fresh_messages_list.shift()
  }
}

// Temporarily highlights recent messages since last focus
Hue.show_fresh_messages = function () {
  if (Hue.fresh_messages_list.length === 0) {
    return false
  }

  for (let container of Hue.fresh_messages_list) {
    container.addClass("highlighted3")

    setTimeout(function () {
      container.removeClass("highlighted3")
    }, Hue.fresh_messages_duration)
  }

  Hue.fresh_messages_list = []
}

// Focuses the message edit textbox
Hue.focus_edit_area = function () {
  if (Hue.editing_message_area !== document.activeElement) {
    Hue.editing_message_area.focus()
  }
}

// Handles direction on Up and Down keys
// Determines whether a message has to be edited
Hue.handle_edit_direction = function (reverse = false) {
  let area = Hue.editing_message_area

  if (
    (reverse && area.selectionStart === area.value.length) ||
    (!reverse && area.selectionStart === 0)
  ) {
    Hue.edit_last_message(reverse)
    return true
  }

  return false
}

// Edits the next latest chat message
// Either in normal or reverse order
Hue.edit_last_message = function (reverse = false) {
  let found = false
  let edit_found = true
  let last_container = false

  if (Hue.editing_message) {
    edit_found = false
  }

  $($("#chat_area > .message").get().reverse()).each(function () {
    if (found) {
      return false
    }

    if ($(this).data("user_id") === Hue.user_id) {
      $($(this).find(".chat_content_container").get().reverse()).each(
        function () {
          if (Hue.editing_message) {
            if (this === Hue.editing_message_container) {
              edit_found = true
              return true
            }
          }

          let cnt = this

          if (!edit_found) {
            last_container = this
            return true
          } else {
            if (reverse) {
              cnt = last_container
            }
          }

          if (!cnt) {
            Hue.stop_edit_message()
          } else {
            Hue.edit_message(cnt)
          }

          found = true
          return false
        }
      )
    }
  })
}

// Starts chat message editing
Hue.edit_message = function (container) {
  if (Hue.editing_message) {
    Hue.stop_edit_message()
  }

  let edit_container = $(container).find(".message_edit_container").get(0)
  let area = $(container).find(".message_edit_area").get(0)
  let chat_content = $(container).find(".chat_content").get(0)
  let edit_label = $(container).find(".message_edited_label").get(0)

  if ($(container).hasClass("chat_content_container_third")) {
    let uname = $(container).find(".chat_uname").get(0)
    $(uname).css("display", "none")
  }

  $(edit_container).css("display", "block")
  $(chat_content).css("display", "none")
  $(container).removeClass("chat_menu_button_main")
  $(container).css("display", "block")
  $(edit_label).css("display", "none")

  Hue.editing_message = true
  Hue.editing_message_container = container
  Hue.editing_message_area = area
  Hue.editing_original_message = $(container).data("original_message")

  $(area).val(Hue.editing_original_message).focus()

  setTimeout(function () {
    area.setSelectionRange(area.value.length, area.value.length)
  }, 40)

  area.scrollIntoView({
    block: "center"
  })
  Hue.check_scrollers()
}

// Stops chat message editing
Hue.stop_edit_message = function () {
  if (!Hue.editing_message || !Hue.editing_message_container) {
    return false
  }

  let edit_container = $(Hue.editing_message_container)
    .find(".message_edit_container")
    .get(0)
  let chat_content = $(Hue.editing_message_container)
    .find(".chat_content")
    .get(0)
  let edit_label = $(Hue.editing_message_container)
    .find(".message_edited_label")
    .get(0)
  $(Hue.editing_message_container).removeClass("chat_menu_button_main_selected")

  $(edit_container).css("display", "none")

  if ($(Hue.editing_message_container).data("edited")) {
    $(edit_label).css("display", "block")
  }

  if (
    $(Hue.editing_message_container).hasClass("chat_content_container_third")
  ) {
    let uname = $(Hue.editing_message_container).find(".chat_uname").get(0)
    $(uname).css("display", "inline-block")
  }

  $(Hue.editing_message_area).val("")

  $(chat_content).css("display", "inline-block")

  $(Hue.editing_message_container).addClass("chat_menu_button_main")
  $(Hue.editing_message_container).css("display", "flex")

  Hue.editing_message = false
  Hue.editing_message_container = false
  Hue.editing_message_area = false

  Hue.goto_bottom(false, false)
}

// Submits a chat message edit
Hue.send_edit_messsage = function (id) {
  if (!Hue.editing_message_container) {
    return false
  }

  let chat_content = $(Hue.editing_message_container)
    .find(".chat_content")
    .get(0)
  let new_message = Hue.editing_message_area.value.trim()
  let edit_id = $(Hue.editing_message_container).data("id")
  let third_person = false

  if (
    $(Hue.editing_message_container).hasClass("chat_content_container_third")
  ) {
    third_person = true
  }

  Hue.stop_edit_message()

  if ($(chat_content).text() === new_message) {
    return false
  }

  if (!edit_id) {
    return false
  }

  if (new_message.length === 0) {
    Hue.delete_message(edit_id)
    return false
  }

  if (third_person) {
    new_message = `/me ${new_message}`
  }

  Hue.process_message({
    message: new_message,
    edit_id: edit_id,
    to_history: false
  })
  Hue.replace_in_input_history(Hue.editing_original_message, new_message)
}

// Deletes a message
Hue.delete_message = function (id, force = false) {
  if (!id) {
    return false
  }

  if (force) {
    Hue.send_delete_message(id)
  } else {
    if (!Hue.started_safe) {
      return false
    }

    if (confirm("Are you sure you want to delete this message?")) {
      Hue.send_delete_message(id)
    }
  }
}

// Makes the delete message emit
Hue.send_delete_message = function (id) {
  Hue.socket_emit("delete_message", {
    id: id
  })
}

// Remove a message from the chat
Hue.remove_message_from_chat = function (data) {
  if (data.type === "chat" || data.type === "reaction") {
    $(".chat_content_container").each(function () {
      if ($(this).data("id") == data.id) {
        Hue.process_remove_chat_message(this)
        return false
      }
    })
  } else if (
    data.type === "announcement" ||
    data.type === "reaction" ||
    data.type === "image" ||
    data.type === "tv"
  ) {
    $(".message.announcement").each(function () {
      if ($(this).data("id") == data.id) {
        Hue.process_remove_announcement(this)
        return false
      }
    })
  }

  Hue.goto_bottom(false, false)
}

// Removes a chat message from the chat, when triggered through the context menu
Hue.remove_message_from_context_menu = function (menu) {
  let message = $(menu).closest(".message")
  let mode = message.data("mode")

  if (mode === "chat") {
    Hue.process_remove_chat_message($(menu).closest(".chat_content_container"))
  } else if (mode === "announcement") {
    Hue.process_remove_announcement(message)
  }
}

// Determines how to remove a chat message
Hue.process_remove_chat_message = function (chat_content_container) {
  let chat_content_container_id = $(chat_content_container).data(
    "chat_content_container_id"
  )

  $(".chat_content_container").each(function () {
    if (
      $(this).data("chat_content_container_id") === chat_content_container_id
    ) {
      let message2 = $(this).closest(".message")

      if (message2.hasClass("thirdperson")) {
        message2.remove()
      } else {
        if (
          $(this).closest(".chat_container").find(".chat_content_container")
          .length === 1
        ) {
          message2.remove()
        } else {
          $(this).remove()
        }
      }
    }
  })
}

// Determines how to remove an announcement
Hue.process_remove_announcement = function (message) {
  let type = $(message).data("type")
  let message_id = $(message).data("message_id")

  if (
    type === "image_change" ||
    type === "tv_change"
  ) {
    let id = $(message).data("id")
    Hue.remove_item_from_media_changed(type.replace("_change", ""), id)
  }

  $(`.message_id_${message_id}`).each(function () {
    $(this).remove()
  })

  Hue.check_media_menu_loaded_media()
}

// Checks if the user is typing a chat message to send a typing emit
// If the message appears to be a command it is ignored
Hue.check_typing = function () {
  let val = $("#input").val()

  if (val.length < Hue.old_input_val.length) {
    return false
  }

  let tval = val.trim()

  if (Hue.can_chat && tval !== "") {
    if (tval[0] === Hue.config.commands_prefix) {
      if (tval[1] !== Hue.config.commands_prefix && !tval.startsWith(`${Hue.config.commands_prefix}me `)) {
        return false
      }
    }

    Hue.typing_timer()
  }
}

// When a typing signal is received
// And animates profile images
Hue.show_typing = function (data) {
  let user = Hue.get_user_by_user_id(data.user_id)

  if (!user) {
    return false
  }

  if (Hue.user_is_ignored(user.username)) {
    return false
  }

  Hue.typing_remove_timer()
  Hue.show_aura(user.user_id)

  if (!Hue.app_focused) {
    Hue.check_favicon(1)
  }

  Hue.typing = true
}

// Stops the typing actions
Hue.hide_typing = function () {
  if (!Hue.typing) {
    return
  }

  Hue.check_favicon()
  Hue.typing = false
}

// Gets the most recent chat message by username
Hue.get_last_chat_message_by_username = function (ouname) {
  let found_message = false

  $($("#chat_area > .message.chat_message").get().reverse()).each(function () {
    let uname = $(this).data("uname")

    if (uname) {
      if (uname === ouname) {
        found_message = this
        return false
      }
    }
  })

  return found_message
}

// Gets the most recent chat message by user_id
Hue.get_last_chat_message_by_user_id = function (ouser_id) {
  let found_message = false

  $($("#chat_area > .message.chat_message").get().reverse()).each(function () {
    let user_id = $(this).data("user_id")

    if (user_id) {
      if (user_id === ouser_id) {
        found_message = this
        return false
      }
    }
  })

  return found_message
}

// Gives or maintains aura classes
// Starts timeout to remove them
Hue.show_aura = function (id) {
  if (!Hue.app_focused) {
    return false
  }

  if (Hue.aura_timeouts[id] === undefined) {
    Hue.add_aura(id)
  } else {
    clearTimeout(Hue.aura_timeouts[id])
  }

  Hue.aura_timeouts[id] = setTimeout(function () {
    Hue.remove_aura(id)
  }, Hue.config.max_typing_inactivity)
}

// Adds the aura class to the profile image of the latest chat message of a user
// This class makes the profile image glow and rotate
Hue.add_aura = function (id) {
  let message = Hue.get_last_chat_message_by_user_id(id)

  if (message) {
    $(message).find(".chat_profile_image_container").eq(0).addClass("aura")
  }

  let activity_bar_item = Hue.get_activity_bar_item_by_user_id(id)

  if (activity_bar_item) {
    $(activity_bar_item)
      .find(".activity_bar_image_container")
      .eq(0)
      .addClass("aura")
  }
}

// Removes the aura class from messages from a user
Hue.remove_aura = function (id) {
  clearTimeout(Hue.aura_timeouts[id])

  let aura = "aura"
  let cls = ".chat_profile_image_container.aura"

  $(cls).each(function () {
    let message = $(this).closest(".chat_message")

    if (message.length > 0) {
      if (message.data("user_id") === id) {
        $(this).removeClass(aura)
      }
    }
  })

  cls = ".activity_bar_image_container.aura"

  $(cls).each(function () {
    let activity_bar_item = $(this).closest(".activity_bar_item")

    if (activity_bar_item.length > 0) {
      if (activity_bar_item.data("user_id") === id) {
        $(this).removeClass(aura)
      }
    }
  })

  Hue.aura_timeouts[id] = undefined
}

// Jumps to a chat message in the chat area
// This is used when clicking the Jump button in
// windows showing chat message clones
Hue.jump_to_chat_message = function (message_id) {
  let el = $(`#chat_area > .message_id_${message_id}`).eq(0)

  if (el.length === 0) {
    return false
  }

  el[0].scrollIntoView({
    block: "center"
  })
  el.addClass("blinkattention")

  setTimeout(function () {
    el.removeClass("blinkattention")
  }, 2000)

  Hue.close_all_modals()
}

// Returns an object with clones of the announcement messages of every loaded media
Hue.get_loaded_media_messages = function () {
  let obj = {}

  for (let type of Hue.utilz.media_types) {
    obj[type] = false

    let loaded_type = Hue[`loaded_${type}`]

    if (loaded_type) {
      let message_id = loaded_type.message_id
      let message = $(`#chat_area > .message_id_${message_id}`).eq(0)

      if (message.length > 0) {
        obj[type] = message.clone(true, true)
      }
    } else {
      obj[type] = "Not Loaded Yet"
    }
  }

  return obj
}

// What to do after receiving a chat message from the server
Hue.on_chat_message = function (data) {
  Hue.update_chat({
    id: data.id,
    user_id: data.user_id,
    username: data.username,
    message: data.message,
    prof_image: data.profile_image,
    date: data.date,
    link_title: data.link_title,
    link_description: data.link_description,
    link_image: data.link_image,
    link_url: data.link_url,
    edited: data.edited,
    just_edited: data.just_edited,
  })

  Hue.hide_typing()
  Hue.remove_aura(data.user_id)
}

// Shows feedback if user doesn't have chat permission
Hue.cant_chat = function () {
  Hue.feedback("You don't have permission to chat")
}

// Find the next chat message above that involves the user
// This is a message made by the user or one that is highlighted
Hue.activity_above = function () {
  let step = false
  let activity_up_scroller_height = $("#activity_up_scroller").outerHeight()
  let scrolltop = $("#chat_area").scrollTop()

  $($("#chat_area > .message").get().reverse()).each(function () {
    let same_uname = false
    let uname = $(this).data("uname")

    if (uname && uname === Hue.username) {
      same_uname = true
    }

    if (same_uname || $(this).data("highlighted")) {
      let p = $(this).position()

      if (p.top < activity_up_scroller_height) {
        let diff = scrolltop + p.top - activity_up_scroller_height

        if (scrolltop - diff < 50) {
          return true
        }

        Hue.scroll_chat_to(diff)
        step = true
        return false
      }
    }
  })

  if (!step) {
    Hue.goto_top()
  }
}

// Find the next chat message below that involves the user
// This is a message made by the user or one that is highlighted
Hue.activity_below = function () {
  let step = false
  let activity_up_scroller_height = $("#activity_up_scroller").outerHeight()
  let activity_down_scroller_height = $("#activity_down_scroller").outerHeight()
  let chat_area_height = $("#chat_area").innerHeight()
  let scrolltop = $("#chat_area").scrollTop()

  $("#chat_area > .message").each(function () {
    let same_uname = false
    let uname = $(this).data("uname")

    if (uname && uname === Hue.username) {
      same_uname = true
    }

    if (same_uname || $(this).data("highlighted")) {
      let p = $(this).position()
      let h = $(this).outerHeight()

      if (p.top + h + activity_down_scroller_height > chat_area_height) {
        let diff = scrolltop + p.top - activity_up_scroller_height

        if (diff - scrolltop < 50) {
          return true
        }

        Hue.scroll_chat_to(diff)
        step = true
        return false
      }
    }
  })

  if (!step) {
    Hue.goto_bottom(true)
  }
}

// Clears the chat area
Hue.clear_chat = function () {
  $("#chat_area").html("")

  Hue.show_log_messages()
  Hue.goto_bottom(true)
  Hue.focus_input()
}

// Changes the chat display size
Hue.do_chat_size_change = function (size) {
  if (size === "max") {
    size = 90
  } else if (size === "min") {
    size = 10
  } else if (size === "default") {
    size = Hue.config.room_state_default_chat_display_percentage
  }

  size = Hue.utilz.nearest_ten(parseInt(size))

  if (size < 10 || size > 100) {
    return false
  }

  if (size === 100) {
    Hue.toggle_media_area()
    Hue.show_infotip("Chat Maximized")
    return
  }

  Hue.room_state.chat_display_percentage = size
  Hue.save_room_state()
  Hue.apply_media_percentages()
  Hue.notify_chat_size_change(size)
}

// Shows the chat display percentage in the infotip
Hue.notify_chat_size_change = function (size) {
  let info

  if (size === Hue.config.room_state_default_chat_display_percentage) {
    info = " (Default)"
  } else {
    info = ""
  }

  Hue.show_infotip(`Chat Size: ${size}%${info}`)
}

// Scrolls the chat to a certain vertical position
Hue.scroll_chat_to = function (scroll_top) {
  $("#chat_area").scrollTop(scroll_top)
}

// Scrolls the chat up
Hue.scroll_up = function (n) {
  let diff = $("#chat_area").scrollTop() - n
  Hue.scroll_chat_to(diff)
  return diff
}

// Scrolls the chat down
Hue.scroll_down = function (n) {
  let $ch = $("#chat_area")
  let max = $ch.prop("scrollHeight") - $ch.innerHeight()
  let diff

  if (max - $ch.scrollTop < n) {
    diff = max + 10
  } else {
    diff = $ch.scrollTop() + n
  }

  Hue.scroll_chat_to(diff)

  return diff
}

// Generates a regex with a specified string to check for highlights
// It handles various scenarious like "word," "@word" "word..."
Hue.generate_highlights_regex = function (
  word,
  case_insensitive = false,
  escape = true
) {
  let flags = "gm"

  if (case_insensitive) {
    flags += "i"
  }

  if (escape) {
    word = Hue.utilz.escape_special_characters(word)
  }

  // Raw regex if using the word "mad"
  //(?:^|\s|\")(?:\@)?(?:mad)(?:\'s)?(?:$|\s|\"|\!|\?|\,|\.|\:)
  let regex = new RegExp(
    `(?:^|\\s|\\"|\\$)(?:\\@)?(?:${word})(?:\\'s)?(?:$|\\s|\\"|\\!|\\?|\\,|\\.|\\:|\\$)`,
    flags
  )

  return regex
}

// Generates the username mention regex using the highlights regex
Hue.generate_mentions_regex = function () {
  if (Hue.get_setting("case_insensitive_username_highlights")) {
    Hue.mentions_regex = Hue.generate_highlights_regex(Hue.username, true, true)
  } else {
    Hue.mentions_regex = Hue.generate_highlights_regex(
      Hue.username,
      false,
      true
    )
  }
}

// Generates highlight words regex using the highlights regex
Hue.generate_highlight_words_regex = function () {
  let words = ""
  let lines = Hue.get_setting("other_words_to_highlight").split("\n")

  for (let i = 0; i < lines.length; i++) {
    let line = lines[i]

    words += Hue.utilz.escape_special_characters(line)

    if (i < lines.length - 1) {
      words += "|"
    }
  }

  if (words.length > 0) {
    if (Hue.get_setting("case_insensitive_words_highlights")) {
      Hue.highlight_words_regex = Hue.generate_highlights_regex(
        words,
        true,
        false
      )
    } else {
      Hue.highlight_words_regex = Hue.generate_highlights_regex(
        words,
        false,
        false
      )
    }
  } else {
    Hue.highlight_words_regex = false
  }
}

// Checks for highlights using the mentions regex and the highlight words regex
Hue.check_highlights = function (message) {
  if (Hue.get_setting("highlight_current_username")) {
    if (message.search(Hue.mentions_regex) !== -1) {
      return true
    }
  }

  if (Hue.highlight_words_regex) {
    if (message.search(Hue.highlight_words_regex) !== -1) {
      return true
    }
  }

  return false
}

// Generates the ignored words regex using highlights regex
Hue.generate_ignored_words_regex = function () {
  let words = ""
  let lines = Hue.get_setting("ignored_words").split("\n")

  for (let i = 0; i < lines.length; i++) {
    let line = lines[i]

    words += Hue.utilz.escape_special_characters(line)

    if (i < lines.length - 1) {
      words += "|"
    }
  }

  if (words.length > 0) {
    if (Hue.get_setting("case_insensitive_ignored_words")) {
      Hue.ignored_words_regex = Hue.generate_highlights_regex(
        words,
        true,
        false
      )
    } else {
      Hue.ignored_words_regex = Hue.generate_highlights_regex(
        words,
        false,
        false
      )
    }
  } else {
    Hue.ignored_words_regex = false
  }
}

// Checks for ignored words on chat messages and announcements
// Using ignored words regex
Hue.check_ignored_words = function (message = "", uname = "") {
  if (Hue.ignored_words_regex) {
    if (message.search(Hue.ignored_words_regex) !== -1) {
      if (
        uname &&
        uname === Hue.username &&
        Hue.get_setting("ignored_words_exclude_same_user")
      ) {
        return false
      } else {
        return true
      }
    }
  }

  return false
}

// Checks if there are new highlights since the last load
// If so, a clickable announcement appears which opens Highlights
Hue.check_latest_highlight = function () {
  let latest_highlight = Hue.get_latest_highlight()

  if (latest_highlight) {
    let date = $(latest_highlight).data("date")

    if (date > Hue.room_state.last_highlight_date) {
      Hue.room_state.last_highlight_date = date
      Hue.save_room_state()
      Hue.show_highlights()
    }
  }
}

// Gets the last highlighted message
// Either a chat content container or an announcement
Hue.get_latest_highlight = function () {
  let latest_highlight = false

  $($("#chat_area .chat_content_container").get().reverse()).each(function () {
    if ($(this).data("highlighted")) {
      latest_highlight = this
      return false
    }
  })

  if (latest_highlight) {
    $($("#chat_area > .message.announcement").get().reverse()).each(
      function () {
        if ($(this).data("highlighted")) {
          if ($(this).data("date") > $(latest_highlight).data("date")) {
            latest_highlight = this
          }

          return false
        }
      }
    )
  }

  return latest_highlight
}

// What to do when a message gets highlighted
Hue.on_highlight = function () {
  if (!Hue.started) {
    return false
  }

  if (!Hue.app_focused || Hue.screen_locked) {
    Hue.alert_title(2)
    Hue.show_highlight_desktop_notification()
  }
}

// What to do after general activity
Hue.on_activity = function (type) {
  if (!Hue.started) {
    return false
  }

  if (!Hue.app_focused || Hue.screen_locked) {

    if (type === "message" || type === "media_change") {
      Hue.alert_title(1)
    }
  }
}

// Resets highlights filter data
Hue.reset_highlights_filter = function () {
  $("#highlights_filter").val("")
  $("#highlights_container").html("")
  $("#highlights_no_results").css("display", "none")
}

// Show and/or filters highlights window
Hue.show_highlights = function (filter = false) {
  if (filter) {
    filter = filter.trim()
  }

  let sfilter = filter ? filter : ""

  $("#highlights_container").html("")
  $("#highlights_filter").val(sfilter)
  $("#highlights_no_results").css("display", "none")

  let clone = $($("#chat_area").children().get().reverse()).clone(true, true)

  clone.each(function () {
    $(this).removeAttr("id")
  })

  if (filter) {
    let lc_value = Hue.utilz.clean_string2(filter).toLowerCase()
    let words = lc_value.split(" ").filter((x) => x.trim() !== "")

    clone = clone.filter(function () {
      if (!$(this).data("highlighted")) {
        return false
      }

      if ($(this).hasClass("vseparator_container")) {
        return false
      }

      let text = $(this).text().toLowerCase()
      return words.some((word) => text.includes(word))
    })
  } else {
    clone = clone.filter(function () {
      if (!$(this).data("highlighted")) {
        return false
      }

      if ($(this).hasClass("vseparator_container")) {
        return false
      }

      return true
    })
  }

  if (clone.children().length === 0 && !filter) {
    $("#highlights_no_results").css("display", "block")
  } else {
    clone.appendTo("#highlights_container")
  }

  Hue.msg_highlights.show(function () {
    Hue.scroll_modal_to_top("highlights")
  })
}

// Make link preview elements
Hue.make_link_preview = function (args = {}) {
  args.message = args.message ? args.message : ""
  args.image = args.image ? args.image : ""
  args.title = args.title ? args.title : ""
  args.description = args.description ? args.description : ""

  let ans = {}
  ans.link_preview = false

  let link_preview_classes = args.image ?
    "link_preview link_preview_with_image" :
    "link_preview link_preview_no_image"
  let link_preview_image_classes = args.image ?
    "link_preview_image" :
    "nodisplay"
  let link_preview_title_classes = args.title ?
    "link_preview_title action" :
    "nodisplay"
  let link_preview_description_classes = args.description ?
    "link_preview_description" :
    "nodisplay"

  let link_preview_text_content_classes = "link_preview_text_content"

  if (args.title && args.description) {
    link_preview_text_content_classes += " link_preview_text_content_full"
  }

  if (!args.title && !args.description) {
    link_preview_text_content_classes = "nodisplay"
  }

  let link_preview_s = `<div class='${link_preview_classes}'>
        <img class='${link_preview_image_classes}' src='${
    args.image
  }' loading='lazy'>
        <div class='${link_preview_text_content_classes}'>
            <div class='${link_preview_title_classes}'>${Hue.utilz.make_html_safe(
    args.title
  )}</div>
            <div class='${link_preview_description_classes}'>${Hue.utilz.make_html_safe(
    args.description
  )}</div>
        </div>
    </div>`

  if (link_preview_s) {
    ans.link_preview = link_preview_s

    let text = Hue.replace_markdown(Hue.utilz.make_html_safe(args.message))
    let stext = `<div class='link_preview_text'>${text}</div>`

    ans.link_preview_text = text
    ans.link_preview = stext + ans.link_preview
  }

  return ans
}

// Setups link preview elements
Hue.setup_link_preview = function (fmessage, link_url) {
  let link_preview_el = fmessage.find(".link_preview").eq(0)
  let link_preview_image = link_preview_el.find(".link_preview_image").eq(0)
  let link_preview_title = link_preview_el.find(".link_preview_title").eq(0)

  let f = function () {
    Hue.open_url_menu({
      source: link_url,
      title: link_preview_title.text()
    })
  }

  if (link_preview_title.length > 0) {
    link_preview_title.click(f)
  }

  if (link_preview_image.length > 0) {
    link_preview_image.click(function (e) {
      e.stopPropagation()
      Hue.expand_image($(this).attr("src").replace(".gifv", ".gif"))
    })

    link_preview_image.on("load", function () {
      Hue.goto_bottom(false, false)
      Hue.check_scrollers()
    })
  }

  link_preview_el.parent().find(".link_preview_text").eq(0).urlize()
}

// Makes image preview elements
Hue.make_image_preview = function (message) {
  let ans = {}

  ans.image_preview = false
  ans.image_preview_src = false
  ans.image_preview_src_original = false
  ans.image_preview_text = false

  let link = Hue.utilz.get_first_url(message)

  if (!link) {
    return ans
  }

  if (link.includes("imgur.com")) {
    let code = Hue.utilz.get_imgur_image_code(link)

    if (code) {
      let extension = Hue.utilz.get_extension(link)

      ans.image_preview_src_original = `https://i.imgur.com/${code}.${extension}`
      ans.image_preview_src = `https://i.imgur.com/${code}l.jpg`

      // This is in a single line on purpose
      ans.image_preview = `<div class='image_preview action'><img draggable="false" class="image_preview_image" src="${ans.image_preview_src}" loading="lazy"></div>`

      let text = Hue.replace_markdown(Hue.utilz.make_html_safe(message))
      let stext = `<div class='image_preview_text'>${text}</div>`

      ans.image_preview_text = message
      ans.image_preview = stext + ans.image_preview
    }
  }

  return ans
}

// Setups image preview elements
Hue.setup_image_preview = function (fmessage, image_preview_src_original) {
  let image_preview_el = fmessage.find(".image_preview").eq(0)

  image_preview_el.click(function () {
    Hue.open_url_menu({
      source: image_preview_src_original
    })
  })

  let image_preview_image = image_preview_el.find(".image_preview_image").eq(0)

  image_preview_image.on("load", function () {
    Hue.goto_bottom(false, false)
    Hue.check_scrollers()
  })

  image_preview_image.click(function (e) {
    e.stopPropagation()
    Hue.expand_image(image_preview_src_original.replace(".gifv", ".gif"))
  })

  image_preview_el.parent().find(".image_preview_text").eq(0).urlize()
}

// Sends a chat message through the say command
Hue.say_command = function (arg, ans) {
  Hue.process_message({
    message: arg,
    to_history: ans.to_history,
    clr_input: ans.clr_input,
  })
}

// Starts chat area scroll events
Hue.scroll_events = function () {
  $("#chat_area")[0].addEventListener("wheel", function (e) {
    $("#chat_area").stop()
    Hue.clear_autoscroll()
    Hue.last_scroll_date = Date.now()
  })

  $("#chat_area").scroll(function () {
    Hue.scroll_timer()
  })
}

// Shows the top scroller
// Scrollers are the elements that appear at the top or at the bottom,
// when the chat area is scrolled
Hue.show_top_scroller = function () {
  $("#top_scroller_container").css("visibility", "visible")
}

// Hides the top scroller
Hue.hide_top_scroller = function () {
  $("#top_scroller_container").css("visibility", "hidden")
}

// Shows the bottom scroller
// Scrollers are the elements that appear at the top or at the bottom,
// when the chat area is scrolled
Hue.show_bottom_scroller = function () {
  $("#bottom_scroller_container").css("visibility", "visible")
  Hue.chat_scrolled = true
}

// Hides the bottom scroller
Hue.hide_bottom_scroller = function () {
  $("#bottom_scroller_container").css("visibility", "hidden")
  Hue.chat_scrolled = false
}

// Updates scrollers state based on scroll position
Hue.check_scrollers = function () {
  if (Hue.autoscrolling && Hue.autoscroll_direction === "up") {
    return
  }

  let $ch = $("#chat_area")
  let max = $ch.prop("scrollHeight") - $ch.innerHeight()
  let scrolltop = $ch.scrollTop()
  let diff = max - scrolltop

  if (scrolltop === 0) {
    Hue.hide_top_scroller()
    Hue.clear_autoscroll()
  } else {
    Hue.show_top_scroller()
  }

  if (diff > Hue.small_scroll_amount) {
    Hue.show_bottom_scroller()
  } else {
    Hue.hide_bottom_scroller()

    if (diff <= 0) {
      Hue.clear_autoscroll()
    }
  }
}

// Starts chat autoscrolling upwards
Hue.autoscroll_up = function () {
  if (Hue.autoscrolling) {
    Hue.clear_autoscroll()
    Hue.check_scrollers()
    return false
  }

  Hue.clear_autoscroll()

  Hue.autoscroll_up_interval = setInterval(function () {
    let diff = Hue.scroll_up(Hue.get_setting("autoscroll_amount"))

    if (Hue.last_autoscroll_diff === diff) {
      Hue.clear_autoscroll()
      Hue.check_scrollers()
    } else {
      Hue.last_autoscroll_diff = diff
    }
  }, Hue.get_setting("autoscroll_delay"))

  Hue.show_bottom_scroller()
  Hue.autoscrolling = true
  Hue.autoscroll_direction = "up"
}

// Starts chat autoscrolling downwards
Hue.autoscroll_down = function () {
  if (Hue.autoscrolling) {
    Hue.clear_autoscroll()
    Hue.check_scrollers()
    return false
  }

  Hue.clear_autoscroll()

  Hue.autoscroll_down_interval = setInterval(function () {
    let diff = Hue.scroll_down(Hue.get_setting("autoscroll_amount"))

    if (Hue.last_autoscroll_diff === diff) {
      Hue.clear_autoscroll()
      Hue.check_scrollers()
    } else {
      Hue.last_autoscroll_diff = diff
    }
  }, Hue.get_setting("autoscroll_delay"))

  Hue.autoscrolling = true
  Hue.autoscroll_direction = "down"
}

// Clears autoscrolling intervals
Hue.clear_autoscroll = function () {
  clearInterval(Hue.autoscroll_up_interval)
  clearInterval(Hue.autoscroll_down_interval)

  Hue.last_autoscroll_diff = 0
  Hue.autoscrolling = false
}

// Shows a system announcement
// Used for ads
Hue.show_announcement = function (data, date = Date.now()) {
  Hue.public_feedback(data.message, {
    id: data.id,
    brk: Hue.get_chat_icon("star"),
    date: date,
    preview_image: true,
    link_title: data.link_title,
    link_description: data.link_description,
    link_image: data.link_image,
    link_url: data.link_url,
  })
}

// Scrolls the chat to the top
Hue.goto_top = function () {
  Hue.clear_autoscroll()
  Hue.scroll_chat_to(0)
  Hue.hide_top_scroller()
}

// Scrolls the chat to the bottom
Hue.goto_bottom = function (force = false) {
  if (!force && Hue.started) {
    if (Date.now() - Hue.last_scroll_date < Hue.recent_scroll_time) {
      return
    }
  }

  let $ch = $("#chat_area")
  let max = $ch.prop("scrollHeight") - $ch.innerHeight()

  if (force) {
    Hue.clear_autoscroll()
    Hue.scroll_chat_to(max)
    Hue.show_top_scroller()
    Hue.hide_bottom_scroller()
  } else {
    if (!Hue.chat_scrolled) {
      Hue.clear_autoscroll()
      Hue.scroll_chat_to(max)
    }
  }
}

// Fills the chat and media changes with log messages from initial data
Hue.show_log_messages = function () {
  if (Hue.log_messages_processed) {
    return false
  }

  let num_image = 0
  let num_tv = 0

  if (Hue.log_messages && Hue.log_messages.length > 0) {
    for (let message of Hue.log_messages) {
      let type = message.type

      if (type === "image") {
        num_image += 1
      } else if (type === "tv") {
        num_tv += 1
      }
    }
  }

  // If there are no media items in the log, show the current room media

  if (num_image === 0) {
    Hue.setup_image(
      "show",
      Object.assign(Hue.get_media_object_from_init_data("image"), {
        in_log: false,
      })
    )
  }

  if (num_tv === 0) {
    Hue.setup_tv(
      "show",
      Object.assign(Hue.get_media_object_from_init_data("tv"), {
        in_log: false,
      })
    )
  }

  if (Hue.log_messages && Hue.log_messages.length > 0) {
    for (let message of Hue.log_messages) {
      let id = message.id
      let type = message.type
      let data = message.data
      let date = message.date

      if (data) {
        if (type === "chat") {
          Hue.update_chat({
            id: id,
            user_id: data.user_id,
            username: data.username,
            message: data.content,
            prof_image: data.profile_image,
            link_title: data.link_title,
            link_description: data.link_description,
            link_image: data.link_image,
            link_url: data.link_url,
            date: date,
            scroll: false,
            edited: data.edited,
          })
        } else if (type === "image") {
          data.id = id
          data.date = date
          Hue.setup_image("show", data)
        } else if (type === "tv") {
          data.id = id
          data.date = date
          Hue.setup_tv("show", data)
        } else if (type === "reaction") {
          data.id = id
          Hue.show_reaction(data, date)
        } else if (type === "announcement") {
          data.id = id
          Hue.show_announcement(data, date)
        }
      }
    }
  }

  Hue.log_messages_processed = true
}

// Sends a simple shrug chat message
Hue.shrug = function () {
  Hue.process_message({
    message: "¯\\_(ツ)_/¯",
    to_history: false,
  })
}

// Centralized function to show local feedback messages
Hue.feedback = function (message, data = false) {
  let obj = {
    brk: Hue.get_chat_icon("info"),
    message: message,
    public: false,
  }

  if (data) {
    Object.assign(obj, data)
  }

  if (!obj.brk.startsWith("<") && !obj.brk.endsWith(">")) {
    obj.brk = `<div class='inline'>${obj.brk}</div>`
  }

  return Hue.chat_announce(obj)
}

// Centralized function to show public announcement messages
Hue.public_feedback = function (message, data = false) {
  let obj = {
    brk: Hue.get_chat_icon("info"),
    message: message,
    public: true,
  }

  if (data) {
    Object.assign(obj, data)
  }

  if (!obj.brk.startsWith("<") && !obj.brk.endsWith(">")) {
    obj.brk = `<div class='inline'>${obj.brk}</div>`
  }

  return Hue.chat_announce(obj)
}

// Removes a message above or below a message with a certain ID
Hue.remove_messages_after_id = function (id, direction) {
  let index = false

  $($("#chat_area .chat_content_container").get().reverse()).each(function () {
    if ($(this).data("id") === id) {
      let container_index = $(this).index()
      let message = $(this).closest(".message")

      if (
        $(this).closest(".chat_container").find(".chat_content_container")
        .length > 1
      ) {
        if (direction === "above") {
          message
            .find(".chat_content_container")
            .slice(0, container_index)
            .remove()
        } else if (direction === "below") {
          message
            .find(".chat_content_container")
            .slice(container_index + 1)
            .remove()
        }
      }

      index = message.index()
      return false
    }
  })

  if (index === false) {
    $($("#chat_area > .announcement").get().reverse()).each(function () {
      if ($(this).data("id") === id) {
        index = $(this).index()
        return false
      }
    })
  }

  if (index === false) {
    return false
  }

  if (direction === "above") {
    $("#chat_area > .message").slice(0, index).remove()
  } else if (direction === "below") {
    $("#chat_area > .message")
      .slice(index + 1)
      .remove()
  }

  Hue.goto_bottom(true, false)
}

// Setups some chat configs
Hue.setup_chat = function () {
  $("#top_scroller").click(function () {
    Hue.goto_top()
  })

  $("#top_autoscroller").click(function () {
    Hue.autoscroll_up()
  })

  $("#activity_up_scroller").click(function () {
    Hue.activity_above()
  })

  $("#bottom_scroller").click(function () {
    Hue.goto_bottom(true)
  })

  $("#bottom_autoscroller").click(function () {
    Hue.autoscroll_down()
  })

  $("#activity_down_scroller").click(function () {
    Hue.activity_below()
  })
}

// Replace things like $id$ with the message id
Hue.replace_message_vars = function (id, message) {
  if (id) {
    message = message.replace(/\$id\$/g, id)
  }

  return message
}

// Gradually increases the chat display percentage
Hue.increase_chat_percentage = function () {
  let size = parseInt(Hue.room_state.chat_display_percentage)
  size += 10
  size = Hue.utilz.round2(size, 10)
  Hue.do_chat_size_change(size)
}

// Gradually decreases the chat display percentage
Hue.decrease_chat_percentage = function () {
  let size = parseInt(Hue.room_state.chat_display_percentage)
  size -= 10
  size = Hue.utilz.round2(size, 10)
  Hue.do_chat_size_change(size)
}

// Sets the chat display percentage to default
Hue.set_default_chat_size = function () {
  Hue.do_chat_size_change("default")
}

// Adds style to the icons of active media messages
Hue.update_chat_media_feedback = function () {
  $("#chat_area > .announcement").each(function () {
    let icon = $(this).find(".announcement_brk").eq(0).find("svg").eq(0)

    if (icon.hasClass("shady")) {
      icon.removeClass("shady")
    }

    if ($(this).data("type") === "image_change") {
      if ($(this).data("message_id") === Hue.loaded_image.message_id) {
        icon.addClass("shady")
      }
    } else if ($(this).data("type") === "tv_change") {
      if ($(this).data("message_id") === Hue.loaded_tv.message_id) {
        icon.addClass("shady")
      }
    }
  })
}
// Setup chat functions
Hue.setup_chat_functions = function () {
  $("#chat_functions_box_container").hover(
    function () {
      Hue.mouse_over_chat_functions = true
      clearTimeout(Hue.hide_chat_functions_timeout)
    },

    function () {
      Hue.mouse_over_chat_functions = false
      Hue.start_hide_chat_functions()
    }
  )

  $("#chat_area").click(function () {
    if (Hue.chat_functions_box_open) {
      Hue.hide_chat_functions_box()
    }
  })

  $("#input").click(function () {
    if (Hue.chat_functions_box_open) {
      Hue.hide_chat_functions_box()
    }
  })

  $("#chat_functions_react").click(function () {
    Hue.show_reaction_picker("chat")
    Hue.hide_chat_functions_box()
  })

  Hue.horizontal_separator.separate("chat_functions_box")
}

// Starts a timeout to hide the chat functions box when the mouse leaves the box
Hue.start_hide_chat_functions = function () {
  clearTimeout(Hue.show_chat_functions_timeout)

  Hue.hide_chat_functions_timeout = setTimeout(function () {
    if (Hue.mouse_over_chat_functions) {
      return false
    }

    Hue.hide_chat_functions_box()
  }, Hue.chat_functions_hover_delay)
}

// Shows the chat functions box
Hue.show_chat_functions_box = function () {
  if (!Hue.chat_functions_box_open) {
    $("#recent_input_box").html("")

    let max = Hue.get_setting("max_recent_input_items")

    if (max > 0) {
      let n = 0

      for (let item of Hue.input_history.slice(0).reverse()) {
        let m = item.message.trim()

        if (m.length > 100 || m.includes("\n")) {
          continue
        }

        let message = Hue.utilz.make_html_safe(m)
        let el = `<div class='recent_input_item action pointer'>${message}</div>`
        $("#recent_input_box").prepend(el)

        n += 1

        if (n >= max) {
          break
        }
      }
    }

    $("#chat_functions_box_container").css("display", "flex")
    Hue.chat_functions_box_open = true
  }
}

// Hides the chat functions box
Hue.hide_chat_functions_box = function () {
  if (Hue.chat_functions_box_open) {
    clearTimeout(Hue.hide_chat_functions_timeout)
    $("#chat_functions_box_container").css("display", "none")
    Hue.chat_functions_box_open = false
  }
}

// Resets chat search filter state
Hue.reset_chat_search_filter = function () {
  $("#chat_search_filter").val("")
  $("#chat_search_container").html("")
  $("#chat_search_no_results").css("display", "none")
}

// Shows the chat search window
Hue.show_chat_search = function (filter = false) {
  if (filter) {
    filter = filter.trim()
  }

  let sfilter = filter ? filter : ""

  $("#chat_search_container").html("")
  $("#chat_search_no_results").css("display", "none")
  $("#chat_search_filter").val(sfilter)

  if (filter) {
    let lc_value = Hue.utilz.clean_string2(filter).toLowerCase()
    let words = lc_value.split(" ").filter((x) => x.trim() !== "")
    let clone = $($("#chat_area").children().get().reverse()).clone(true, true)

    clone.each(function () {
      $(this).removeAttr("id")
    })

    clone = clone.filter(function () {
      if ($(this).hasClass("vseparator_container")) {
        return false
      }

      let text = $(this).text().toLowerCase()
      let text_cmp = words.some((word) => text.includes(word))
      
      let source_cmp = false
      let media_source = $(this).data("media_source")
      
      if (media_source) {
        source_cmp = words.some((word) => media_source.includes(word))
      }

      return text_cmp || source_cmp
    })

    if (clone.children().length === 0) {
      $("#chat_search_no_results").css("display", "block")
    } else {
      clone.appendTo("#chat_search_container")
    }

    Hue.add_to_chat_searches(filter)
  }

  Hue.msg_chat_search.show(function () {
    Hue.scroll_modal_to_top("chat_search")
  })
}

// Adds an item to the recently searched list for chat searches
Hue.add_to_chat_searches = function (filter) {
  clearTimeout(Hue.add_to_chat_searches_timeout)

  Hue.add_to_chat_searches_timeout = setTimeout(function () {
    Hue.do_add_to_chat_searches(filter)
  }, Hue.add_to_chat_searches_delay)
}

// Does the actual addition to the chat searches list
Hue.do_add_to_chat_searches = function (filter) {
  for (let i = 0; i < Hue.room_state.chat_searches.length; i++) {
    if (Hue.room_state.chat_searches[i] === filter) {
      Hue.room_state.chat_searches.splice(i, 1)
      break
    }
  }

  Hue.room_state.chat_searches.unshift(filter)

  if (Hue.room_state.chat_searches.length > Hue.config.max_chat_searches) {
    Hue.room_state.chat_searches = Hue.room_state.chat_searches.slice(
      0,
      Hue.config.max_chat_searches
    )
  }

  Hue.save_room_state()
}

// Clears the chat searches list
Hue.clear_chat_searches = function () {
  Hue.room_state.chat_searches = []
  Hue.save_room_state()
}

// Process the footer search input
Hue.process_footer_search_input = function () {
  let value = $("#footer_search_input").val().trim()
  Hue.show_chat_search(value)
  Hue.clear_footer_search_input()
}

// Clears the footer chat search input
Hue.clear_footer_search_input = function () {
  $("#footer_search_input").val("")
}
// Commands object
// Used to populate the commands list
// Actions for each command are declared here
Hue.commands = {
  "clear": {
    action: (arg, ans) => {
      Hue.clear_chat()
    },
    description: `Clears the chat`,
  },
  "clearinput": {
    action: (arg, ans) => {
      Hue.clear_input()
    },
    description: `Clears the text input`,
  },
  "users": {
    action: (arg, ans) => {
      if (arg) {
        Hue.show_userlist_window("normal", arg)
      } else {
        Hue.show_userlist_window()
      }
    },
    description: `Shows the user list. Accepts a filter as an argument`,
  },
  "publicrooms": {
    action: (arg, ans) => {
      if (arg) {
        Hue.request_roomlist(arg, "public_roomlist")
      } else {
        Hue.request_roomlist("", "public_roomlist")
      }
    },
    description: `Shows the public room list. Accepts a filter as an argument`,
  },
  "visitedrooms": {
    action: (arg, ans) => {
      if (arg) {
        Hue.request_roomlist(arg, "visited_roomlist")
      } else {
        Hue.request_roomlist("", "visited_roomlist")
      }
    },
    description: `Shows the visited room list. Accepts a filter as an argument`,
  },
  "roomname": {
    action: (arg, ans) => {
      if (arg) {
        Hue.change_room_name(arg)
      } else {
        Hue.show_room()
      }
    },
    description: `Changes the name of the room`,
  },
  "roomnameedit": {
    action: (arg, ans) => {
      Hue.room_name_edit()
      ans.to_history = false
      ans.clr_input = false
    },
    description: `Puts the room name in the input, ready to be edited`,
  },
  "played": {
    action: (arg, ans) => {
      if (arg) {
        Hue.show_played(arg)
      } else {
        Hue.show_played()
      }
    },
    description: `Shows the list of songs played. Accepts a filter as an argument`,
  },
  "search": {
    action: (arg, ans) => {
      if (arg) {
        Hue.show_chat_search(arg)
      } else {
        Hue.show_chat_search()
      }
    },
    description: `Opens the search window. Accepts a query as an argument`,
  },
  "clearsearches": {
    action: (arg, ans) => {
      Hue.clear_chat_searches()
    },
    description: `Clears the saved recent searches`,
  },
  "role": {
    action: (arg, ans) => {
      Hue.show_role()
    },
    description: `Shows your role and permissions`,
  },
  "voice1": {
    action: (arg, ans) => {
      Hue.change_role(arg, "voice_1")
    },
    description: `Gives voice_1 to a user`,
  },
  "voice2": {
    action: (arg, ans) => {
      Hue.change_role(arg, "voice_2")
    },
    description: `Gives voice_2 to a user`,
  },
  "voice3": {
    action: (arg, ans) => {
      Hue.change_role(arg, "voice_3")
    },
    description: `Gives voice_3 to a user`,
  },
  "voice4": {
    action: (arg, ans) => {
      Hue.change_role(arg, "voice_4")
    },
    description: `Gives voice_4 to a user`,
  },
  "op1": {
    action: (arg, ans) => {
      Hue.change_role(arg, "op_1")
    },
    description: `Gives op_1 to a user`,
  },
  "op2": {
    action: (arg, ans) => {
      Hue.change_role(arg, "op_2")
    },
    description: `Gives op_2 to a user`,
  },
  "op3": {
    action: (arg, ans) => {
      Hue.change_role(arg, "op_3")
    },
    description: `Gives op_3 to a user`,
  },
  "op4": {
    action: (arg, ans) => {
      Hue.change_role(arg, "op_4")
    },
    description: `Gives op_4 to a user`,
  },
  "admin": {
    action: (arg, ans) => {
      Hue.change_role(arg, "admin")
    },
    description: `Gives admin to a user. This gives a user the same rights as the original admin`,
  },
  "resetvoices": {
    action: (arg, ans) => {
      Hue.reset_voices()
    },
    description: `Turns all voices above 1 to voice_1`,
  },
  "resetops": {
    action: (arg, ans) => {
      Hue.reset_ops()
    },
    description: `Turns all ops above 1 to op_1`,
  },
  "removeops": {
    action: (arg, ans) => {
      Hue.remove_ops()
    },
    description: `Removes all op roles`,
  },
  "ban": {
    action: (arg, ans) => {
      Hue.ban(arg)
    },
    description: `Bans a user from the room`,
  },
  "unban": {
    action: (arg, ans) => {
      Hue.unban(arg)
    },
    description: `Unbans a user from the room`,
  },
  "unbanall": {
    action: (arg, ans) => {
      Hue.unban_all()
    },
    description: `Removes all bans`,
  },
  "bancount": {
    action: (arg, ans) => {
      Hue.get_ban_count()
    },
    description: `Displays the number of banned users in the room`,
  },
  "kick": {
    action: (arg, ans) => {
      Hue.kick(arg)
    },
    description: `Kicks a user out of the room`,
  },
  "public": {
    action: (arg, ans) => {
      Hue.change_privacy(true)
    },
    description: `Room appears in the public room list`,
  },
  "private": {
    action: (arg, ans) => {
      Hue.change_privacy(false)
    },
    description: `Room doesn\'t appear in the public room list`,
  },
  "privacy": {
    action: (arg, ans) => {
      Hue.show_public()
    },
    description: `Shows if a room is public or private`,
  },
  "log": {
    action: (arg, ans) => {
      Hue.show_log()
    },
    description: `Shows if the log is enabled or disabled`,
  },
  "enablelog": {
    action: (arg, ans) => {
      Hue.change_log(true)
    },
    description: `Enables logging of the room. Which allows users to see previous messages before they joined`,
  },
  "disablelog": {
    action: (arg, ans) => {
      Hue.change_log(false)
    },
    description: `Disables logging`,
  },
  "clearlog": {
    action: (arg, ans) => {
      Hue.clear_log("all")
    },
    description: `Removes all messages from the log and resets client state for all the users in the room`,
  },
  "tv": {
    action: (arg, ans) => {
      if (arg) {
        Hue.change_tv_source(arg)
      } else {
        Hue.show_media_source("tv")
      }
    },
    description: `Changes the TV using a search term or URL. "${Hue.config.commands_prefix}tv restart" restarts the current video for all users, in case it gets stuck. To link a Youtube playlist the URL must be a pure playlist URL without a video ID. "${Hue.config.commands_prefix}tv default" sets the tv to the site's default tv. "${Hue.config.commands_prefix}tv prev" changes to the previous tv source`,
  },
  "image": {
    action: (arg, ans) => {
      if (arg) {
        Hue.change_image_source(arg)
      } else {
        Hue.show_media_source("image")
      }
    },
    description: `Sends an image to be uploaded by URL. "${Hue.config.commands_prefix}image default" sets the image to the site's default image. "${Hue.config.commands_prefix}image prev" changes to the previous image source`,
  },
  "status": {
    action: (arg, ans) => {
      Hue.show_room_status()
    },
    description: `Shows the room status window`,
  },
  "topic": {
    action: (arg, ans) => {
      if (arg) {
        Hue.change_topic(arg)
      } else {
        Hue.show_topic()
      }
    },
    description: `Changes the topic of the room`,
  },
  "topicadd": {
    action: (arg, ans) => {
      Hue.topicadd(arg)
    },
    description: `Adds a section at the end of the topic`,
  },
  "topictrim": {
    action: (arg, ans) => {
      if (arg) {
        Hue.topictrim(arg)
      } else {
        Hue.topictrim(1)
      }
    },
    description: `Removes a section from the end of the topic, where the optional x is the number of trims you want to do`,
  },
  "topicaddstart": {
    action: (arg, ans) => {
      Hue.topicstart(arg)
    },
    description: `Adds a section at the start of the topic`,
  },
  "topictrimstart": {
    action: (arg, ans) => {
      if (arg) {
        Hue.topictrimstart(arg)
      } else {
        Hue.topictrimstart(1)
      }
    },
    description: `Removes a section from the start of the topic, where the optional x is the number of trims you want to do`,
  },
  "topicedit": {
    action: (arg, ans) => {
      Hue.topicedit()
      ans.to_history = false
      ans.clr_input = false
    },
    description: `Puts the topic in the input, ready to be edited`,
  },
  "room": {
    action: (arg, ans) => {
      Hue.show_room()
    },
    description: `Shows the room name`,
  },
  "help": {
    action: (arg, ans) => {
      Hue.show_help()
    },
    description: `Shows Help`,
  },
  "commands": {
    action: (arg, ans) => {
      if (arg) {
        Hue.show_commands(arg)
      } else {
        Hue.show_commands()
      }
    },
    description: `Shows Commands`,
  },
  "tvvolume": {
    action: (arg, ans) => {
      Hue.change_tv_volume(arg)
    },
    description: `Changes the volume of the tv`,
  },
  "inputhistory": {
    action: (arg, ans) => {
      if (arg) {
        Hue.show_input_history(arg)
      } else {
        Hue.show_input_history()
      }
    },
    description: `Shows the input history. Accepts a filter as an argument`,
  },
  "clearinputhistory": {
    action: (arg, ans) => {
      Hue.clear_input_history()
    },
    description: `Clears the input history`,
  },
  "changeusername": {
    action: (arg, ans) => {
      Hue.change_username(arg)
    },
    description: `Changes the account username`,
  },
  "changepassword": {
    action: (arg, ans) => {
      Hue.change_password(arg)
    },
    description: `Changes the account password`,
  },
  "changeemail": {
    action: (arg, ans) => {
      Hue.change_email(arg)
    },
    description: `Changes the account email`,
  },
  "verifyemail": {
    action: (arg, ans) => {
      Hue.verify_email(arg)
    },
    description: `Used to verify an email email with a received code`,
  },
  "details": {
    action: (arg, ans) => {
      Hue.show_details()
    },
    description: `Shows the account details`,
  },
  "logout": {
    action: (arg, ans) => {
      Hue.logout()
    },
    description: `Ends the user session`,
  },
  "fill": {
    action: (arg, ans) => {
      Hue.fill()
    },
    description: `Used for debugging purposes`,
  },
  "shrug": {
    action: (arg, ans) => {
      Hue.shrug()
    },
    description: `Shows the shrug ascii`,
  },
  "disconnectothers": {
    action: (arg, ans) => {
      Hue.disconnect_others()
    },
    description: `Disconnects other connected account clients`,
  },
  "whisper": {
    action: (arg, ans) => {
      Hue.process_write_whisper(arg, true)
    },
    description: `Opens a window to write a whisper to x user. If the argument contains the &gt; character it will use the inline method where the username is whatever is to the left of the &gt; and the message whatever is to the right of it, and send the message directly without using the window`,
  },
  "whisper2": {
    action: (arg, ans) => {
      Hue.process_write_whisper(arg, false)
    },
    description: `Same as ${Hue.config.commands_prefix}whisper but it doesn't show feedback when sent through the inline format, for example "${Hue.config.commands_prefix}whisper2 user > message". Useful for making calls to bots without filling your own chat too much`,
  },
  "systemrestart": {
    action: (arg, ans) => {
      Hue.send_system_restart_signal()
      ans.to_history = false
    },
    description: `(Only for superusers) Sends a signal to every connected client to restart the application`,
  },
  "systembroadcast": {
    action: (arg, ans) => {
      Hue.system_broadcast()
      ans.to_history = false
    },
    description: `(Only for superusers) Sends a whisper to every connected client`,
  },
  "annex": {
    action: (arg, ans) => {
      if (arg) {
        Hue.annex(arg)
      } else {
        Hue.annex()
        ans.to_history = false
      }
    },
    description: `(Only for superusers) Used to change the user's role`,
  },
  "modusername": {
    action: (arg, ans) => {
      if (arg) {
        Hue.modusername(arg)
      }
    },
    description: `(Only for superusers) Used to change a user's username`,
  },
  "highlights": {
    action: (arg, ans) => {
      if (arg) {
        Hue.show_highlights(arg)
      } else {
        Hue.show_highlights()
      }
    },
    description: `Shows chat messages where you were highlighted. Accepts a filter as an argument`,
  },
  "lock": {
    action: (arg, ans) => {
      Hue.stop_and_lock(false)
    },
    description: `Locks all media`,
  },
  "unlock": {
    action: (arg, ans) => {
      Hue.unlock()
    },
    description: `Unlocks all media`,
  },
  "stopandlock": {
    action: (arg, ans) => {
      Hue.stop_and_lock()
    },
    description: `Stops and locks all media`,
  },
  "roommenu": {
    action: (arg, ans) => {
      Hue.show_room_menu()
    },
    description: `Shows the room menu`,
  },
  "usermenu": {
    action: (arg, ans) => {
      Hue.show_user_menu()
    },
    description: `Shows the user menu`,
  },
  "mediamenu": {
    action: (arg, ans) => {
      Hue.show_media_menu()
    },
    description: `Shows the media menu`,
  },
  "imagehistory": {
    action: (arg, ans) => {
      if (arg) {
        Hue.show_media_history("image", arg)
      } else {
        Hue.show_media_history("image")
      }
    },
    description: `Shows the image history. Accepts a filter as an argument`,
  },
  "tvhistory": {
    action: (arg, ans) => {
      if (arg) {
        Hue.show_media_history("tv", arg)
      } else {
        Hue.show_media_history("tv")
      }
    },
    description: `Shows the tv history. Accepts a filter as an argument`,
  },
  "lockimage": {
    action: (arg, ans) => {
      Hue.change_media_lock({type:"image", what:true, feedback:true})
    },
    description: `Locks the image`,
  },
  "locktv": {
    action: (arg, ans) => {
      Hue.change_media_lock({type:"tv", what:true, feedback:true})
    },
    description: `Locks the tv`,
  },
  "unlockimage": {
    action: (arg, ans) => {
      Hue.change_media_lock({type:"image", what:false, feedback:true})
    },
    description: `Unlocks the image`,
  },
  "unlocktv": {
    action: (arg, ans) => {
      Hue.change_media_lock({type:"tv", what:false, feedback:true})
    },
    description: `Unlocks the tv`,
  },
  "togglelockimage": {
    action: (arg, ans) => {
      Hue.change_media_lock({type:"image", feedback:true})
    },
    description: `Toggles between lock and unlock the image`,
  },
  "togglelocktv": {
    action: (arg, ans) => {
      Hue.change_media_lock({type:"tv", feedback:true})
    },
    description: `Toggles between lock and unlock the tv`,
  },
  "showimage": {
    action: (arg, ans) => {
      Hue.toggle_media({type:"image", what:true})
    },
    description: `Makes the image visible and active`,
  },
  "showtv": {
    action: (arg, ans) => {
      Hue.toggle_media({type:"tv", what:true})
    },
    description: `Makes the tv visible and active`,
  },
  "hideimage": {
    action: (arg, ans) => {
      Hue.toggle_media({type:"image", what:false})
    },
    description: `Makes the image invisible and inactive`,
  },
  "hidetv": {
    action: (arg, ans) => {
      Hue.toggle_media({type:"tv", what:false})
    },
    description: `Makes the tv invisible and inactive`,
  },
  "toggleimage": {
    action: (arg, ans) => {
      Hue.toggle_media({type:"image"})
    },
    description: `Toggles between show and hide the image`,
  },
  "toggletv": {
    action: (arg, ans) => {
      Hue.toggle_media({type:"tv"})
    },
    description: `Toggles between show and hide the tv`,
  },
  "maximizeimage": {
    action: (arg, ans) => {
      Hue.maximize_image()
    },
    description: `Maximize/Restore the image`,
  },
  "maximizetv": {
    action: (arg, ans) => {
      Hue.maximize_tv()
    },
    description: `Maximize/Restore the tv`,
  },
  "starttv": {
    action: (arg, ans) => {
      Hue.play_tv()
    },
    description: `Starts the tv`,
  },
  "stoptv": {
    action: (arg, ans) => {
      Hue.stop_tv(false)
    },
    description: `Stops the tv`,
  },
  "openimage": {
    action: (arg, ans) => {
      Hue.show_current_image_modal()
    },
    description: `Opens the image modal with the current image`,
  },
  "openlastimage": {
    action: (arg, ans) => {
      Hue.show_current_image_modal(false)
    },
    description: `Opens the image modal with the latest announced image`,
  },
  "date": {
    action: (arg, ans) => {
      Hue.show_current_date()
    },
    description: `Shows current date`,
  },
  "js": {
    action: (arg, ans) => {
      Hue.execute_javascript(arg)
    },
    description: `Executes a javascript operation`,
  },
  "js2": {
    action: (arg, ans) => {
      Hue.execute_javascript(arg, false)
    },
    description: `Executes a javascript operation without showing the result`,
  },
  "changeimage": {
    action: (arg, ans) => {
      Hue.show_image_picker()
    },
    description: `Opens window to change the image`,
  },
  "changetv": {
    action: (arg, ans) => {
      Hue.show_tv_picker()
    },
    description: `Opens the window to change the tv`,
  },
  "closeall": {
    action: (arg, ans) => {
      Hue.close_all_message()
    },
    description: `Closes all the modal windows and popups`,
  },
  "closeallmodals": {
    action: (arg, ans) => {
      Hue.close_all_modals()
    },
    description: `Closes all the modal windows`,
  },
  "closeallpopups": {
    action: (arg, ans) => {
      Hue.close_all_popups()
    },
    description: `Closes all the popups`,
  },
  "activityabove": {
    action: (arg, ans) => {
      Hue.activity_above()
    },
    description: `Scrolls chat to activity pertaining you above`,
  },
  "activitybelow": {
    action: (arg, ans) => {
      Hue.activity_below()
    },
    description: `Scrolls chat to activity pertaining you below`,
  },
  "globalsettings": {
    action: (arg, ans) => {
      if (arg) {
        Hue.show_global_settings(arg)
      } else {
        Hue.show_global_settings()
      }
    },
    description: `Shows the global settings window. Accepts a filter as an argument`,
  },
  "roomsettings": {
    action: (arg, ans) => {
      if (arg) {
        Hue.show_room_settings(arg)
      } else {
        Hue.show_room_settings()
      }
    },
    description: `Shows the room settings window. Accepts a filter as an argument`,
  },
  "goto": {
    action: (arg, ans) => {
      Hue.goto_url(arg, "tab")
    },
    description: `Goes to room ID or URL`,
  },
  "refreshimage": {
    action: (arg, ans) => {
      Hue.refresh_image()
    },
    description: `Loads the image again`,
  },
  "refreshtv": {
    action: (arg, ans) => {
      Hue.refresh_tv()
    },
    description: `Loads the tv again`,
  },
  "ping": {
    action: (arg, ans) => {
      Hue.ping_server()
    },
    description: `Pings the server and shows the delay from the moment it was sent to the moment it was received`,
  },
  "reactlikechat": {
    action: (arg, ans) => {
      Hue.send_reaction("like", "chat")
    },
    description: `Sends reaction "like" to Chat`,
  },
  "reactlovechat": {
    action: (arg, ans) => {
      Hue.send_reaction("love", "chat")
    },
    description: `Sends reaction "love" to Chat`,
  },
  "reacthappychat": {
    action: (arg, ans) => {
      Hue.send_reaction("happy", "chat")
    },
    description: `Sends reaction "happy" to Chat`,
  },
  "reactmehchat": {
    action: (arg, ans) => {
      Hue.send_reaction("meh", "chat")
    },
    description: `Sends reaction "meh" to Chat`,
  },
  "reactsadchat": {
    action: (arg, ans) => {
      Hue.send_reaction("sad", "chat")
    },
    description: `Sends reaction "sad" to Chat`,
  },
  "reactdislikechat": {
    action: (arg, ans) => {
      Hue.send_reaction("dislike", "chat")
    },
    description: `Sends reaction "dislike" to Chat`,
  },
  "reactlikeimage": {
    action: (arg, ans) => {
      Hue.send_reaction("like", "image")
    },
    description: `Sends reaction "like" to Image`,
  },
  "reactloveimage": {
    action: (arg, ans) => {
      Hue.send_reaction("love", "image")
    },
    description: `Sends reaction "love" to Image`,
  },
  "reacthappyimage": {
    action: (arg, ans) => {
      Hue.send_reaction("happy", "image")
    },
    description: `Sends reaction "happy" to Image`,
  },
  "reactmehimage": {
    action: (arg, ans) => {
      Hue.send_reaction("meh", "image")
    },
    description: `Sends reaction "meh" to Image`,
  },
  "reactsadimage": {
    action: (arg, ans) => {
      Hue.send_reaction("sad", "image")
    },
    description: `Sends reaction "sad" to Image`,
  },
  "reactdislikeimage": {
    action: (arg, ans) => {
      Hue.send_reaction("dislike", "image")
    },
    description: `Sends reaction "dislike" to Image`,
  },
  "reactliketv": {
    action: (arg, ans) => {
      Hue.send_reaction("like", "tv")
    },
    description: `Sends reaction "like" to TV`,
  },
  "reactlovetv": {
    action: (arg, ans) => {
      Hue.send_reaction("love", "tv")
    },
    description: `Sends reaction "love" to TV`,
  },
  "reacthappytv": {
    action: (arg, ans) => {
      Hue.send_reaction("happy", "tv")
    },
    description: `Sends reaction "happy" to TV`,
  },
  "reactmehtv": {
    action: (arg, ans) => {
      Hue.send_reaction("meh", "tv")
    },
    description: `Sends reaction "meh" to TV`,
  },
  "reactsadtv": {
    action: (arg, ans) => {
      Hue.send_reaction("sad", "tv")
    },
    description: `Sends reaction "sad" to TV`,
  },
  "reactdisliketv": {
    action: (arg, ans) => {
      Hue.send_reaction("dislike", "tv")
    },
    description: `Sends reaction "dislike" to TV`,
  },
  "reactchat": {
    action: (arg, ans) => {
      Hue.show_reaction_picker("chat")
    },
    description: `Opens reaction picker for Chat`,
  },
  "reactimage": {
    action: (arg, ans) => {
      Hue.show_reaction_picker("image")
    },
    description: `Opens reaction picker for Image`,
  },
  "reacttv": {
    action: (arg, ans) => {
      Hue.show_reaction_picker("tv")
    },
    description: `Opens reaction picker for TV`,
  },
  "f1": {
    action: (arg, ans) => {
      Hue.run_user_function(1)
      ans.to_history = false
    },
    description: `Runs User Function 1`,
  },
  "f2": {
    action: (arg, ans) => {
      Hue.run_user_function(2)
      ans.to_history = false
    },
    description: `Runs User Function 2`,
  },
  "f3": {
    action: (arg, ans) => {
      Hue.run_user_function(3)
      ans.to_history = false
    },
    description: `Runs User Function 3`,
  },
  "f4": {
    action: (arg, ans) => {
      Hue.run_user_function(4)
      ans.to_history = false
    },
    description: `Runs User Function 4`,
  },
  "f5": {
    action: (arg, ans) => {
      Hue.run_user_function(5)
      ans.to_history = false
    },
    description: `Runs User Function 5`,
  },
  "f6": {
    action: (arg, ans) => {
      Hue.run_user_function(6)
      ans.to_history = false
    },
    description: `Runs User Function 6`,
  },
  "lockscreen": {
    action: (arg, ans) => {
      Hue.lock_screen()
    },
    description: `Locks the screen`,
  },
  "unlockscreen": {
    action: (arg, ans) => {
      Hue.unlock_screen()
    },
    description: `Unlocks the screen`,
  },
  "togglelockscreen": {
    action: (arg, ans) => {
      if (Hue.screen_locked) {
        Hue.unlock_screen()
      } else {
        Hue.lock_screen()
      }
    },
    description: `Locks or unlocks the screen`,
  },
  "drawimage": {
    action: (arg, ans) => {
      Hue.open_draw_image()
    },
    description: `Opens the window to draw an image`,
  },
  "say": {
    action: (arg, ans) => {
      Hue.say_command(arg, ans)
    },
    description: `Sends a normal chat message. Useful if you want to make a chain of commands that starts with a message`,
  },
  "input": {
    action: (arg, ans) => {
      Hue.input_command(arg)
      ans.to_history = false
      ans.clr_input = false
    },
    description: `Adds text to the input`,
  },
  "top": {
    action: (arg, ans) => {
      Hue.goto_top(true)
    },
    description: `Scrolls the chat to the top`,
  },
  "top2": {
    action: (arg, ans) => {
      Hue.goto_top(false)
    },
    description: `Scrolls the chat to the top`,
  },
  "bottom": {
    action: (arg, ans) => {
      Hue.goto_bottom(true, true)
    },
    description: `Scrolls the chat to the bottom`,
  },
  "bottom2": {
    action: (arg, ans) => {
      Hue.goto_bottom(true, false)
    },
    description: `Scrolls the chat to the bottom without animating the scroll`,
  },
  "background": {
    action: (arg, ans) => {
      Hue.change_background_image_source(arg)
    },
    description: `Changes the background image to a specified URL`,
  },
  "whatis": {
    action: (arg, ans) => {
      Hue.inspect_command(arg)
    },
    description: `This can be used to inspect commands. If the command is an alias it will show what it is an alias of`,
  },
  "reload": {
    action: (arg, ans) => {
      Hue.reload_client()
    },
    description: `Loads everything again`,
  },
  "refresh": {
    action: (arg, ans) => {
      Hue.refresh_client()
    },
    description: `Re-connects to the server without leaving`,
  },
  "modifysetting": {
    action: (arg, ans) => {
      Hue.modify_setting(arg)
    },
    description: `This can be used to change user settings directly. This requires the internal name of the setting and the value`,
  },
  "modifysetting2": {
    action: (arg, ans) => {
      Hue.modify_setting(arg, false)
    },
    description: `Same as ${Hue.config.commands_prefix}modifysetting but it doesn't show feedback on completion`,
  },
  "feedback": {
    action: (arg, ans) => {
      Hue.feedback(arg)
    },
    description: `Displays a simple feedback information message for the user`,
  },
  "imagemode": {
    action: (arg, ans) => {
      Hue.change_room_image_mode(arg)
    },
    description: `Changes the image mode. Valid modes include enabled, disabled, and locked`,
  },
  "tvmode": {
    action: (arg, ans) => {
      Hue.change_room_tv_mode(arg)
    },
    description: `Changes the tv mode. Valid modes include enabled, disabled, and locked`,
  },
  "theme": {
    action: (arg, ans) => {
      Hue.change_theme(arg)
    },
    description: `Changes the theme to a specified hex color`,
  },
  "thememode": {
    action: (arg, ans) => {
      Hue.change_theme_mode(arg)
    },
    description: `Changes the theme mode. Valid modes include automatic and custom`,
  },
  "textcolormode": {
    action: (arg, ans) => {
      Hue.change_text_color_mode(arg)
    },
    description: `Changes the text color mode. Valid modes include automatic, and custom`,
  },
  "textcolor": {
    action: (arg, ans) => {
      Hue.change_text_color(arg)
    },
    description: `Changes the text color to a specified hex color`,
  },
  "backgroundmode": {
    action: (arg, ans) => {
      Hue.change_background_mode(arg)
    },
    description: `Changes the background mode. Valid modes include normal, tiled, mirror, mirror_tiled, and solid`,
  },
  "backgroundeffect": {
    action: (arg, ans) => {
      Hue.change_background_effect(arg)
    },
    description: `Changes the background effect mode. Valid modes include none and blur`,
  },
  "tiledimensions": {
    action: (arg, ans) => {
      Hue.change_background_tile_dimensions(arg)
    },
    description: `Changes the dimension for tiled backgrounds`,
  },
  "adminactivity": {
    action: (arg, ans) => {
      if (arg) {
        Hue.request_admin_activity(arg)
      } else {
        Hue.request_admin_activity()
      }
    },
    description: `Shows recent activity by ops and admins. Accepts a filter as an argument`,
  },
  "accesslog": {
    action: (arg, ans) => {
      if (arg) {
        Hue.request_access_log(arg)
      } else {
        Hue.request_access_log()
      }
    },
    description: `Shows the Access Log`,
  },
  "adminlist": {
    action: (arg, ans) => {
      Hue.request_admin_list()
    },
    description: `Shows the list of ops and admins of the room`,
  },
  "banlist": {
    action: (arg, ans) => {
      Hue.request_ban_list()
    },
    description: `Displays a list of banned users`,
  },
  "unmaximize": {
    action: (arg, ans) => {
      Hue.unmaximize_media()
    },
    description: `Un-maximizes media`,
  },
  "maximizechat": {
    action: (arg, ans) => {
      Hue.toggle_media_area()
    },
    description: `Maximize/Restore the chat`,
  },
  "autoscrollup": {
    action: (arg, ans) => {
      Hue.autoscroll_up()
    },
    description: `Slowly scrolls chat up automatically`,
  },
  "autoscrolldown": {
    action: (arg, ans) => {
      Hue.autoscroll_down()
    },
    description: `Slowly scrolls chat down automatically`,
  },
  "loadnextimage": {
    action: (arg, ans) => {
      Hue.media_load_next("image")
    },
    description: `Loads the next image`,
  },
  "loadprevimage": {
    action: (arg, ans) => {
      Hue.media_load_previous("image")
    },
    description: `Loads the previous image`,
  },
  "loadnexttv": {
    action: (arg, ans) => {
      Hue.media_load_next("tv")
    },
    description: `Loads the next tv item`,
  },
  "loadprevtv": {
    action: (arg, ans) => {
      Hue.media_load_previous("tv")
    },
    description: `Loads the previous tv item`,
  },
  "bio": {
    action: (arg, ans) => {
      if (arg) {
        Hue.change_bio(arg)
      }
    },
    description: `Changes the user's bio`,
  },
  "badgeheart": {
    action: (arg, ans) => {
      if (arg) {
        Hue.send_badge(arg, "heart")
      }
    },
    description: `Sends a heart badge to a user`,
  },
  "badgeskull": {
    action: (arg, ans) => {
      if (arg) {
        Hue.send_badge(arg, "skull")
      }
    },
    description: `Sends a skull badge to a user`,
  },
  "notifications": {
    action: (arg, ans) => {
      Hue.show_notifications(arg)
    },
    description: `Opens the notifications window. Accepts a filter as an argument`,
  },
  "whispers": {
    action: (arg, ans) => {
      Hue.show_whispers(arg)
    },
    description: `Opens the whispers window. Accepts a filter as an argument`,
  },
  "synctv": {
    action: (arg, ans) => {
      if (arg) {
        Hue.sync_tv(arg)
      }
    },
    description: `Syncs a TV video with another user's video progress`,
  },
  "mediainfo": {
    action: (arg, ans) => {
      Hue.change_media_info(arg)
    },
    description: `Changes the media info mode. Either enabled or disabled`,
  },
  "links": {
    action: (arg, ans) => {
      Hue.show_links()
    },
    description: `Custom chat search to show links`,
  },
  "messageboard": {
    action: (arg, ans) => {
      Hue.show_message_board(arg)
    },
    description: `Opens the message board. Accepts a filter as an argument`,
  },
  "clearmessageboard": {
    action: (arg, ans) => {
      Hue.clear_message_board()
    },
    description: `Deletes all message board posts`,
  },
  "chatsize": {
    action: (arg, ans) => {
      Hue.do_chat_size_change(arg)
    },
    description: `Change the percentage of the Chat area`,
  },
  "tvsize": {
    action: (arg, ans) => {
      Hue.do_media_tv_size_change(arg)
    },
    description: `Change the percentage of the TV area`,
  },
  "swap": {
    action: (arg, ans) => {
      Hue.swap_display_positions()
    },
    description: `Shortcut to change media positions`,
  },
  "rotate": {
    action: (arg, ans) => {
      Hue.swap_media_layout()
    },
    description: `Shortcut to change media layout`,
  },
  "ignore": {
    action: (arg, ans) => {
      if (arg) {
        Hue.ignore_user(arg)
      }
    },
    description: `Adds a user to the ignored list`,
  },
  "unignore": {
    action: (arg, ans) => {
      if (arg) {
        Hue.unignore_user(arg)
      }
    },
    description: `Removes a user from the ignored list`,
  },
  "ignored": {
    action: (arg, ans) => {
      Hue.show_ignored()
    },
    description: `Shows the ignored list`,
  },
}

// Setups commands based on the commands object
// Makes sorted variations
// Checks if anagrams collide
Hue.setup_commands = function () {
  Hue.superuser_commands = [
    "systembroadcast",
    "systemrestart",
    "modusername",
    "annex"
  ]

  Hue.critical_commands = [
    "js",
    "js2",
    "changeusername",
    "changepassword",
    "changeemail",
    "logout"
  ]

  Hue.critical_commands.push(...Hue.superuser_commands)

  Hue.commands_list = []
  Hue.commands_list_with_prefix = []

  for (let key in Hue.commands) {
    if (Hue.superuser_commands.includes(key)) {
      if (!Hue.superuser) {
        continue
      }
    }

    Hue.commands_list.push(key)
    Hue.commands_list_with_prefix.push(Hue.config.commands_prefix + key)
  }

  Hue.commands_list.sort()

  for (let command of Hue.commands_list) {
    let sorted = command.split("").sort().join("")
    Hue.commands_list_sorted[command] = sorted
    Hue.commands_list_sorted_2[sorted] = command
  }

  for (let key in Hue.commands_list_sorted) {
    let scmd1 = Hue.commands_list_sorted[key]

    for (let key2 in Hue.commands_list_sorted) {
      let scmd2 = Hue.commands_list_sorted[key2]

      if (key !== key2) {
        if (scmd1 === scmd2) {
          console.error(`Command anagrams detected. ${key} and ${key2}`)
        }
      }
    }
  }
}

// Checks whether some string is a command
Hue.is_command = function (message) {
  if (
    message.length >= 2 &&
    message[0] === Hue.config.commands_prefix &&
    message[1] !== Hue.config.commands_prefix &&
    message[1] !== " " &&
    !message.startsWith(`${Hue.config.commands_prefix}me `) &&
    !message.startsWith(`${Hue.config.commands_prefix}em `)
  ) {
    return true
  }

  return false
}

// Responsible of executing a command
// It will check the commands object to see if a command matches
// Executes the declared action
Hue.execute_command = function (message, ans) {
  let split = message.split(" ")
  let cmd = split[0].toLowerCase()
  let arg = split.slice(1).join(" ")
  let needs_confirm = false

  if (cmd.startsWith(Hue.config.commands_prefix)) {
    cmd = cmd.substring(1)
  }

  if (Hue.superuser_commands.includes(cmd)) {
    if (!Hue.superuser) {
      Hue.feedback("You don't have permission to run that command")
      return ans
    } else {
      needs_confirm = true
    }
  }

  if (cmd.endsWith("?")) {
    cmd = cmd.slice(0, -1)
    needs_confirm = true
  }

  if (cmd.length < 2) {
    Hue.feedback("Invalid empty command")
    return ans
  }

  let cmd_sorted = cmd.split("").sort().join("")
  let command = Hue.commands_list_sorted_2[cmd_sorted]

  if (!command) {
    let closest_command = Hue.get_closest_command(cmd)

    if (closest_command) {
      command = closest_command
    } else {
      Hue.feedback(`Invalid command "${cmd}"`)
      return ans
    }
  }

  if (needs_confirm) {
    if (confirm(`Are you sure you want to execute ${command}?`)) {
      Hue.commands[command].action(arg, ans)
    } else {
      return ans
    }
  } else {
    Hue.commands[command].action(arg, ans)
  }

  return ans
}

// Executes commands from a setting
Hue.execute_commands = function (setting) {
  if (Hue.get_setting(setting)) {
    let cmds = Hue.get_setting(setting).split("\n")

    for (let cmd of cmds) {
      Hue.process_message({
        message: cmd,
        to_history: false,
        clr_input: false,
      })
    }
  }
}

// Starts the execution of a chain of commands
// Used with chained commands like '/a && /b && /c'
Hue.run_commands_queue = function (id) {
  let cmds = Hue.commands_queue[id]

  if (!cmds || cmds.length === 0) {
    delete Hue.commands_queue[id]
    return false
  }

  let cmd = cmds.shift()
  let lc_cmd = cmd.toLowerCase()

  let obj = {
    message: cmd,
    to_history: false,
    clr_input: false,
    callback: function () {
      Hue.run_commands_queue(id)
    },
  }

  if (lc_cmd.startsWith(`${Hue.config.commands_prefix}sleep`) || 
  lc_cmd === `${Hue.config.commands_prefix}sleep`) {
    let n = parseInt(lc_cmd.replace(`${Hue.config.commands_prefix}sleep `, ""))

    if (isNaN(n)) {
      n = 1000
    }

    setTimeout(function () {
      Hue.run_commands_queue(id)
    }, n)
  } else if (lc_cmd === `${Hue.config.commands_prefix}closeandwait`) {
    Hue.close_all_modals(function () {
      Hue.run_commands_queue(id)
    })
  } else if (lc_cmd === `${Hue.config.commands_prefix}inputenter`) {
    let val = $("#input").val()

    if (val.length > 0) {
      obj.message = val
      obj.clr_input = true
      Hue.process_message(obj)
    } else {
      Hue.run_commands_queue(id)
    }
  } else {
    Hue.process_message(obj)
  }
}

// Gives feedback on what type of command a command is
Hue.inspect_command = function (cmd) {
  if (!cmd.startsWith(Hue.config.commands_prefix)) {
    cmd = `${Hue.config.commands_prefix}${cmd}`
  }

  let s = cmd

  if (Hue.command_aliases[cmd] !== undefined) {
    s += ` is an alias to: "${Hue.command_aliases[cmd]}"`
  } else if (Hue.commands_list.includes(cmd)) {
    s += `: ${Hue.commands[cmd].description}`
  } else {
    s += ` is not a valid command`
  }

  Hue.feedback(s)
}

// Executes a remote command received through a whisper
// This only gets executed if the sender is whitelisted,
// for remote command execution
Hue.execute_whisper_command = function (data) {
  if (Hue.includes_critical_command(data.username, data.message)) {
    return false
  }

  Hue.feedback(`${data.username} executed "${data.message}" in your client`)

  Hue.process_message({
    message: data.message,
    to_history: false,
    clr_input: false,
  })
}

// Show the Commands window
Hue.show_commands = function (filter = "") {
  let commands = Hue.template_commands()
  let s = ""

  for (let key in Hue.commands) {
    let setting = Hue.commands[key]
    s += `<div class='info_item modal_item'>${Hue.config.commands_prefix}${key}: ${setting.description}</div>`
  }

  Hue.msg_info2.show(["Commands", commands])
  $("#commands_container").html(s)

  if (filter) {
    $("#commands_filter").val(filter)
    Hue.do_modal_filter()
  }
}

// Creates the command aliases object
// Used in autocomplete and command execution
// Command aliases are custom commands based on normal commands
Hue.setup_command_aliases = function () {
  let aliases = Hue.get_setting("aliases").split("\n")

  Hue.command_aliases = {}

  for (let alias of aliases) {
    let pieces = alias.split("=")

    if (pieces.length < 2) {
      continue
    }

    let name = pieces[0].trim()

    if (name.length < 2) {
      continue
    }

    if (name[0] === Hue.config.commands_prefix && 
    name[1] !== Hue.config.commands_prefix) {
      let body = pieces.slice(1).join("=").trim()
      Hue.command_aliases[name] = body
    }
  }
}

// Formats command alias to proper format upon save
Hue.format_command_aliases = function (cmds) {
  let aliases = cmds.split("\n")
  let s = ""

  for (let alias of aliases) {
    let pieces = alias.split("=")

    if (pieces.length < 2) {
      continue
    }

    let name = `${Hue.config.commands_prefix}${Hue.utilz.clean_string5(pieces[0]).replace(/\//g, "")}`

    if (name[0] !== Hue.config.commands_prefix) {
      name = `${Hue.config.commands_prefix}name`
    }

    let body = pieces.slice(1).join("=").trim()

    s += `${name} = ${body}\n`
  }

  return s.slice(0, -1)
}

// Checks if a remote command includes a forbidden critical command
Hue.includes_critical_command = function (username, message, announce = true) {
  let split = message.split(" ")

  for (let cmd of split) {
    let cmd2

    if (Hue.is_command(cmd)) {
      cmd2 = cmd.toLowerCase().split("").sort().join("").substring(1)
    } else {
      continue
    }

    for (let command of Hue.critical_commands) {
      if (Hue.command_sorted_equals(cmd2, command)) {
        if (announce) {
          Hue.feedback(
            `${username} attempted to run "${command}" in your client`
          )
        }

        return true
      }
    }
  }

  return false
}

// Gets the list of users from whom the user accepts remote command execution
// This allows a user to whitelist other users so they can execute commands for them through whispers
// This is dangerous and care should be taken to ensure this list is not exploited
Hue.get_accept_commands_from_list = function () {
  let list = Hue.get_setting("accept_commands_from").split("\n")

  if (list.length === 1 && !list[0]) {
    list = []
  }

  Hue.accept_commands_from_list = list
}

// Checks if a string, in any alphabetical order, matches a command
Hue.command_sorted_equals = function (str, what) {
  return str === Hue.commands_list_sorted[what]
}

// Gets the most similar command from a string
Hue.get_closest_command = function (cmd) {
  let highest_num = 0
  let highest_command = false

  for (let command of Hue.commands_list) {
    let similarity = Hue.utilz.string_similarity(command, cmd)

    if (similarity >= 0.8 && similarity > highest_num) {
      highest_num = similarity
      highest_command = command
    }
  }

  if (Hue.critical_commands.includes(highest_command)) {
    highest_command = false
  }

  return highest_command
}

// Process user's input messages
// Checks if it is a command and executes it
// Or sends a chat message to the server
Hue.process_message = function (args = {}) {
  let def_args = {
    message: "",
    to_history: true,
    clr_input: true,
    callback: false,
    edit_id: false,
    handle_url: true
  }

  args = Object.assign(def_args, args)

  let message_split = args.message.split("\n")
  let num_lines = message_split.length

  args.message = Hue.utilz.remove_multiple_empty_lines(args.message)
  args.message = Hue.utilz.untab_string(args.message).trimEnd()

  if (num_lines === 1 && Hue.is_command(args.message) && !args.edit_id) {
    let and_split = args.message.split(" && ")
    let lc_message = args.message.toLowerCase()
    let more_stuff

    if (lc_message.startsWith(`${Hue.config.commands_prefix}js `) || lc_message.startsWith(`${Hue.config.commands_prefix}js2 `)) {
      more_stuff = lc_message.includes(`${Hue.config.commands_prefix}endjs`)
    } else if (lc_message.startsWith(`${Hue.config.commands_prefix}input `)) {
      more_stuff = args.message.includes(`${Hue.config.commands_prefix}endinput`)
    } else if (
      lc_message.startsWith(`${Hue.config.commands_prefix}whisper `) ||
      lc_message.startsWith(`${Hue.config.commands_prefix}whisper2 `)
    ) {
      more_stuff = args.message.includes(`${Hue.config.commands_prefix}endwhisper`)
    } else {
      more_stuff = true
    }

    if (and_split.length > 1 && more_stuff) {
      if (args.to_history) {
        Hue.add_to_input_history(args.message)
      }

      Hue.clear_input()

      let ssplit = args.message.split(" ")
      let cmds = []
      let cmd = ""
      let cmd_mode = "normal"

      for (let p = 0; p < ssplit.length; p++) {
        let sp = ssplit[p]
        let lc_sp = sp.toLowerCase()

        if (cmd_mode === "js") {
          if (lc_sp === `${Hue.config.commands_prefix}endjs`) {
            cmds.push(cmd)
            cmd = ""
            cmd_mode = "normal"
          } else {
            cmd += ` ${sp}`
          }
        } else if (cmd_mode === "input") {
          if (lc_sp === `${Hue.config.commands_prefix}endinput`) {
            cmds.push(cmd)
            cmd = ""
            cmd_mode = "normal"
          } else {
            cmd += ` ${sp}`
          }
        } else if (cmd_mode === "whisper") {
          if (lc_sp === `${Hue.config.commands_prefix}endwhisper`) {
            cmds.push(cmd)
            cmd = ""
            cmd_mode = "normal"
          } else {
            cmd += ` ${sp}`
          }
        } else {
          if (Hue.command_aliases[sp] !== undefined) {
            ssplit.splice(p, 1, ...Hue.command_aliases[sp].split(" "))
            p -= 1
            continue
          }

          if (cmd === "") {
            if (sp !== "&&") {
              cmd = sp

              if (lc_sp === `${Hue.config.commands_prefix}js` || lc_sp === `${Hue.config.commands_prefix}js2`) {
                cmd_mode = "js"
              } else if (lc_sp === `${Hue.config.commands_prefix}input`) {
                cmd_mode = "input"
              } else if (lc_sp === `${Hue.config.commands_prefix}whisper` || lc_sp === `${Hue.config.commands_prefix}whisper2`) {
                cmd_mode = "whisper"
              }
            }
          } else {
            if (sp === "&&") {
              cmds.push(cmd)
              cmd = ""
            } else {
              cmd += ` ${sp}`
            }
          }
        }
      }

      if (cmd) {
        cmds.push(cmd)
      }

      let qcmax = 0
      let cqid

      while (true) {
        cqid = Hue.utilz.get_random_string(5) + Date.now()

        if (Hue.commands_queue[cqid] === undefined) {
          break
        }

        qcmax += 1

        if (qcmax >= 100) {
          if (args.callback) {
            return args.callback(false)
          } else {
            return false
          }
        }
      }

      Hue.commands_queue[cqid] = cmds
      Hue.run_commands_queue(cqid)

      if (args.callback) {
        return args.callback(true)
      } else {
        return true
      }
    }

    let msplit = args.message.split(" ")
    let alias_cmd = msplit[0].trim()
    let alias_cmd_2, needs_confirm

    if (alias_cmd.endsWith("?")) {
      alias_cmd_2 = alias_cmd.slice(0, -1)
      needs_confirm = true
    } else {
      alias_cmd_2 = alias_cmd
      needs_confirm = false
    }

    let alias = Hue.command_aliases[alias_cmd_2]

    if (alias !== undefined) {
      let alias_arg = msplit.slice(1).join(" ").trim()
      let full_alias = `${alias} ${alias_arg}`.trim()

      if (alias_cmd_2.startsWith(`${Hue.config.commands_prefix}X`)) {
        args.to_history = false
      }

      if (args.to_history) {
        Hue.add_to_input_history(args.message)
      }

      if (needs_confirm) {
        if (confirm(`Are you sure you want to execute ${alias_cmd_2}?`)) {
          Hue.process_message({
            message: full_alias,
            to_history: false,
            clr_input: args.clr_input,
          })
        } else {
          if (args.callback) {
            return args.callback(false)
          } else {
            return false
          }
        }
      } else {
        Hue.process_message({
          message: full_alias,
          to_history: false,
          clr_input: args.clr_input,
        })
      }
    } else {
      let ans = Hue.execute_command(args.message, {
        to_history: args.to_history,
        clr_input: args.clr_input,
      })

      args.to_history = ans.to_history
      args.clr_input = ans.clr_input
    }
  } else {
    if (Hue.can_chat) {
      if (args.message.length === 0) {
        Hue.clear_input()

        if (args.callback) {
          return args.callback(false)
        } else {
          return false
        }
      }

      if (num_lines > Hue.config.max_num_newlines) {
        if (args.callback) {
          return args.callback(false)
        } else {
          return false
        }
      }

      if (args.message.length > Hue.config.max_input_length) {
        args.message = args.message.substring(0, Hue.config.max_input_length)
      }

      if (Hue.get_setting("confirm_chat")) {
        if (!confirm("Are you sure you want to send a chat message here?")) {
          return
        }
      }

      Hue.socket_emit("sendchat", {
        message: args.message,
        edit_id: args.edit_id,
      })
    } else {
      Hue.cant_chat()
    }
  }

  if (args.to_history) {
    Hue.add_to_input_history(args.message)
  }

  if (args.clr_input) {
    Hue.clear_input()
  }

  if (args.callback) {
    return args.callback(true)
  } else {
    return true
  }
}
// Sets events for all context menus
Hue.context_menu_events = {
  show: function () {
    Hue.context_menu_on_show()
  },
  hide: function () {
    Hue.context_menu_on_hide()
  },
}

// What happens after opening a context menu
Hue.context_menu_on_show = function () {
  Hue.context_menu_open = true
}

// What happens after hiding a context menu
Hue.context_menu_on_hide = function () {
  Hue.context_menu_open = false
}

// Starts the context menu for chat items
// This is triggered by a normal click
Hue.start_chat_menu_context_menu = function () {
  $.contextMenu({
    selector: ".chat_menu_button_menu",
    trigger: "left",
    animation: { duration: 250, hide: "fadeOut" },
    zIndex: 9000000000,
    events: Hue.context_menu_events,
    events: {
      show: function (options) {
        Hue.context_menu_on_show()
        $(this)
          .closest(".chat_menu_button_main")
          .addClass("chat_menu_button_main_selected")
      },
      hide: function (options) {
        Hue.context_menu_on_hide()
        $(this)
          .closest(".chat_menu_button_main")
          .removeClass("chat_menu_button_main_selected")
      },
    },
    items: {
      item0: {
        name: "Jump",
        callback: function (key, opt) {
          let message_id = $(this).closest(".message").data("message_id")
          Hue.jump_to_chat_message(message_id)
        },
        visible: function (key, opt) {
          return $(this).closest("#chat_area").length === 0
        },
      },
      item1: {
        name: "Reply",
        callback: function (key, opt) {
          let el = $(this)
            .closest(".chat_content_container")
            .eq(0)
            .find(".chat_content")
            .get(0)
          Hue.start_reply(el)
        },
        visible: function (key, opt) {
          let message = $(this).closest(".message")

          if (message.data("mode") === "chat") {
            return true
          }

          return false
        },
      },
      item2: {
        name: "Edit",
        callback: function (key, opt) {
          let el = $(this).closest(".chat_content_container").get(0)
          Hue.edit_message(el)
        },
        visible: function (key, opt) {
          let message = $(this).closest(".message")

          if (message.data("mode") === "chat") {
            if ($(this).closest(".message").data("user_id") === Hue.user_id) {
              return true
            }
          }

          return false
        },
      },
      item4: {
        name: "Change Image",
        callback: function (key, opt) {},
        visible: function (key, opt) {
          let url = $(this).closest(".chat_content_container").data("first_url")

          if (url) {
            let ok = Hue.change_image_source(url, true)

            if (ok) {
              return true
            }
          }

          return false
        },
        items: {
          opsure: {
            name: "I'm Sure",
            callback: function (key, opt) {
              let first_url = $(this)
                .closest(".chat_content_container")
                .data("first_url")
              Hue.change_image_source(first_url)
            },
          },
        },
      },
      item5: {
        name: "Change TV",
        callback: function (key, opt) {},
        visible: function (key, opt) {
          let url = $(this).closest(".chat_content_container").data("first_url")

          if (url) {
            let ok = Hue.change_tv_source(url, true)

            if (ok) {
              return true
            }
          }

          return false
        },
        items: {
          opsure: {
            name: "I'm Sure",
            callback: function (key, opt) {
              let first_url = $(this)
                .closest(".chat_content_container")
                .data("first_url")
              Hue.change_tv_source(first_url)
            },
          },
        },
      },
      item7: {
        name: "Hide",
        callback: function (key, opt) {},
        items: {
          opsure: {
            name: "I'm Sure",
            callback: function (key, opt) {
              Hue.remove_message_from_context_menu(this)
            },
          },
        },
      },
      itemdel: {
        name: "Delete",
        callback: function (key, opt) {},
        visible: function (key, opt) {
          if (!Hue.log_enabled) {
            return false
          }

          let message = $(this).closest(".message")
          let mode = message.data("mode")

          if (mode === "chat") {
            let user_id = $(this).closest(".message").data("user_id")

            if (user_id) {
              let user = Hue.get_user_by_user_id(user_id)

              if (user) {
                if (!Hue.user_is_controllable(user)) {
                  return false
                }
              }
            }

            if ((user_id && user_id === Hue.user_id) || Hue.is_admin_or_op()) {
              return true
            }
          } else if (mode === "announcement") {
            let id = message.data("id")

            if (id) {
              let user_id = message.data("user_id")

              if (user_id) {
                let user = Hue.get_user_by_user_id(user_id)

                if (user) {
                  if (!Hue.user_is_controllable(user)) {
                    return false
                  }
                }
              }

              if (
                (user_id && user_id === Hue.user_id) ||
                Hue.is_admin_or_op()
              ) {
                return true
              }
            }
          }

          return false
        },
        items: {
          opsure: {
            name: "I'm Sure",
            callback: function (key, opt) {
              let id = false
              let message = $(this).closest(".message")
              let mode = message.data("mode")

              if (mode === "chat") {
                id = $(this).closest(".chat_content_container").eq(0).data("id")
              } else if (mode === "announcement") {
                id = message.data("id")
              }

              if (id) {
                Hue.delete_message(id, true)
              }
            },
          },
        },
      },
      item8: {
        name: "Clear Log",
        callback: function (key, opt) {},
        items: {
          above: {
            name: "Above This Point",
            callback: function (key, opt) {},
            items: {
              opsure: {
                name: "I'm Sure",
                callback: function (key, opt) {
                  let id
                  let message = $(this).closest(".message")
                  let mode = message.data("mode")

                  if (mode === "chat") {
                    id = $(this).closest(".chat_content_container").data("id")
                  } else if (mode === "announcement") {
                    id = message.data("id")
                  }

                  Hue.clear_log("above", id)
                },
              },
            },
          },
          below: {
            name: "Below This Point",
            callback: function (key, opt) {},
            items: {
              opsure: {
                name: "I'm Sure",
                callback: function (key, opt) {
                  let id
                  let message = $(this).closest(".message")
                  let mode = message.data("mode")

                  if (mode === "chat") {
                    id = $(this).closest(".chat_content_container").data("id")
                  } else if (mode === "announcement") {
                    id = message.data("id")
                  }

                  Hue.clear_log("below", id)
                },
              },
            },
          },
        },
        visible: function (key, opt) {
          if (!Hue.check_op_permission(Hue.role, "log")) {
            return false
          }

          if (!Hue.log_enabled) {
            return false
          }

          let message = $(this).closest(".message")
          let mode = message.data("mode")

          if (mode === "chat") {
            if ($(this).closest(".chat_content_container").data("id")) {
              return true
            }
          } else if (mode === "announcement") {
            if (!message.data("in_log")) {
              return false
            }

            if (message.data("id")) {
              return true
            }
          }

          return false
        },
      },
    },
  })
}

// Generate the items for the chat maxer context menu
Hue.generate_chat_maxer_context_items = function () {
  let items = {}
  let max = Hue.num_media_elements_visible() === 0
  let per = Hue.room_state.chat_display_percentage

  for (let i = 9; i >= 1; i--) {
    let n = i * 10
    let class_name = ""

    if (max) {
      if (n === 100) {
        class_name = "bold bigger"
      }
    } else {
      if (per === n) {
        class_name = "bold bigger"
      }
    }

    items[`per${n}`] = {
      name: `Chat ${n}%`,
      callback: function (key, opt) {
        Hue.do_chat_size_change(n)
      },
      className: class_name,
    }
  }

  let obj = Object.assign(
    items, {
      def: {
        name: "Default",
        callback: function (key, opt) {
          Hue.set_default_chat_size()
        }
      }
    }
  )

  return obj
}

// Starts the chat maxer context menu
Hue.start_chat_maxer_context_menu = function () {
  $.contextMenu({
    selector: "#chat_maxer",
    animation: { duration: 250, hide: "fadeOut" },
    zIndex: 9000000000,
    events: Hue.context_menu_events,
    className: "maxer_context",
    trigger: "left",
    build: function () {
      return {
        items: Hue.generate_chat_maxer_context_items(),
      }
    },
  })
}

// Generates the items for the tv maxer context menu
Hue.generate_media_maxer_context_items = function () {
  let items = {}
  let pos = Hue.room_state.tv_display_position
  let nums = []

  for (let i = 1; i <= 9; i++) {
    nums.push(i * 10)
  }

  if (pos === "bottom") {
    nums = nums.reverse()
  }

  let per = Hue.room_state.tv_display_percentage

  for (let n of nums) {
    let class_name = ""

    if (!Hue.room_state.image_enabled && Hue.room_state.tv_enabled) {
      if (n === 100) {
        class_name = "bold bigger"
      }
    } else if (Hue.room_state.image_enabled && !Hue.room_state.tv_enabled) {
      if (n === 0) {
        class_name = "bold bigger"
      }
    } else {
      if (per === n) {
        class_name = "bold bigger"
      }
    }

    items[`per${n}`] = {
      name: `TV ${n}%`,
      callback: function (key, opt) {
        Hue.unmaximize_media()
        Hue.do_media_tv_size_change(n)
      },
      className: class_name,
    }
  }

  let obj = Object.assign(
    items, {
      def: {
        name: "Default",
        callback: function (key, opt) {
          Hue.unmaximize_media()
          Hue.set_default_tv_size()
        }
      }
    }
  )

  return obj
}

// Starts the tv maxer context menu
Hue.start_media_maxer_context_menu = function () {
  $.contextMenu({
    selector: "#media_maxer",
    animation: { duration: 250, hide: "fadeOut" },
    zIndex: 9000000000,
    events: Hue.context_menu_events,
    className: "maxer_context",
    trigger: "left",
    build: function () {
      return {
        items: Hue.generate_media_maxer_context_items(),
      }
    },
  })
}

// Starts the context menu on user elements
Hue.start_user_context_menu = function () {
  $.contextMenu({
    selector: "#show_profile_user",
    trigger: "left",
    animation: { duration: 250, hide: "fadeOut" },
    zIndex: 9000000000,
    events: Hue.context_menu_events,
    items: {
      cmvoice1: {
        name: "Voice 1",
        callback: function (key, opt) {
          let arg = this.data("username")
          Hue.change_role(arg, "voice_1")
        },
        visible: function (key, opt) {
          if (!Hue.check_op_permission(Hue.role, "voice_roles")) {
            return false
          } else {
            return true
          }
        },
        items: {
          opsure: {
            name: "I'm Sure",
            callback: function (key, opt) {
              let arg = this.data("username")
              Hue.change_role(arg, "voice_1")
            },
          },
        },
      },
      cmvoice2: {
        name: "Voice 2",
        callback: function (key, opt) {
          let arg = this.data("username")
          Hue.change_role(arg, "voice_2")
        },
        visible: function (key, opt) {
          if (!Hue.check_op_permission(Hue.role, "voice_roles")) {
            return false
          } else {
            return true
          }
        },
        items: {
          opsure: {
            name: "I'm Sure",
            callback: function (key, opt) {
              let arg = this.data("username")
              Hue.change_role(arg, "voice_2")
            },
          },
        },
      },
      cmvoice3: {
        name: "Voice 3",
        callback: function (key, opt) {
          let arg = this.data("username")
          Hue.change_role(arg, "voice_3")
        },
        visible: function (key, opt) {
          if (!Hue.check_op_permission(Hue.role, "voice_roles")) {
            return false
          } else {
            return true
          }
        },
        items: {
          opsure: {
            name: "I'm Sure",
            callback: function (key, opt) {
              let arg = this.data("username")
              Hue.change_role(arg, "voice_3")
            },
          },
        },
      },
      cmvoice4: {
        name: "Voice 4",
        callback: function (key, opt) {
          let arg = this.data("username")
          Hue.change_role(arg, "voice_4")
        },
        visible: function (key, opt) {
          if (!Hue.check_op_permission(Hue.role, "voice_roles")) {
            return false
          } else {
            return true
          }
        },
        items: {
          opsure: {
            name: "I'm Sure",
            callback: function (key, opt) {
              let arg = this.data("username")
              Hue.change_role(arg, "voice_4")
            },
          },
        },
      },
      cmop1: {
        name: "Op 1",
        visible: function (key, opt) {
          return Hue.role === "admin"
        },
        items: {
          opsure: {
            name: "I'm Sure",
            callback: function (key, opt) {
              let arg = this.data("username")
              Hue.change_role(arg, "op_1")
            },
          },
        },
      },
      cmop2: {
        name: "Op 2",
        visible: function (key, opt) {
          return Hue.role === "admin"
        },
        items: {
          opsure: {
            name: "I'm Sure",
            callback: function (key, opt) {
              let arg = this.data("username")
              Hue.change_role(arg, "op_2")
            },
          },
        },
      },
      cmop3: {
        name: "Op 3",
        visible: function (key, opt) {
          return Hue.role === "admin"
        },
        items: {
          opsure: {
            name: "I'm Sure",
            callback: function (key, opt) {
              let arg = this.data("username")
              Hue.change_role(arg, "op_3")
            },
          },
        },
      },
      cmop4: {
        name: "Op 4",
        visible: function (key, opt) {
          return Hue.role === "admin"
        },
        items: {
          opsure: {
            name: "I'm Sure",
            callback: function (key, opt) {
              let arg = this.data("username")
              Hue.change_role(arg, "op_4")
            },
          },
        },
      },
      cmadmin: {
        name: "Admin",
        visible: function (key, opt) {
          if (Hue.role !== "admin") {
            return false
          } else {
            return true
          }
        },
        items: {
          adminsure: {
            name: "I'm Sure",
            callback: function (key, opt) {
              let arg = this.data("username")
              Hue.change_role(arg, "admin")
            },
          },
        },
      },
      cmkick: {
        name: "Kick",
        visible: function (key, opt) {
          if (!Hue.check_op_permission(Hue.role, "kick")) {
            return false
          } else {
            let username = this.data("username")
            return Hue.user_is_online_by_username(username)
          }
        },
        items: {
          kicksure: {
            name: "I'm Sure",
            callback: function (key, opt) {
              let arg = this.data("username")
              Hue.kick(arg)
            },
          },
        },
      },
      cmban: {
        name: "Ban",
        visible: function (key, opt) {
          if (!Hue.check_op_permission(Hue.role, "ban")) {
            return false
          } else {
            return true
          }
        },
        items: {
          bansure: {
            name: "I'm Sure",
            callback: function (key, opt) {
              let arg = this.data("username")
              Hue.ban(arg)
            },
          },
        },
      },
    },
  })
}

// Starts the context menu for modal and popup windows's close buttons
Hue.start_msg_close_buttons_context_menu = function () {
  $.contextMenu({
    selector: ".Msg-window-inner-x",
    animation: { duration: 250, hide: "fadeOut" },
    zIndex: 9000000000,
    events: Hue.context_menu_events,
    items: {
      mm0: {
        name: "Close All",
        callback: function (key, opt) {
          Hue.process_msg_close_button(this)
        },
      },
    },
  })
}

// Generate the items for the chat search context menu
Hue.generate_chat_search_context_items = function () {
  let items = {}

  if (Hue.room_state.chat_searches.length === 0) {
    items.item0 = {
      name: "No searches yet",
      disabled: true,
    }
  } else {
    let n = 0

    for (let search of Hue.room_state.chat_searches) {
      items[`item_${n}`] = {
        name: search,
        callback: function (key, opt) {
          Hue.show_chat_search(search)
        },
      }

      n += 1
    }

    items["clear"] = {
      name: "- Clear Search History -",
      callback: function (key, opt) {
        Hue.clear_chat_searches()
      },
    }
  }

  return items
}

// Starts the chat search context menus
// One for the Search menu option
// One on the Search window which is triggered by a normal click
Hue.start_search_context_menus = function () {
  $.contextMenu({
    selector: "#chat_search_history_icon, #footer_search_history_icon",
    animation: { duration: 250, hide: "fadeOut" },
    zIndex: 9000000000,
    events: Hue.context_menu_events,
    trigger: "left",
    build: function ($trigger, e) {
      return { items: Hue.generate_chat_search_context_items() }
    },
  })
}

// Shows feedback with the current date in the nice date format
Hue.show_current_date = function () {
  Hue.feedback(Hue.utilz.nice_date())
}

// Gets a 'time ago' string from a given date
Hue.get_timeago = function (date) {
  return Hue.utilz.capitalize_words(timeago.format(date))
}

// Centralized function to create debouncers
Hue.create_debouncer = function (func, delay) {
  return (function () {
    let timer

    return function (...args) {
      clearTimeout(timer)

      timer = setTimeout(function () {
        func(...args)
      }, delay)
    }
  })()
}

// Creates all debouncers
// These are functions that get executed after not being called after a set delay
Hue.create_debouncers = function () {
  // Debounce timer for normal window filters
  Hue.do_modal_filter_timer = Hue.create_debouncer(function () {
    Hue.do_modal_filter()
  }, Hue.filter_delay)

  // Debounce timer for saving a localStorage object
  // This was done to avoid saving loops
  Hue.save_local_storage_timer = Hue.create_debouncer(function () {
    Hue.do_save_local_storage()
  }, Hue.local_storage_save_delay)

  // Debounce timer for double tap 1
  Hue.double_tap_timer = Hue.create_debouncer(function () {
    Hue.double_tap_key_pressed = 0
  }, Hue.double_tap_delay)

  // Debounce timer for double tap 2
  Hue.double_tap_2_timer = Hue.create_debouncer(function () {
    Hue.double_tap_key_2_pressed = 0
  }, Hue.double_tap_delay)

  // Debounce time for double tap 3
  Hue.double_tap_3_timer = Hue.create_debouncer(function () {
    Hue.double_tap_key_3_pressed = 0
  }, Hue.double_tap_delay)

  // Debounce timer for scroll events
  Hue.scroll_timer = Hue.create_debouncer(function () {
    Hue.check_scrollers()
  }, Hue.check_scrollers_delay)

  // Debounce window resize timer
  Hue.resize_timer = Hue.create_debouncer(function () {
    Hue.on_resize()
  }, Hue.resize_delay)

  // Debounce timer for chat search filter
  Hue.chat_search_timer = Hue.create_debouncer(function () {
    Hue.show_chat_search($("#chat_search_filter").val())
  }, Hue.filter_delay)

  // Debounce timer for input history filter
  Hue.input_history_filter_timer = Hue.create_debouncer(function () {
    Hue.show_input_history($("#input_history_filter").val())
  }, Hue.filter_delay)

  // Debounce typing timer to send a typing emit
  Hue.typing_timer = Hue.create_debouncer(function () {
    Hue.socket_emit("typing", {})
  }, Hue.typing_delay)

  // Debounce timer to hide the typing actions
  Hue.typing_remove_timer = Hue.create_debouncer(function () {
    Hue.hide_typing()
  }, Hue.config.max_typing_inactivity)

  // Debounce timer for highlights filter
  Hue.highlights_filter_timer = Hue.create_debouncer(function () {
    Hue.show_highlights($("#highlights_filter").val())
  }, Hue.filter_delay)

  // Debounce timer for media history filters
  Hue.media_history_filter_timer = Hue.create_debouncer(function (type) {
    let filter = $(`#${type}_history_filter`).val()
    Hue.show_media_history(type, filter)
  }, Hue.filter_delay)

  // Debounce timer for image modal scrollwheel in the 'previous' direction
  Hue.modal_image_prev_wheel_timer = Hue.create_debouncer(function () {
    Hue.modal_image_prev_click()
  }, Hue.wheel_delay)

  // Debounce timer for image modal scrollwheel in the 'next direction
  Hue.modal_image_next_wheel_timer = Hue.create_debouncer(function () {
    Hue.modal_image_next_click()
  }, Hue.wheel_delay)

  // Debounce timer for maxers, like chat and media maxers
  Hue.maxer_wheel_timer = Hue.create_debouncer(function (func) {
    func()
  }, Hue.wheel_delay_2)

  // Debounce timer for settings filter
  Hue.settings_filter_timer = Hue.create_debouncer(function (type) {
    Hue.do_settings_filter(type, $(`#${type}_filter`).val())
  }, Hue.filter_delay)

  // Debounce timer to hide the infotip
  Hue.infotip_timer = Hue.create_debouncer(function () {
    Hue.hide_infotip()
  }, Hue.hide_infotip_delay)

  // Debounce timer to hide media image reactions
  Hue.media_image_reactions_timer = Hue.create_debouncer(function () {
    $("#media_image_reactions").html("")
    $("#media_image_reactions").css("display", "none")
  }, Hue.hide_media_reactions_delay)
  
  // Debounce timer to hide media tv reactions
  Hue.media_tv_reactions_timer = Hue.create_debouncer(function () {
    $("#media_tv_reactions").html("")
    $("#media_tv_reactions").css("display", "none")
  }, Hue.hide_media_reactions_delay)
}

// Shows the time elapsed between load stages
// Between file loaded and init ready
// Between init ready and join
// Between join and everything ready
Hue.compare_load_dates = function () {
  let time_1 = Hue.utilz.nice_time(Hue.load_date_1, Hue.load_date_2)
  let time_2 = Hue.utilz.nice_time(Hue.load_date_2, Hue.load_date_3)
  let time_3 = Hue.utilz.nice_time(Hue.load_date_3, Hue.load_date_4)

  Hue.loginfo(`Time from load to init ready: ${time_1}`)
  Hue.loginfo(`Time from init ready and join: ${time_2}`)
  Hue.loginfo(`Time from join to everything ready: ${time_3}`)
}

// Used for debugging purposes
Hue.fill = function () {
  let s = `abc def ghi jkl mno pqrs tuv wxyz ABC DEF GHI JKL MNO PQRS TUV WXYZ !"§
$%& /() =?* '<> #|; ²³~ @ ©«» ¤¼× {} abc def ghi jkl mno pqrs tuv wxyz ABC
DEF GHI JKL MNO PQRS TUV WXYZ !"§ $%& /() =?* '<> #|; ²³~ @ ©«» ¤¼× {} abc
def ghi jkl mno pqrs tuv wxyz ABC DEF GHI JKL MNO PQRS TUV WXYZ !"§ $%& /()
=?* '<> #|; ²³~ @ ©«» ¤¼× {} abc def ghi jkl mno pqrs tuv wxyz ABC DEF GHI
JKL MNO PQRS TUV WXYZ !"§ $%& /() =?* '<> #|; ²³~ @\`\´ ©«» ¤¼× {} abc def
ghi jkl mno pqrs tuv wxyz ABC DEF GHI JKL MNO PQRS TUV WXYZ !"§ $%& /() =?*
'<> #|; ²³~ @\`´ ©«» ¤¼× {} abc def ghi jkl mno pqrs tuv wxyz ABC DEF GHI JKL
MNO PQRS TUV WXYZ !"§ $%& /() =?* '<> #|; ²³~ @\`´ ©«» ¤¼× {} abc def ghi jkl
mno pqrs tuv wxyz ABC DEF GHI JKL MNO PQRS TUV WXYZ !"§ $%& /() =?* '<> #|; ²³~
@\`´ ©«» ¤¼× {} abc def ghi jkl mno pqrs tuv wxyz ABC DEF GHI JKL MNO PQRS TUV
WXYZ !"§ $%& /() =?* '<> #|; ²³~ @\`´ ©«» ¤¼× {} abc def ghi jkl mno pqrs tuv
wxyz ABC DEF GHI JKL MNO PQRS TUV WXYZ !"§ $%& /() =?* '<> #|; ²³~ @\`´ ©«» ¤¼×
{} abc def ghi jkl mno pqrs tuv wxyz ABC DEF GHI JKL MNO PQRS TUV WXYZ !"§ $%& /()
=?* '<> #|; ²³~ @\`´ ©«» ¤¼× {} abc def ghi jkl mno pqrs tuv wxyz ABC DEF GHI JKL
MNO PQRS TUV WXYZ !"§ $%& /() =?* '<> #|; ²³~ @\`´ ©«» ¤¼× {} abc def ghi jkl mno
pqrs tuv wxyz ABC DEF GHI JKL MNO PQRS TUV WXYZ !"§ $%& /() =?* '<> #|; ²³~ @\`´
©«» ¤¼× {} abc def ghi jkl mno pqrs tuv wxyz ABC DEF GHI JKL MNO PQRS TUV WXYZ !"§
$%& /() =?* '<> #|; ²³~ @\`´ ©«» ¤¼× {} abc def ghi jkl mno pqrs tuv wxyz ABC DEF
GHI JKL MNO PQRS TUV WXYZ !"§ $%& /() =?* '<> #|; ²³~ @\`´ ©«» ¤¼× {}abc def ghi
jkl mno pqrs tuv wxyz ABC DEF GHI JKL MNO PQRS TUV WXYZ !"§ $%& /() =?* '<> #|;`

  Hue.update_chat({
    username: Hue.username,
    message: s,
    prof_image: Hue.profile_image,
  })
}

// Special info for debugging purposes
Hue.sdeb = function (s, show_date = false) {
  if (show_date) {
    Hue.loginfo(Hue.utilz.nice_date())
  }

  for (let line of `${s}`.split("\n")) {
    Hue.loginfo(`>${line}<`)
  }

  Hue.loginfo("-------------")
}

// A debugging function
Hue.fillet = function (n) {
  for (let i = 0; i < n; i++) {
    Hue.feedback("Some feedback")
  }
}

// Wraps a function to be debugged
Hue.wrap_function = function (func, name) {
  let wrapped = function () {
    let date = dateFormat(Date.now(), "h:MM:ss:l")
    Hue.loginfo(`${date} | Running: ${name}`)
    return func(...arguments)
  }

  return wrapped
}

// Wraps all Hue functions for debugging purposes
// This only happens if Hue.debug_functions is true
Hue.wrap_functions = function () {
  for (let i in Hue) {
    if (i === "wrap_functions" || i === "wrap_function") {
      continue
    }

    let p = Hue[i]

    if (typeof p === "function") {
      Hue[i] = Hue.wrap_function(p, i)
    }
  }
}

7 // Triggers the browser notifications permission prompt if not yet active
Hue.request_desktop_notifications_permission = function () {
  if (typeof Notification === "undefined") {
    return false
  }

  if (Hue.has_desktop_notifications_permission()) {
    Hue.msg_info.show("Desktop Notifications are already enabled")
    return false
  }

  Notification.requestPermission()
}

// Checks if browser notification permission is already granted
Hue.has_desktop_notifications_permission = function () {
  if (typeof Notification === "undefined") {
    return false
  }

  return Notification.permission === "granted"
}

// Shows a browser notification
Hue.show_desktop_notification = function (s) {
  if (Hue.screen_locked) {
    return false
  }
  
  if (typeof Notification === "undefined") {
    return false
  }

  if (!Hue.has_desktop_notifications_permission()) {
    return false
  }

  let n = new Notification(s)

  n.addEventListener("click", function (e) {
    window.focus()
    e.target.close()
  })
}

// Shows a browser notification alerting of a highlight
Hue.show_highlight_desktop_notification = function () {
  if (!Hue.has_desktop_notifications_permission()) {
    return false
  }

  Hue.show_desktop_notification(
    `New highlight in ${Hue.room_name.substring(0, 40)}`
  )
}

// Handles actions after a copy event
Hue.copypaste_events = function () {
  $(document).bind("copy", function (e) {
    if (window.getSelection().toString() !== "") {
      setTimeout(function () {
        if (Hue.utilz.is_textbox(document.activeElement)) {
          let se = document.activeElement.selectionEnd
          document.activeElement.setSelectionRange(se, se)
        } else {
          window.getSelection().removeAllRanges()
          Hue.focus_input()
        }
      }, 200)
    }
  })
}

// Redraws the drawing area of a write whisper window
Hue.redraw_draw_message = function () {
  Hue.canvas_redraw({
    context: Hue.draw_message_context,
    click_x: Hue.draw_message_click_x,
    click_y: Hue.draw_message_click_y,
    drag: Hue.draw_message_drag,
  })
}

// Clears the drawing area of a write whisper window
Hue.clear_draw_message_state = function () {
  Hue.draw_message_click_x = []
  Hue.draw_message_click_y = []
  Hue.draw_message_drag = []

  Hue.draw_message_context.clearRect(
    0,
    0,
    Hue.draw_message_context.canvas.width,
    Hue.draw_message_context.canvas.height
  )
}

// Registers a click to the drawing area of a write whisper window
Hue.draw_message_add_click = function (x, y, dragging) {
  Hue.draw_message_click_x.push(x)
  Hue.draw_message_click_y.push(y)
  Hue.draw_message_drag.push(dragging)

  if (
    Hue.draw_message_click_x.length > Hue.config.draw_coords_max_array_length
  ) {
    Hue.draw_message_click_x.shift()
    Hue.draw_message_click_y.shift()
    Hue.draw_message_drag.shift()
  }
}

// Redraws a drawing canvas
Hue.canvas_redraw = function (args = {}) {
  let def_args = {
    context: false,
    click_x: false,
    click_y: false,
    drag: false,
    bg_color: false,
    colors: false,
    sizes: false,
    sector_index: false,
    type: false,
  }

  args = Object.assign(def_args, args)

  if (args.sector_index === false) {
    args.sector_index = args.click_x.length
  }

  args.context.clearRect(
    0,
    0,
    args.context.canvas.width,
    args.context.canvas.height
  )

  args.context.lineJoin = "round"

  let draw_bg = true

  if (args.type === "draw_image") {
    Hue.draw_image_context.putImageData(
      Hue.draw_image_current_snapshot.data,
      0,
      0
    )
  }

  if (args.bg_color && draw_bg) {
    args.context.fillStyle = args.bg_color

    args.context.fillRect(
      0,
      0,
      args.context.canvas.width,
      args.context.canvas.height
    )
  }

  for (let i = 0; i < args.sector_index; i++) {
    args.context.beginPath()

    if (args.drag[i] && i) {
      args.context.moveTo(args.click_x[i - 1], args.click_y[i - 1])
    } else {
      args.context.moveTo(args.click_x[i] - 1, args.click_y[i])
    }

    args.context.lineTo(args.click_x[i], args.click_y[i])

    args.context.closePath()

    if (args.colors) {
      args.context.strokeStyle = args.colors[i]
    } else {
      args.context.strokeStyle = $("#draw_message_area").css("color")
    }

    if (args.sizes) {
      args.context.lineWidth = args.sizes[i]
    } else {
      args.context.lineWidth = 2
    }

    args.context.stroke()
  }
}

// Opens the draw image window
Hue.open_draw_image = function () {
  if (!Hue.can_image) {
    Hue.feedback("You don't have permission to draw images")
    return false
  }

  Hue.msg_draw_image.show()
}

// Returns a number used in draw image scaling
// It can have a different scale than 1:1 to produce higher resolution images
Hue.draw_image_scale_fix = function (n) {
  return parseInt(Math.round(n * Hue.draw_image_scale))
}

// Starts a new draw image sector on mousedown
// Sectors are used to determine actions so undo and redo can be applied
Hue.draw_image_add_sector = function () {
  Hue.draw_image_current_snapshot.sectors.push(
    Hue.draw_image_current_snapshot.click_x.length
  )
}

// Setups the draw image window
Hue.setup_draw_image = function () {
  Hue.draw_image_context = $("#draw_image_area")[0].getContext("2d")
  Hue.draw_image_context.scale(Hue.draw_image_scale, Hue.draw_image_scale)
  Hue.clear_draw_image_state()

  $("#draw_image_area").mousedown(function (e) {
    if (Hue.draw_image_mode === "bucket") {
      return false
    }

    Hue.draw_image_just_entered = false
    Hue.draw_image_check_increase_snapshot()
    Hue.draw_image_add_sector()
    Hue.draw_image_add_click(e.offsetX, e.offsetY, false)
    Hue.redraw_draw_image()
  })

  $("#draw_image_area").mousemove(function (e) {
    if (Hue.mouse_is_down) {
      Hue.draw_image_add_click(
        e.offsetX,
        e.offsetY,
        !Hue.draw_image_just_entered
      )
      Hue.redraw_draw_image()
    }

    Hue.draw_image_just_entered = false
  })

  $("#draw_image_area").mouseenter(function (e) {
    Hue.draw_image_just_entered = true
  })

  $("#draw_image_area").click(function (e) {
    if (Hue.draw_image_mode === "bucket") {
      let result = Hue.draw_image_bucket_fill(
        Hue.draw_image_scale_fix(e.offsetX),
        Hue.draw_image_scale_fix(e.offsetY)
      )

      if (result) {
        Hue.draw_image_check_redo()
        Hue.increase_draw_image_snapshot(result)
      }
    }
  })

  $("#draw_image_mode_select_pencil").click(function () {
    Hue.set_draw_image_mode_input("pencil")
  })

  $("#draw_image_mode_select_bucket").click(function () {
    Hue.set_draw_image_mode_input("bucket")
  })

  $("#draw_image_undo").click(function () {
    Hue.draw_image_undo()
  })

  $("#draw_image_redo").click(function () {
    Hue.draw_image_redo()
  })

  $("#draw_image_clear").click(function () {
    Hue.needs_confirm("clear_draw_image_func")
  })

  $("#draw_image_upload").click(function () {
    Hue.upload_draw_image()
  })
  
  let select = ""
  
  for (let i=2; i<=20; i+=2) {
    select += `<option value="${i}">${i}</option>`
  }

  $("#draw_image_pencil_size").html(select)

  Hue.draw_image_prepare_settings()
  Hue.horizontal_separator.separate("draw_image_buttons")
}

// Prepares initial settings for the draw image window
Hue.draw_image_prepare_settings = function () {
  Hue.draw_image_pencil_color = "#333333"
  Hue.draw_image_bucket_color = "#4898b7"
  Hue.draw_image_pencil_size = 4

  Hue.set_draw_image_mode_input("pencil")

  $("#draw_image_pencil_color").val(Hue.draw_image_pencil_color)

  $("#draw_image_pencil_color").click(function () {
    Hue.set_draw_image_mode_input("pencil")
  })

  $("#draw_image_pencil_color").change(function () {
    Hue.draw_image_pencil_color = $(this).val()
  })

  $("#draw_image_bucket_color").val(Hue.draw_image_bucket_color)

  $("#draw_image_bucket_color").click(function () {
    Hue.set_draw_image_mode_input("bucket")
  })

  $("#draw_image_bucket_color").change(function () {
    Hue.draw_image_bucket_color = $(this).val()
  })

  $("#draw_image_pencil_size")
    .find("option")
    .each(function () {
      if ($(this).val() == Hue.draw_image_pencil_size) {
        $(this).prop("selected", true)
      }
    })

  $("#draw_image_pencil_size").change(function () {
    Hue.draw_image_pencil_size = $(this).val()
  })
}

// Sets the input mode (pencil or bucket)
// Changes the appearance of the widgets to reflect this
Hue.set_draw_image_mode_input = function (m) {
  if (m === "pencil") {
    $("#draw_image_mode_select_pencil").addClass("modal_icon_selected")
    $("#draw_image_mode_select_bucket").removeClass("modal_icon_selected")
  } else if (m === "bucket") {
    $("#draw_image_mode_select_bucket").addClass("modal_icon_selected")
    $("#draw_image_mode_select_pencil").removeClass("modal_icon_selected")
  }

  Hue.draw_image_mode = m
}

// Creates a new snapshot level
// Snapshots are saved drawing states
// These are used as points to go back or forward,
// and do canvas drawing operations on top of them
// Instead of having a huge single set of drawing operations
Hue.increase_draw_image_snapshot = function (data) {
  let level = Hue.draw_image_current_snapshot.level + 1

  Hue.draw_image_snapshots[`level_${level}`] = {
    level: level,
    data: data,
    click_x: [],
    click_y: [],
    drag: [],
    color_array: [],
    size_array: [],
    sectors: [],
    sector_index: 0,
  }

  Hue.draw_image_current_snapshot = Hue.draw_image_snapshots[`level_${level}`]

  let keys = Object.keys(Hue.draw_image_snapshots)

  if (keys.length > Hue.draw_image_max_levels) {
    let lowest_key = keys.length

    for (let key in Hue.draw_image_snapshots) {
      let snapshot = Hue.draw_image_snapshots[key]

      if (snapshot.level < lowest_key) {
        lowest_key = snapshot.level
      }
    }

    delete Hue.draw_image_snapshots[`level_${lowest_key}`]
  }
}

// Clears the draw image
// Resets the snapshot level to 0
Hue.clear_draw_image_state = function () {
  let context = Hue.draw_image_context

  context.fillStyle = "#ffffff"
  context.fillRect(0, 0, context.canvas.width, context.canvas.height)

  Hue.draw_image_snapshots = {
    level_0: {
      level: 0,
      data: Hue.draw_image_get_image_data(),
      click_x: [],
      click_y: [],
      drag: [],
      color_array: [],
      size_array: [],
      sectors: [],
      sector_index: 0,
    },
  }

  Hue.draw_image_current_snapshot = Hue.draw_image_snapshots["level_0"]
}

// Redraws the draw image
Hue.redraw_draw_image = function () {
  Hue.canvas_redraw({
    context: Hue.draw_image_context,
    click_x: Hue.draw_image_current_snapshot.click_x,
    click_y: Hue.draw_image_current_snapshot.click_y,
    drag: Hue.draw_image_current_snapshot.drag,
    colors: Hue.draw_image_current_snapshot.color_array,
    sizes: Hue.draw_image_current_snapshot.size_array,
    sector_index: Hue.draw_image_current_snapshot.sector_index,
    type: "draw_image",
  })
}

// Removes any redo levels above
// Makes current state the latest state
Hue.draw_image_clean_redo = function (i) {
  Hue.draw_image_current_snapshot.click_x = Hue.draw_image_current_snapshot.click_x.slice(
    0,
    i
  )
  Hue.draw_image_current_snapshot.click_y = Hue.draw_image_current_snapshot.click_y.slice(
    0,
    i
  )
  Hue.draw_image_current_snapshot.color_array = Hue.draw_image_current_snapshot.color_array.slice(
    0,
    i
  )
  Hue.draw_image_current_snapshot.size_array = Hue.draw_image_current_snapshot.size_array.slice(
    0,
    i
  )
  Hue.draw_image_current_snapshot.drag = Hue.draw_image_current_snapshot.drag.slice(
    0,
    i
  )

  let new_sectors = []

  for (let sector of Hue.draw_image_current_snapshot.sectors) {
    if (sector <= i) {
      new_sectors.push(sector)
    }
  }

  Hue.draw_image_current_snapshot.sectors = new_sectors

  for (let level in Hue.draw_image_snapshots) {
    if (
      Hue.draw_image_snapshots[level].level >
      Hue.draw_image_current_snapshot.level
    ) {
      delete Hue.draw_image_snapshots[level]
    }
  }
}

// Checks if the current snapshot levels has other snapshots above
Hue.draw_image_has_levels_above = function () {
  let level = Hue.draw_image_current_snapshot.level

  for (let key in Hue.draw_image_snapshots) {
    if (Hue.draw_image_snapshots[key].level > level) {
      return true
    }
  }

  return false
}

// Checks if the current state has redo levels above
Hue.draw_image_check_redo = function () {
  if (
    Hue.draw_image_current_snapshot.click_x.length !==
      Hue.draw_image_current_snapshot.sector_index ||
    Hue.draw_image_has_levels_above()
  ) {
    Hue.draw_image_clean_redo(Hue.draw_image_current_snapshot.sector_index)
  }
}

// Gets image data from the canvas
Hue.draw_image_get_image_data = function () {
  let context = Hue.draw_image_context
  let w = context.canvas.width
  let h = context.canvas.height
  let data = Hue.draw_image_context.getImageData(0, 0, w, h)

  return data
}

// Checks if a new snapshot should be created
Hue.draw_image_check_increase_snapshot = function () {
  if (
    Hue.draw_image_current_snapshot.click_x.length ===
      Hue.draw_image_current_snapshot.sector_index &&
    !Hue.draw_image_has_levels_above()
  ) {
    if (
      Hue.draw_image_current_snapshot.click_x.length >=
      Hue.draw_image_num_strokes_save
    ) {
      let sector =
        Hue.draw_image_current_snapshot.sectors[
          Hue.draw_image_current_snapshot.sectors.length - 1
        ]
      Hue.draw_image_clean_redo(sector)
      Hue.increase_draw_image_snapshot(Hue.draw_image_get_image_data())
    }
  }
}

// Register a new click to the current snapshot
Hue.draw_image_add_click = function (x, y, dragging) {
  Hue.draw_image_check_redo()
  Hue.draw_image_current_snapshot.click_x.push(x)
  Hue.draw_image_current_snapshot.click_y.push(y)
  Hue.draw_image_current_snapshot.color_array.push(Hue.draw_image_pencil_color)
  Hue.draw_image_current_snapshot.size_array.push(Hue.draw_image_pencil_size)
  Hue.draw_image_current_snapshot.drag.push(dragging)
  Hue.draw_image_current_snapshot.sector_index =
    Hue.draw_image_current_snapshot.click_x.length
}

// Turns the canvas drawing into a Blob and sends it to the server as an image upload
Hue.upload_draw_image = function () {
  if (!Hue.can_image) {
    Hue.feedback("You don't have permission to change the image")
    return false
  }

  if (
    Hue.draw_image_current_snapshot.level === 0 &&
    Hue.draw_image_current_snapshot.click_x.length === 0
  ) {
    return false
  }

  $("#draw_image_area")[0].toBlob(
    function (blob) {
      blob.name = "draw_image.png"
      Hue.show_image_upload_comment(blob, "image_upload")
      Hue.msg_draw_image.close()
    },
    "image/png",
    0.95
  )
}

// Function wrapped in a confirm to be called from the GUI
Hue.clear_draw_image_func = function () {
  Hue.clear_draw_image_state()
}

// Performs an undo in the draw image
Hue.draw_image_undo = function () {
  if (Hue.draw_image_current_snapshot.sector_index > 0) {
    for (let sector of Hue.draw_image_current_snapshot.sectors
      .slice(0)
      .reverse()) {
      if (sector < Hue.draw_image_current_snapshot.sector_index) {
        Hue.draw_image_current_snapshot.sector_index = sector
        Hue.redraw_draw_image()
        break
      }
    }
  } else {
    let level = Hue.draw_image_current_snapshot.level - 1

    if (Hue.draw_image_snapshots[`level_${level}`] !== undefined) {
      Hue.draw_image_current_snapshot.sector_index = 0
      Hue.draw_image_current_snapshot =
        Hue.draw_image_snapshots[`level_${level}`]
      Hue.draw_image_current_snapshot.sector_index =
        Hue.draw_image_current_snapshot.click_x.length

      Hue.redraw_draw_image()
    }
  }
}

// Performs a redo in the draw image
Hue.draw_image_redo = function () {
  if (
    Hue.draw_image_current_snapshot.sector_index <
    Hue.draw_image_current_snapshot.click_x.length
  ) {
    let found = false

    for (let sector of Hue.draw_image_current_snapshot.sectors) {
      if (sector > Hue.draw_image_current_snapshot.sector_index) {
        Hue.draw_image_current_snapshot.sector_index = sector
        Hue.redraw_draw_image()
        found = true
        break
      }
    }

    if (!found) {
      if (
        Hue.draw_image_current_snapshot.sector_index !==
        Hue.draw_image_current_snapshot.click_x.length
      ) {
        Hue.draw_image_current_snapshot.sector_index =
          Hue.draw_image_current_snapshot.click_x.length
        Hue.redraw_draw_image()
      }
    }
  } else {
    let level = Hue.draw_image_current_snapshot.level + 1

    if (Hue.draw_image_snapshots[`level_${level}`] !== undefined) {
      Hue.draw_image_current_snapshot.sector_index =
        Hue.draw_image_current_snapshot.click_x.length
      Hue.draw_image_current_snapshot =
        Hue.draw_image_snapshots[`level_${level}`]
      Hue.draw_image_current_snapshot.sector_index = 0

      Hue.redraw_draw_image()
    }
  }
}

// Performs the draw image bucket fill algorithm
Hue.draw_image_bucket_fill = function (x, y) {
  let context = Hue.draw_image_context
  let w = context.canvas.width
  let h = context.canvas.height
  let image_data = Hue.draw_image_get_image_data()
  let data = image_data.data
  let node = [y, x]
  let target_color = Hue.get_canvas_node_color(data, node, w)
  let replacement_color = Hue.colorlib.hex_to_rgb(Hue.draw_image_bucket_color)

  replacement_color.push(255)

  if (Hue.canvas_node_color_is_equal(target_color, replacement_color)) {
    return false
  }

  let q = []

  data = Hue.set_canvas_node_color(data, node, replacement_color, w)
  q.push(node)

  while (q.length) {
    let n = q.shift()

    if (n[1] > 0) {
      let nn = [n[0], n[1] - 1]
      let nn_color = Hue.get_canvas_node_color(data, nn, w)

      if (Hue.canvas_node_color_is_equal(nn_color, target_color)) {
        data = Hue.set_canvas_node_color(data, nn, replacement_color, w)
        q.push(nn)
      }
    }

    if (n[1] < w - 1) {
      let nn = [n[0], n[1] + 1]

      let nn_color = Hue.get_canvas_node_color(data, nn, w)

      if (Hue.canvas_node_color_is_equal(nn_color, target_color)) {
        data = Hue.set_canvas_node_color(data, nn, replacement_color, w)
        q.push(nn)
      }
    }

    if (n[0] > 0) {
      let nn = [n[0] - 1, n[1]]

      let nn_color = Hue.get_canvas_node_color(data, nn, w)

      if (Hue.canvas_node_color_is_equal(nn_color, target_color)) {
        data = Hue.set_canvas_node_color(data, nn, replacement_color, w)
        q.push(nn)
      }
    }

    if (n[0] < h - 1) {
      let nn = [n[0] + 1, n[1]]

      let nn_color = Hue.get_canvas_node_color(data, nn, w)

      if (Hue.canvas_node_color_is_equal(nn_color, target_color)) {
        data = Hue.set_canvas_node_color(data, nn, replacement_color, w)
        q.push(nn)
      }
    }
  }

  image_data.data = data
  context.putImageData(image_data, 0, 0)

  return image_data
}

// Gets the index of a certain node in the canvas
Hue.get_canvas_node_index = function (data, node, w) {
  return (node[0] * w + node[1]) * 4
}

// Gets the color of a certain node in the canvas
Hue.get_canvas_node_color = function (data, node, w) {
  let index = Hue.get_canvas_node_index(data, node, w)

  return [data[index], data[index + 1], data[index + 2], data[index + 3]]
}

// Sets the color of a certain node in the canvas
Hue.set_canvas_node_color = function (data, node, values, w) {
  let index = Hue.get_canvas_node_index(data, node, w)

  data[index] = values[0]
  data[index + 1] = values[1]
  data[index + 2] = values[2]
  data[index + 3] = values[3]

  return data
}

// Determines if two node colors should be considered equal
Hue.canvas_node_color_is_equal = function (a1, a2) {
  let diff = 10
  let c1 = Math.abs(a1[0] - a2[0]) <= diff
  let c2 = Math.abs(a1[1] - a2[1]) <= diff
  let c3 = Math.abs(a1[2] - a2[2]) <= diff
  let alpha = Math.abs(a1[3] - a2[3]) <= diff

  return c1 && c2 && c3 && alpha
}

// Toggles between pencil and bucket mode
Hue.draw_image_change_mode = function () {
  if (Hue.draw_image_mode === "pencil") {
    Hue.set_draw_image_mode_input("bucket")
  } else if (Hue.draw_image_mode === "bucket") {
    Hue.set_draw_image_mode_input("pencil")
  }
}

// Sets visibility of footer media icons based on media permissions
Hue.setup_footer_icons = function () {
  let media = ["image", "tv"]

  for (let type of media) {
    if (Hue[`room_${type}_mode`] === "disabled") {
      $("#footer_image_controls").css("display", "none")
    } else {
      $("#footer_image_controls").css("display", "flex")
    }

    if (Hue[`can_${type}`]) {
      $(`#footer_${type}_icon_container`).css("display", "flex")
    } else {
      $(`#footer_${type}_icon_container`).css("display", "none")
    }
  }

  if (Hue.room_image_mode === "disabled" || Hue.room_tv_mode === "disabled") {
    $("#footer_media_rotate").css("display", "none")
  } else {
    $("#footer_media_rotate").css("display", "flex")
  }

  Hue.update_footer_separators()
}

// Setups more footer elements
Hue.setup_footer = function () {
  $("#footer_image_icon").on("auxclick", function (e) {
    if (e.which === 2) {
      $("#image_picker_upload").click()
    }
  })

  $("#footer_swaprotate").click(function () {
    Hue.show_swaprotate()
  })

  $("#footer_swaprotate").on("auxclick", function (e) {
    if (e.which === 2) {
      Hue.rotate_media()
    }
  })

  let media = ["image", "tv"]

  for (let type of media) {
    $(`#footer_${type}_label`).click(function () {
      Hue[`show_${type}_picker`]()
    })

    $(`#footer_${type}_toggler`).click(function () {
      Hue.toggle_media({type:type, feedback:true})
    })

    $(`#footer_${type}_lock`).click(function () {
      Hue.change_media_lock({type:type, feedback:true})
    })
  }

  $("#footer_user_menu").click(function () {
    Hue.show_user_menu()
  })

  $("#footer_chat_functions").click(function () {
    if (Hue.chat_functions_box_open) {
      Hue.hide_chat_functions_box()
    } else {
      Hue.show_chat_functions_box()
      Hue.start_hide_chat_functions()
    }
  })

  $("#footer_media_menu").click(function () {
    Hue.show_media_menu()
  })

  $("#footer_media_menu").on("auxclick", function (e) {
    if (e.which === 2) {
      Hue.stop_media()
    }
  })
}

// Checks how to handle the rotate icon
Hue.check_footer_media_rotate = function () {
  if (Hue.num_media_elements_visible() < 2) {
    $("#footer_media_rotate").addClass("faded")
  } else {
    $("#footer_media_rotate").removeClass("faded")
  }
}

Hue.update_footer_separators = function () {
  Hue.horizontal_separator_no_margin.separate("footer_media_items")
}

// Setups the header
Hue.setup_header = function () {
  $("#header_room_menu").click(function () {
    Hue.show_room_menu()
  })

  $("#header_room_menu").on("auxclick", function (e) {
    if (e.which === 2) {
      let rotated = $("#main_container").data("hue_rotated")
      let degrees = rotated ? 0 : 180

      $("#main_container").css("transform", `rotateY(${degrees}deg)`)
      $("#main_container").data("hue_rotated", !Boolean(rotated))
    }
  })

  $("#header_users").click(function () {
    Hue.show_userlist_window()
  })

  $("#header_users").on("auxclick", function (e) {
    if (e.which === 2) {
      let user =
        Hue.userlist[Hue.utilz.get_random_int(0, Hue.userlist.length - 1)]
      Hue.show_profile(user.username)
    }
  })

  $("#header_message_board").click(function () {
    Hue.show_message_board()
  })

  $("#header_notifications").click(function () {
    Hue.show_notifications()
  })

  $("#header_whispers").click(function () {
    Hue.show_whispers()
  })

  $("#header_lock_screen").click(function () {
    Hue.lock_screen()
  })
}
// Setups an image object
// This handles image objects received live from the server or from logged messages
// This is the entry function for image objects to get registered, announced, and be ready for use
Hue.setup_image = function (mode, odata = {}) {
  let data = {}

  data.id = odata.id
  data.user_id = odata.user_id
  data.type = odata.type
  data.source = odata.source
  data.setter = odata.setter
  data.size = odata.size
  data.date = odata.date
  data.query = odata.query
  data.comment = odata.comment
  data.in_log = odata.in_log === undefined ? true : odata.in_log

  data.nice_date = data.date
    ? Hue.utilz.nice_date(data.date)
    : Hue.utilz.nice_date()

  if (!data.setter) {
    data.setter = Hue.config.system_username
  }

  if (!data.source) {
    data.source = Hue.config.default_image_source
  }

  if (data.source.startsWith("/")) {
    data.source = window.location.origin + data.source
  } else if (data.source.startsWith(window.location.origin)) {
    if (!data.size) {
      for (let img of Hue.image_changed) {
        if (img.source === data.source) {
          data.type = img.type
          data.size = img.size
          break
        }
      }
    }
  }

  if (!data.date) {
    data.date = Date.now()
  }

  let gets = data.id ? `${data.id.slice(-3)} | ` : ""

  data.info = `${gets}Setter: ${data.setter} | ${data.nice_date}`
  data.info_html = `<div>Setter: ${Hue.utilz.make_html_safe(
    data.setter
  )}</div><div>${data.nice_date}</div>`

  if (data.type === "upload") {
    data.info += ` | Size: ${Hue.utilz.get_size_string(data.size)}`
    data.info_html += `<div>Size: ${Hue.utilz.get_size_string(data.size)}</div>`
  }

  if (data.query) {
    data.info += ` | Search Term: "${data.query}"`
    data.info_html += `<div>Search Term: "${Hue.utilz.make_html_safe(
      data.query
    )}"</div>`
  }

  data.message = `${data.setter} changed the image`

  data.onclick = function () {
    Hue.show_modal_image(data)
  }

  if (data.message) {
    data.message_id = Hue.announce_image(data).message_id
  }

  if (!data.setter) {
    data.info = "Default Image"
  }

  if (mode === "change" || mode === "show") {
    Hue.push_image_changed(data)
    Hue.set_modal_image_number()
  }

  if (mode === "change") {
    if (Hue.image_locked) {
      $("#footer_lock_image_icon").addClass("blinking")
    }

    let bypass_lock = data.user_id === Hue.user_id
    Hue.change({ type: "image", bypass_lock: bypass_lock })
  }
}

// Announces an image change to the chat
Hue.announce_image = function (data) {
  return Hue.public_feedback(data.message, {
    id: data.id,
    save: true,
    brk: Hue.get_chat_icon("image"),
    date: data.date,
    username: data.setter,
    title: data.info,
    onclick: data.onclick,
    comment: data.comment,
    type: "image_change",
    user_id: data.user_id,
    in_log: data.in_log,
    media_source: data.source,
    on_middle_click: function () {
      Hue.goto_url(data.source, "tab")
    }
  })
}

// Pushes a changed image into the image changed array
Hue.push_image_changed = function (data) {
  Hue.image_changed.push(data)

  if (Hue.image_changed.length > Hue.config.media_changed_crop_limit) {
    Hue.image_changed = Hue.image_changed.slice(
      Hue.image_changed.length - Hue.config.media_changed_crop_limit
    )
  }

  Hue.after_push_media_change("image", data)
}

// Returns the current room image
// The last image in the image changed array
// This is not necesarily the user's loaded image
Hue.current_image = function () {
  if (Hue.image_changed.length > 0) {
    return Hue.image_changed[Hue.image_changed.length - 1]
  } else {
    return {}
  }
}

// Loads an image with a specified item
Hue.show_image = function (force = false) {
  let item = Hue.loaded_image

  $("#media_image_frame").attr("crossOrigin", "anonymous")
  $("#media_image_error").css("display", "none")
  $("#media_image_frame").css("display", "initial")

  if (force || $("#media_image_frame").attr("src") !== item.source) {
    $("#media_image_frame").attr("src", item.source)
  } else {
    Hue.after_image_load(false)
  }
}

// Attempts to change the image source
// It considers room state and permissions
// It considers text or url to determine if it's valid
// It includes a 'just check' flag to only return true or false
Hue.change_image_source = function (src, just_check = false, comment = "") {
  let feedback = true

  if (just_check) {
    feedback = false
  }

  if (!Hue.can_image) {
    if (feedback) {
      Hue.feedback("You don't have permission to change the image")
    }

    return false
  }

  if (!comment) {
    let r = Hue.get_media_change_inline_comment("image", src)
    src = r.source
    comment = r.comment
  }

  if (comment.length > Hue.config.max_media_comment_length) {
    if (feedback) {
      Hue.feedback("Comment is too long")
    }

    return false
  }

  if (src.length === 0) {
    return false
  }

  src = Hue.utilz.clean_string2(src)

  if (src.length > Hue.config.max_media_source_length) {
    return false
  }

  if (src.startsWith("/")) {
    return false
  }

  if (src === Hue.current_image().source || src === Hue.current_image().query) {
    if (feedback) {
      Hue.feedback("Image is already set to that")
    }

    return false
  } else if (src === "default") {
    // OK
  } else if (src === "prev" || src === "previous") {
    if (Hue.image_changed.length > 1) {
      src = Hue.image_changed[Hue.image_changed.length - 2].source
    } else {
      if (feedback) {
        Hue.feedback("No image source before current one")
      }

      return false
    }
  } else if (Hue.utilz.is_url(src)) {
    src = src.replace(/\.gifv/g, ".gif")

    if (Hue.check_domain_list("image", src)) {
      if (feedback) {
        Hue.feedback("Image sources from that domain are not allowed")
      }

      return false
    }

    let extension = Hue.utilz.get_extension(src).toLowerCase()

    if (!extension || !Hue.utilz.image_extensions.includes(extension)) {
      if (feedback) {
        Hue.feedback("That doesn't seem to be an image")
      }

      return false
    }
  } else {
    if (src.length > Hue.config.safe_limit_1) {
      if (feedback) {
        Hue.feedback("Query is too long")
      }

      return false
    }

    if (!Hue.config.imgur_enabled) {
      if (feedback) {
        Hue.feedback("Imgur support is not enabled")
      }

      return false
    }
  }

  if (just_check) {
    return true
  }

  Hue.emit_change_image_source(src, comment)
}

// Sends an emit to change the image source
Hue.emit_change_image_source = function (url, comment = "") {
  if (!Hue.can_image) {
    Hue.feedback("You don't have permission to change the image")
    return false
  }

  if (Hue.get_setting("confirm_image")) {
    if (!confirm("Are you sure you want to change the image here?")) {
      return
    }
  }

  Hue.socket_emit("change_image_source", { src: url, comment: comment })
}

// Updates dimensions of the image
Hue.fix_image_frame = function () {
  if (!Hue.image_visible) {
    return false
  }

  if (!$("#media_image_frame")[0].naturalHeight) {
    return false
  }

  Hue.fix_frame("media_image_frame")
}

// Changes the image visibility based on current state
Hue.change_image_visibility = function () {
  if (Hue.room_image_mode !== "disabled" && Hue.room_state.image_enabled) {
    $("#media").css("display", "flex")
    $("#media_image").css("display", "flex")
    $("#footer_toggle_image_icon").find("use").eq(0).attr("href", "#icon_toggle-on")

    if (Hue.first_media_change && Hue.started) {
      Hue.change({ type: "image" })
    }

    Hue.image_visible = true
    Hue.fix_image_frame()
  } else {
    $("#media_image").css("display", "none")

    let num_visible = Hue.num_media_elements_visible()

    if (num_visible === 0) {
      Hue.hide_media()
    }

    $("#footer_toggle_image_icon").find("use").eq(0).attr("href", "#icon_toggle-off")

    Hue.image_visible = false
  }

  if (Hue.tv_visible) {
    Hue.fix_visible_video_frame()
  }

  Hue.check_footer_media_rotate()
  Hue.goto_bottom(false, false)
}

// When clicking the Previous button in the image modal window
Hue.modal_image_prev_click = function () {
  if (Hue.image_changed.length < 2) {
    return
  }

  let index = Hue.image_changed.indexOf(Hue.loaded_modal_image) - 1

  if (index < 0) {
    index = Hue.image_changed.length - 1
  }

  let prev = Hue.image_changed[index]

  Hue.show_modal_image(prev)
}

// When clicking the Next button in the image modal window
Hue.modal_image_next_click = function (e) {
  if (Hue.image_changed.length < 2) {
    return
  }

  let index = Hue.image_changed.indexOf(Hue.loaded_modal_image) + 1

  if (index > Hue.image_changed.length - 1) {
    index = 0
  }

  let next = Hue.image_changed[index]

  Hue.show_modal_image(next)
}

// Setups image modal window events
Hue.setup_modal_image = function () {
  let img = $("#modal_image")

  img[0].addEventListener("load", function () {
    $("#modal_image_spinner").css("display", "none")
    $("#modal_image").css("display", "block")
    Hue.show_modal_image_resolution()
  })

  img.on("error", function () {
    $("#modal_image_spinner").css("display", "none")
    $("#modal_image").css("display", "none")
    $("#modal_image_error").css("display", "block")
  })

  let f = function (e) {
    if (e.ctrlKey || e.shiftKey) {
      return false
    }

    if ($("#modal_image_container").hasClass("expanded_modal_image")) {
      return false
    }

    let direction = e.deltaY > 0 ? "down" : "up"

    if (direction === "up") {
      Hue.modal_image_next_wheel_timer()
    } else if (direction === "down") {
      Hue.modal_image_prev_wheel_timer()
    }
  }

  $("#Msg-window-modal_image")[0].addEventListener("wheel", f)

  $("#modal_image_container").click(function () {
    if ($("#modal_image_container").hasClass("expanded_modal_image")) {
      Hue.restore_modal_image()
    } else {
      Hue.msg_modal_image.close()
    }
  })

  $("#modal_image_container").on("auxclick", function (e) {
    if (e.which === 2) {
      Hue.goto_url($("#modal_image").attr("src"), "tab")
    }
  })

  $("#modal_image_header_info").click(function () {
    Hue.show_image_picker()
  })

  $("#modal_image_footer_info").click(function () {
    Hue.show_modal_image_number()
  })

  $("#modal_image_footer_prev").click(function (e) {
    Hue.modal_image_prev_click()
  })

  $("#modal_image_footer_next").click(function (e) {
    Hue.modal_image_next_click()
  })

  $("#modal_image_toolbar_load").click(function (e) {
    let item = Hue.loaded_modal_image
    Hue.toggle_media({type:"image", what:true})
    Hue.change({ type: "image", item: item, force: true })
    Hue.change_media_lock({type:"image", what:true})
    Hue.close_all_modals()
  })

  $("#modal_image_toolbar_change").click(function (e) {
    if (confirm("This will change it for everyone. Are you sure?")) {
      let item = Hue.loaded_modal_image
      Hue.change_image_source(item.source)
      Hue.close_all_modals()
    }
  })

  $("#modal_image_toolbar_expand").click(function (e) {
    if ($("#modal_image_container").hasClass("expanded_modal_image")) {
      Hue.restore_modal_image()
    } else {
      Hue.expand_modal_image()
    }
  })
}

// Expand modal image to give it full height
Hue.expand_modal_image = function () {
  $("#modal_image_container").addClass("expanded_modal_image")
  $("#modal_image_toolbar_expand").text("Restore")
}

// Restore expanded modal image
Hue.restore_modal_image = function () {
  $("#modal_image_container").removeClass("expanded_modal_image")
  $("#modal_image_toolbar_expand").text("Expand")
}

// Opens the image modal with the current image
Hue.show_current_image_modal = function (current = true) {
  if (current) {
    Hue.show_modal_image(Hue.current_image_data)
  } else {
    if (Hue.image_changed.length > 0) {
      let data = Hue.image_changed[Hue.image_changed.length - 1]
      Hue.show_modal_image(data)
    }
  }
}

// Clears image information in the modal image window
Hue.clear_modal_image_info = function () {
  $("#modal_image_header_info").html("")
  $("#modal_image_footer_info").html("")
}

// Shows the modal image window
Hue.show_modal_image = function (data) {
  if (!data.source) {
    if (Hue.image_changed.length > 0) {
      Hue.show_current_image_modal(false)
      return false
    } else {
      Hue.msg_info.show("No image loaded yet")
      return false
    }
  }

  Hue.loaded_modal_image = data

  let img = $("#modal_image")

  img.css("display", "none")

  $("#modal_image_spinner").css("display", "block")
  $("#modal_image_error").css("display", "none")

  img.attr("src", data.source)

  $("#modal_image_header_info").html(data.info_html)

  Hue.horizontal_separator.separate("modal_image_header_info")

  if (data.comment) {
    $("#modal_image_subheader").html(
      Hue.replace_markdown(Hue.utilz.make_html_safe(data.comment))
    )
    $("#modal_image_subheader").css("display", "block")
    Hue.setup_whispers_click($("#modal_image_subheader"), data.setter)
  } else {
    $("#modal_image_subheader").css("display", "none")
  }

  if (
    (Hue.room_image_mode === "enabled" || Hue.room_image_mode === "locked") &&
    data !== Hue.loaded_image
  ) {
    $("#modal_image_toolbar_load").css("display", "block")
  } else {
    $("#modal_image_toolbar_load").css("display", "none")
  }

  if (Hue.change_image_source(data.source, true)) {
    $("#modal_image_toolbar_change").css("display", "flex")
  } else {
    $("#modal_image_toolbar_change").css("display", "none")
  }

  Hue.horizontal_separator.separate("modal_image_header_info_container")

  Hue.msg_modal_image.show(function () {
    Hue.set_modal_image_number()
  })
}

// Sets the image number in the modal image window
Hue.set_modal_image_number = function (id) {
  if (!Hue.modal_image_open) {
    return false
  }

  let index = Hue.image_changed.indexOf(Hue.loaded_modal_image)
  let number = index + 1
  let footer_text = `${number} of ${Hue.image_changed.length}`
  $("#modal_image_footer_info").text(footer_text)

  if (number > 0) {
    $("#modal_image_number_input").val(number)
  } else {
    $("#modal_image_number_input").val(1)
  }
}

// Setups the image number widget in the modal image window
Hue.setup_modal_image_number = function () {
  $("#modal_image_number_button").click(function () {
    Hue.modal_image_number_go()
  })

  $("#modal_image_number_input").on("input", function () {
    let val = parseInt($("#modal_image_number_input").val())

    if (val < 1) {
      $("#modal_image_number_input").val(Hue.image_changed.length)
    } else if (val === Hue.image_changed.length + 1) {
      $("#modal_image_number_input").val(1)
    } else if (val > Hue.image_changed.length) {
      $("#modal_image_number_input").val(Hue.image_changed.length)
    }
  })
}

// Shows the modal image widget
Hue.show_modal_image_number = function () {
  Hue.msg_modal_image_number.show(function () {
    $("#modal_image_number_input").focus()
    $("#modal_image_number_input").select()
  })
}

// Goes to a specified image number in the modal image window
Hue.modal_image_number_go = function () {
  let val = parseInt($("#modal_image_number_input").val())

  let ic = Hue.image_changed[val - 1]

  if (ic) {
    Hue.show_modal_image(ic)
    Hue.msg_modal_image_number.close()
  }
}

// Adds modal image resolution information to the modal image's information
// This is disaplayed in the modal image window
Hue.show_modal_image_resolution = function () {
  let img = $("#modal_image")[0]
  let w = img.naturalWidth
  let h = img.naturalHeight

  if (img.src === Hue.loaded_modal_image.source) {
    $("#modal_image_header_info").html(
      Hue.loaded_modal_image.info_html + `<div>Resolution: ${w} x ${h}</div>`
    )
    Hue.horizontal_separator.separate("modal_image_header_info")
  }
}

// Starts events for the image
Hue.start_image_events = function () {
  $("#media_image_frame")[0].addEventListener("load", function (e) {
    Hue.after_image_load()
  })

  $("#media_image_frame").on("error", function () {
    if ($("#media_image_frame")[0].hasAttribute("crossOrigin")) {
      $("#media_image_frame").removeAttr("crossOrigin")
      $("#media_image_frame").attr("src", $("#media_image_frame").attr("src"))
    } else {
      $("#media_image_frame").css("display", "none")
      $("#media_image_error").css("display", "initial")
      Hue.after_image_load()
    }
  })

  $("#media_image_frame").on("auxclick", function (e) {
    if (e.which === 2) {
      Hue.goto_url($("#media_image_frame").attr("src"), "tab")
    }
  })

  $("#media_image_frame").height(0)
  $("#media_image_frame").width(0)
}

// Apply image media info
Hue.apply_image_media_info = function () {
  Hue.apply_media_info($("#media_image_info")[0], Hue.loaded_image, "image")
}

// This runs after an image successfully loads
Hue.after_image_load = function (ok = true) {
  Hue.current_image_data = Hue.loaded_image
  Hue.apply_image_media_info()

  if (ok) {
    Hue.get_dominant_theme()
    Hue.fix_image_frame()
  }
}

// Tries to get the dominant color of the image
Hue.get_dominant_theme = function () {
  try {
    let color = Hue.colorlib.get_dominant(
      $("#media_image_frame")[0],
      1,
      true
    )[0]

    if (color) {
      Hue.dominant_theme = color

      if (Hue.theme_mode === "automatic") {
        Hue.apply_theme()
      }
    } else {
      Hue.dominant_theme = false
    }
  } catch (err) {
    Hue.dominant_theme = false
  }
}

// Checks if the image is maximized
Hue.image_is_maximized = function () {
  return Hue.image_visible && !Hue.tv_visible
}

// Maximizes the image, hiding the tv
Hue.maximize_image = function () {
  if (Hue.image_visible) {
    if (Hue.tv_visible) {
      Hue.toggle_media({type:"tv", what:false, save:false})
    } else {
      Hue.toggle_media({type:"tv", what:true, save:false})
    }
  } else {
    Hue.toggle_media({type:"image", what:true, save:false})

    if (Hue.tv_visible) {
      Hue.toggle_media({type:"tv", what:false, save:false})
    }
  }

  Hue.save_room_state()
}

// Setups image expansions when clicked
// When an image in the chat is clicked the image is shown full sized in a window
Hue.setup_expand_image = function () {
  let img = $("#expand_image")

  img[0].addEventListener("load", function () {
    img.css("display", "block")
    $("#expand_image_spinner").css("display", "none")
  })

  img.on("error", function () {
    $("#expand_image_spinner").css("display", "none")
    $("#expand_image").css("display", "none")
    $("#expand_image_error").css("display", "block")
  })

  $("#expand_image_container").click(function () {
    Hue.hide_expand_image()
  })
}

// Shows a window with an image at full size
Hue.expand_image = function (src) {
  $("#expand_image").css("display", "none")
  $("#expand_image_spinner").css("display", "block")
  $("#expand_image_error").css("display", "none")
  $("#expand_image").attr("src", src)
  Hue.msg_expand_image.show()
}

// Hides the expand image window
Hue.hide_expand_image = function () {
  Hue.msg_expand_image.close()
}

// Reloads the image with the same source
Hue.refresh_image = function () {
  Hue.change({ type: "image", force: true, play: true, current_source: true })
}

// Used to change the image
// Shows the image picker window to input a URL, draw, or upload a file
Hue.show_image_picker = function () {
  if (!Hue.can_image) {
    Hue.feedback("You don't have image permission")
    return false
  }

  Hue.msg_image_picker.show(function () {
    $("#image_source_picker_input").focus()
    Hue.show_media_history("image")
    Hue.scroll_modal_to_top("image_picker")
  })
}

// Room image mode setter
Hue.set_room_image_mode = function (what) {
  Hue.room_image_mode = what
  Hue.config_admin_room_image_mode()
}

// Announces room image mode changes
Hue.announce_room_image_mode_change = function (data) {
  Hue.show_room_notification(
    data.username,
    `${data.username} changed the image mode to ${data.what}`
  )
  Hue.set_room_image_mode(data.what)
  Hue.change_image_visibility()
  Hue.check_media_permissions()
  Hue.check_media_maxers()
  Hue.change_media_lock_icon("image")
}

// Shows the window to add a comment to an image upload
Hue.show_image_upload_comment = function (file, type) {
  $("#image_upload_comment_image_feedback").css("display", "none")
  $("#image_upload_comment_image_preview").css("display", "inline-block")

  let reader = new FileReader()

  reader.onload = function (e) {
    Hue.image_upload_comment_file = file
    Hue.image_upload_comment_type = type

    $("#image_upload_comment_image_preview").attr("src", e.target.result)

    Hue.msg_image_upload_comment.set_title(
      `${Hue.utilz.slice_string_end(
        file.name,
        20
      )} (${Hue.utilz.get_size_string(file.size, 2)})`
    )

    $("#Msg-titlebar-image_upload_comment").attr("title", file.name)

    Hue.msg_image_upload_comment.show(function () {
      $("#image_upload_comment_submit").click(function () {
        Hue.process_image_upload_comment()
      })

      $("#image_upload_comment_input").focus()
      Hue.scroll_modal_to_bottom("image_upload_comment")
    })
  }

  reader.readAsDataURL(file)
}

// Setups the upload image comment window
Hue.setup_image_upload_comment = function () {
  let img = $("#image_upload_comment_image_preview")

  img.on("error", function () {
    $(this).css("display", "none")
    $("#image_upload_comment_image_feedback").css("display", "inline")
  })
}

// Submits the upload image comment window
// Uploads the file and the optional comment
Hue.process_image_upload_comment = function () {
  if (!Hue.image_upload_comment_open) {
    return false
  }

  Hue.image_upload_comment_open = false

  let file = Hue.image_upload_comment_file
  let type = Hue.image_upload_comment_type
  let comment = Hue.utilz.clean_string2($("#image_upload_comment_input").val())

  if (comment.length > Hue.config.max_media_comment_length) {
    return false
  }

  Hue.upload_file({ file: file, action: type, comment: comment })
  Hue.msg_image_upload_comment.close()
}

// Changes the room image mode
Hue.change_room_image_mode = function (what) {
  if (!Hue.check_op_permission(Hue.role, "media")) {
    return false
  }

  let modes = ["enabled", "disabled", "locked"]

  if (!modes.includes(what)) {
    Hue.feedback(`Valid image modes: ${modes.join(" ")}`)
    return false
  }

  if (what === Hue.room_image_mode) {
    Hue.feedback(`Image mode is already set to that`)
    return false
  }

  Hue.socket_emit("change_image_mode", { what: what })
}

Hue.setup_image_picker = function () {
  $("#image_source_picker_input").on("input", function () {
    Hue.check_image_picker()
  })

  Hue.check_image_picker()
}

Hue.check_image_picker = function (el) {
  if ($("#image_source_picker_input").val().trim().length > 0) {
    $("#image_picker_upload").css("display", "none")
    $("#image_picker_submit").css("display", "inline-block")
  } else {
    $("#image_picker_upload").css("display", "inline-block")
    $("#image_picker_submit").css("display", "none")
  }
}

Hue.image_picker_submit = function () {
  let val = $("#image_source_picker_input").val().trim()

  if (val !== "") {
    Hue.change_image_source(val)
    Hue.close_all_modals()
  }
}

// Update data on reconnections
Hue.fix_current_image_data = function () {
  if (Hue.loaded_image && Hue.loaded_image !== Hue.current_image_data) {
    Hue.current_image_data = Hue.loaded_image
  }
}
// Shows the infotip
// This is a black box in the corner meant for quick temporary feedback
Hue.show_infotip = function (s) {
  $("#infotip").text(s)
  $("#infotip_container").css("display", "block")
  Hue.infotip_timer()
}

// Hides the infotip
Hue.hide_infotip = function () {
  $("#infotip_container").css("display", "none")
}

// Determines if the input is scrolled or not
Hue.input_is_scrolled = function () {
  let el = $("#input")[0]
  return el.clientHeight < el.scrollHeight
}

// On input change
Hue.on_input_change = function () {
  let value = $("#input").val()

  value = Hue.utilz.clean_string9(value)

  if (value.length > Hue.config.max_input_length) {
    value = value.substring(0, Hue.config.max_input_length)
    Hue.change_input(value)
  }

  if (Hue.old_input_val !== value) {
    Hue.check_typing()
    Hue.old_input_val = value
  }
}

// Setups events for the main input
Hue.setup_input = function () {
  $("#input").on("input", function () {
    Hue.on_input_change()
  })

  $("#input").on("click", function () {
    if (Hue.editing_message) {
      Hue.stop_edit_message()
    }
  })

  $("#input").on("focus", function () {
    if (Hue.context_menu_open) {
      $(".context-menu-list").trigger("contextmenu:hide")
    }
  })

  $("#input").on("paste", function (e) {
    let items = (e.clipboardData || e.originalEvent.clipboardData).items

    for (let index in items) {
      let item = items[index]

      if (item.kind === "file") {
        Hue.dropzone.addFile(item.getAsFile())
        return
      }
    }
  })

  Hue.old_input_val = $("#input").val()
}

// Updates the input's placeholder
Hue.update_input_placeholder = function () {
  let s = ""
  
  if (Hue.get_setting("show_input_placeholder")) {
    s = `Hi ${Hue.username}, write something to ${Hue.room_name}`
  }
  
  $("#input").attr("placeholder", s)
}

// Clears the input
Hue.clear_input = function () {
  Hue.change_input("")
  Hue.old_input_val = ""
}

// Appends to the input
Hue.add_to_input = function (what) {
  Hue.change_input(`${$("#input").val() + what}`)
}

// Inserts text on current caret position
Hue.insert_to_input = function (what) {
  let el = $("#input")[0]
  let [start, end] = [el.selectionStart, el.selectionEnd]
  let part1 = el.value.substring(0, start)
  let part2 = el.value.substring(end, el.value.length)
  Hue.change_input(`${part1}${what}${part2}`)
}

// Changes the input
Hue.change_input = function (s, to_end = true, focus = true) {
  $("#input").val(s)
  
  if (to_end) {
    Hue.input_to_end()
  }
  
  if (focus) {
    Hue.focus_input()
  }
}

// Focuses the input
Hue.focus_input = function () {
  if (Hue.modal_open) {
    return false
  }

  $("#input").focus()
}

// Removes focus on the input
Hue.blur_input = function () {
  $("#input").blur()
}

// Moves the input's caret to the end
Hue.input_to_end = function () {
  $("#input")[0].scrollLeft = $("#input")[0].scrollWidth
}

// Appends a linebreak to the input
Hue.add_linebreak_to_input = function () {
  if (!$("#input").val().trim()) {
    return false
  }
  
  Hue.insert_to_input("\n")
  Hue.scroll_input_to_bottom()
}

// Scrolls input to bottom when it's overflowed
Hue.scroll_input_to_bottom = function () {
  let input = $("#input")[0]
  input.scrollTop = input.scrollHeight
}

// Handles the input command
Hue.input_command = function (arg) {
  arg = arg.replace(/\s\/endinput/gi, "")
  Hue.change_input(arg)
}

// Adds an item to the input history
Hue.add_to_input_history = function (message, change_index = true) {
  for (let i = 0; i < Hue.input_history.length; i++) {
    if (Hue.input_history[i].message === message) {
      Hue.input_history.splice(i, 1)
      break
    }
  }

  let date = Date.now()
  let item = { message: message, date: date }

  Hue.input_history.push(item)

  if (Hue.input_history.length > Hue.config.input_history_crop_limit) {
    Hue.input_history = Hue.input_history.slice(
      Hue.input_history.length - Hue.config.input_history_crop_limit
    )
  }

  if (change_index) {
    Hue.reset_input_history_index()
  }

  Hue.save_input_history()
}

// Saves the input history localStorage object
Hue.save_input_history = function () {
  Hue.save_local_storage(Hue.ls_input_history, Hue.input_history)
}

// Gets the input history localStorage object
Hue.get_input_history = function () {
  Hue.input_history = Hue.get_local_storage(Hue.ls_input_history)

  if (Hue.input_history === null) {
    Hue.input_history = []
  }

  Hue.reset_input_history_index()
}

// Resets the input history item index
// This index is used to determine what to show on 'up' or 'down' actions in the input
Hue.reset_input_history_index = function () {
  Hue.input_history_index = Hue.input_history.length
}

// This handles 'up' or 'down' actions for the input
// Shows the next input history item based on current history item index
Hue.input_history_change = function (direction) {
  if (Hue.input_history.length === 0) {
    return false
  }

  let v

  if (direction === "up") {
    Hue.input_history_index -= 1

    if (Hue.input_history_index === -2) {
      Hue.input_history_index = Hue.input_history.length - 1
    } else if (Hue.input_history_index === -1) {
      Hue.change_input("")
      return
    }

    v = Hue.input_history[Hue.input_history_index].message
  } else {
    if (Hue.input_history_index < 0) {
      Hue.change_input("")
      return
    }

    Hue.input_history_index += 1

    if (Hue.input_history_index > Hue.input_history.length - 1) {
      Hue.change_input("")
      Hue.reset_input_history_index()
      return false
    }

    if (Hue.input_history_index >= Hue.input_history.length) {
      Hue.change_input("")
      Hue.reset_input_history_index()
      return
    }

    v = Hue.input_history[Hue.input_history_index].message
  }

  Hue.change_input(v)
}

// Setups input history window events
Hue.setup_input_history = function () {
  $("#input_history_container").on("click", ".input_history_item", function () {
    if ($(this).find("a").length === 0) {
      Hue.change_input($(this).text())
      Hue.close_all_modals()
    }
  })

  $("#input_history_clear_icon").click(function () {
    if (confirm("Are you sure you want to clear the input history?")) {
      Hue.clear_input_history()
      Hue.show_input_history()
    }
  })
}

// Empties the input history localStorage object
Hue.clear_input_history = function () {
  Hue.input_history = []
  Hue.save_input_history()
}

// Shows the input history window
Hue.show_input_history = function (filter = false) {
  if (filter) {
    filter = filter.trim()
  }

  let sfilter = filter ? filter : ""

  $("#input_history_container").html("")
  $("#input_history_filter").val(sfilter)
  $("#input_history_container").html("")

  let words

  if (filter) {
    let lc_value = Hue.utilz.clean_string2(filter).toLowerCase()
    words = lc_value.split(" ").filter((x) => x.trim() !== "")
  }

  let items

  if (filter) {
    items = Hue.input_history.filter(function (item) {
      let text = item.message.toLowerCase()
      return words.some((word) => text.includes(word))
    })
  } else {
    items = Hue.input_history
  }

  for (let item of items) {
    let c = $(
      `<div class='modal_item input_history_item dynamic_title action pointer'></div>`
    )
    let nd = Hue.utilz.nice_date(item.date)

    c.attr("title", nd)
    c.data("otitle", nd)
    c.data("date", item.date)
    c.text(item.message)

    $("#input_history_container").prepend(c)
  }

  if (Hue.input_history.length > 0) {
    $("#input_history_clear_icon").removeClass("inactive")
  } else {
    $("#input_history_clear_icon").addClass("inactive")
  }

  Hue.msg_input_history.show(function () {
    Hue.scroll_modal_to_top("input_history")
  })
}

// Replaces an item in input history
Hue.replace_in_input_history = function (original, replacement) {
  for (let i=0; i<Hue.input_history.length; i++) {
    let item = Hue.input_history[i]

    if (item.message === original) {
      Hue.input_history[i].message = replacement
      break
    }
  }
}
// Execute javascript locally
Hue.execute_javascript = function (arg, show_result = true) {
  arg = arg.replace(/\s\/endjs/gi, "")

  let r

  try {
    r = eval(arg)

    if (typeof r === "number") {
      try {
        r = Hue.utilz.round(r, 2)
      } catch (err) {}
    }

    try {
      r = JSON.stringify(r)
    } catch (err) {
      r = "Done"
    }
  } catch (err) {
    r = "Error"
  }

  if (show_result) {
    let s = Hue.make_safe({ text: arg })

    let f = function () {
      Hue.msg_info2.show(["Executed Javascript", s])
    }

    Hue.feedback(`js: ${r}`, { onclick: f })
  }
}

// Setups most keyboard events
Hue.activate_key_detection = function () {
  document.addEventListener("keydown", (e) => {
    if (!Hue.started) {
      return
    }

    if (e.key === "Tab") {
      e.preventDefault()
    }

    if (
      !(
        Hue.utilz.is_textbox(document.activeElement) &&
        document.activeElement.value.trim()
      ) &&
      Hue.keys_pressed[e.keyCode] === undefined &&
      !e.repeat
    ) {
      Hue.keys_pressed[e.keyCode] = true

      if (Object.keys(Hue.keys_pressed).length === 1) {
        if (e.key === Hue.config.double_tap_key) {
          Hue.double_tap_key_pressed += 1

          if (Hue.double_tap_key_pressed === 2) {
            Hue.on_double_tap()
          } else {
            Hue.double_tap_timer()
          }
        } else if (e.key === Hue.config.double_tap_key_2) {
          Hue.double_tap_key_2_pressed += 1

          if (Hue.double_tap_key_2_pressed === 2) {
            Hue.on_double_tap_2()
          } else {
            Hue.double_tap_2_timer()
          }
        } else if (e.key === Hue.config.double_tap_key_3) {
          Hue.double_tap_key_3_pressed += 1

          if (Hue.double_tap_key_3_pressed === 2) {
            Hue.on_double_tap_3()
          } else {
            Hue.double_tap_3_timer()
          }
        } else {
          Hue.reset_double_tap_keys_pressed()
        }
      } else {
        Hue.reset_double_tap_keys_pressed()
      }
    } else {
      Hue.reset_double_tap_keys_pressed()
    }

    if (Hue.modal_open) {
      if (e.key === "Escape") {
        if (e.shiftKey) {
          Hue.close_all_modals()
          e.preventDefault()
          return
        }
      }

      if (Hue.image_picker_open) {
        if (Hue.msg_image_picker.is_highest()) {
          if (e.key === "Enter") {
            Hue.image_picker_submit()
            e.preventDefault()
          } else if (e.key === "Tab") {
            Hue.do_media_picker_input_cycle("image")
            e.preventDefault()
          }

          return
        }
      }

      if (Hue.tv_picker_open) {
        if (Hue.msg_tv_picker.is_highest()) {
          if (e.key === "Enter") {
            Hue.tv_picker_submit()
            e.preventDefault()
          } else if (e.key === "Tab") {
            Hue.do_media_picker_input_cycle("tv")
            e.preventDefault()
          }

          return
        }
      }

      if (Hue.image_upload_comment_open) {
        if (Hue.msg_image_upload_comment.is_highest()) {
          if (e.key === "Enter") {
            Hue.process_image_upload_comment()
            e.preventDefault()
          }
        }
      }

      if (Hue.open_room_open) {
        if (Hue.msg_info2.is_highest()) {
          if (e.key === "Enter") {
            if (e.shiftKey) {
              $("#open_room_here").trigger("click")
            } else {
              $("#open_room_new_tab").trigger("click")
            }

            e.preventDefault()
          }

          return
        }
      }

      if (Hue.background_image_input_open) {
        if (Hue.msg_info2.is_highest()) {
          if (e.key === "Enter") {
            Hue.background_image_input_action()
            e.preventDefault()
          }

          return
        }
      }

      if (Hue.create_room_open) {
        if (Hue.msg_info2.is_highest()) {
          if (e.key === "Enter") {
            Hue.create_room_submit()
            e.preventDefault()
          }

          return
        }
      }

      if (Hue.import_settings_open) {
        if (Hue.msg_info2.is_highest()) {
          if (e.key === "Enter") {
            Hue.process_imported_settings()
            e.preventDefault()
          }

          return
        }
      }

      if (Hue.goto_room_open) {
        if (Hue.msg_info2.is_highest()) {
          if (e.key === "Enter") {
            Hue.goto_room_action()
            e.preventDefault()
          }

          return
        }
      }

      if (Hue.modal_image_open) {
        if (Hue.msg_modal_image.is_highest()) {
          if (e.key === "ArrowLeft") {
            Hue.modal_image_prev_click()
            e.preventDefault()
          } else if (e.key === "ArrowRight") {
            Hue.modal_image_next_click()
            e.preventDefault()
          } else if (e.key === "ArrowUp") {
            Hue.modal_image_next_click()
            e.preventDefault()
          } else if (e.key === "ArrowDown") {
            Hue.modal_image_prev_click()
            e.preventDefault()
          }

          if (e.key === "Enter") {
            Hue.show_media_history("image")
            e.preventDefault()
          }

          if (e.key === " ") {
            Hue.show_modal_image_number()
            e.preventDefault()
          }

          return
        }
      }

      if (Hue.draw_image_open) {
        if (e.key === " ") {
          Hue.draw_image_change_mode()
        }

        if (e.key === "z") {
          if (e.ctrlKey) {
            Hue.draw_image_undo()
          }
        }

        if (e.key === "y") {
          if (e.ctrlKey) {
            Hue.draw_image_redo()
          }
        }
      }

      if (Hue.modal_image_number_open) {
        if (e.key === "Enter") {
          Hue.modal_image_number_go()
        }
      }

      if (Hue.writing_reply) {
        if (Hue.msg_reply.is_highest()) {
          if (e.key === "Enter" && !e.shiftKey) {
            Hue.submit_reply()
            e.preventDefault()
          }

          return
        }
      }

      if (Hue.change_user_username_open) {
        if (Hue.msg_info2.is_highest()) {
          if (e.key === "Enter" && !e.shiftKey) {
            Hue.submit_change_username()
            e.preventDefault()
          }

          return
        }
      }

      if (Hue.change_user_password_open) {
        if (Hue.msg_info2.is_highest()) {
          if (e.key === "Enter" && !e.shiftKey) {
            Hue.submit_change_password()
            e.preventDefault()
          }

          return
        }
      }

      if (Hue.change_user_email_open) {
        if (Hue.msg_info2.is_highest()) {
          if (e.key === "Enter" && !e.shiftKey) {
            Hue.submit_change_email()
            e.preventDefault()
          }

          return
        }
      }

      if (Hue.handle_url_open) {
        if (Hue.msg_handle_url.is_highest()) {
          if (e.key === "Enter") {
            Hue.handle_url_chat()
            e.preventDefault()
          }

          return
        }
      }

      if (Hue.screen_locked) {
        if (e.key === "Enter" || e.key === "Escape") {
          Hue.unlock_screen()
          e.preventDefault()
        }

        return
      }

      return
    }

    if (Hue.editing_message) {
      Hue.focus_edit_area()

      if (e.key === "Enter" && !e.shiftKey) {
        Hue.send_edit_messsage()
        e.preventDefault()
      } else if (e.key === "Escape") {
        Hue.stop_edit_message()
        e.preventDefault()
      } else if (e.key === "ArrowUp") {
        let res = Hue.handle_edit_direction()

        if (res) {
          e.preventDefault()
        }
      } else if (e.key === "ArrowDown") {
        let res = Hue.handle_edit_direction(true)

        if (res) {
          e.preventDefault()
        }
      }

      return
    }

    if ($("#footer_search_input")[0] === document.activeElement) {
      if (e.key === "Enter") {
        Hue.process_footer_search_input()
      } else if (e.key === "Escape") {
        Hue.clear_footer_search_input()
      }

      return
    }

    let focus = true

    if (e.key === "Control") {
      focus = false
    } else if (e.ctrlKey && window.getSelection().toString() !== "") {
      focus = false
    }

    if (focus) {
      Hue.focus_input()
    }

    if (e.key === "Enter") {
      let val = $("#input").val()

      if (e.shiftKey) {
        Hue.add_linebreak_to_input()
      } else {
        if (val.length === 0) {
          Hue.goto_bottom(true)
        } else {
          Hue.process_message({ message: val })
        }
      }

      e.preventDefault()
      return
    } else if (e.key === "ArrowUp") {
      if (e.shiftKey) {
        Hue.input_history_change("up")
        e.preventDefault()
      } else if (e.ctrlKey) {
        Hue.scroll_up(Hue.config.small_keyboard_scroll)
        e.preventDefault()
      } else {
        Hue.edit_last_message()
      }

      return
    } else if (e.key === "ArrowDown") {
      if (e.shiftKey) {
        Hue.input_history_change("down")
        e.preventDefault()
      } else if (e.ctrlKey) {
        Hue.scroll_down(Hue.config.small_keyboard_scroll)
        e.preventDefault()
      } else {
        Hue.goto_bottom(true, true)
      }

      return
    } else if (e.key === "PageUp") {
      Hue.scroll_up(Hue.config.big_keyboard_scroll)
      e.preventDefault()
      return
    } else if (e.key === "PageDown") {
      Hue.scroll_down(Hue.config.big_keyboard_scroll)
      e.preventDefault()
      return
    } else if (e.key === "Home") {
      if (e.ctrlKey) {
        Hue.goto_top(false)
        e.preventDefault()
        return
      }
    } else if (e.key === "End") {
      if (e.ctrlKey) {
        Hue.goto_bottom(true, false)
        e.preventDefault()
        return
      }
    } else if (e.key === "Escape") {
      if (!e.shiftKey) {
        Hue.clear_input()
        Hue.reset_input_history_index()
        
        if ($("#input").val().length > 0) {
        } else {
          Hue.goto_bottom(true, true)
        }

        Hue.hide_chat_functions_box()
        e.preventDefault()
        return
      }
    }
  })

  document.addEventListener("keyup", (e) => {
    if (!Hue.started) {
      return
    }

    delete Hue.keys_pressed[e.keyCode]
  })

  document.addEventListener("input", (e) => {
    if (Hue.modal_open && Hue.active_modal) {
      if ($(e.target).data("mode") === "manual") {
        return false
      }

      Hue.do_modal_filter_timer()
    }
  })
}

// Resets double tap key press state
Hue.reset_double_tap_keys_pressed = function () {
  Hue.double_tap_key_pressed = 0
  Hue.double_tap_key_2_pressed = 0
  Hue.double_tap_key_3_pressed = 0
}

// On double tap 1 action
Hue.on_double_tap = function () {
  Hue.execute_commands("double_tap")
}

// On double tap 2 action
Hue.on_double_tap_2 = function () {
  Hue.execute_commands("double_tap_2")
}

// On double tap 3 action
Hue.on_double_tap_3 = function () {
  Hue.execute_commands("double_tap_3")
}

// Centralized function to get localStorage objects
Hue.get_local_storage = function (ls_name) {
  let obj

  if (localStorage[ls_name]) {
    try {
      obj = JSON.parse(localStorage.getItem(ls_name))
    } catch (err) {
      localStorage.removeItem(ls_name)
      obj = null
    }
  } else {
    obj = null
  }

  return obj
}

// Centralized function to save localStorage objects
Hue.save_local_storage = function (ls_name, obj, force = false) {
  Hue.local_storage_to_save[ls_name] = obj

  if (force) {
    Hue.do_save_local_storage()
  } else {
    Hue.save_local_storage_timer()
  }
}

// Do the actual localStorage save
Hue.do_save_local_storage = function () {
  for (let ls_name in Hue.local_storage_to_save) {
    let obj = Hue.local_storage_to_save[ls_name]

    obj = JSON.stringify(obj)

    localStorage.setItem(ls_name, obj)
  }

  Hue.local_storage_to_save = {}
}

// Remove a localStorage object
Hue.remove_local_storage = function (ls_name) {
  localStorage.removeItem(ls_name)
}

// Setups localStorage events
Hue.setup_local_storage = function () {
  window.addEventListener(
    "storage",
    function (e) {
      if (
        e.key !== Hue.ls_global_settings &&
        e.key !== Hue.ls_room_settings &&
        e.key !== Hue.ls_last_message_board_post_checked
      ) {
        return false
      }

      let obj

      try {
        obj = JSON.parse(e.newValue)
      } catch (err) {
        return false
      }

      if (Hue.utilz.is_empty_object(obj)) {
        return false
      }

      if (e.key === Hue.ls_global_settings) {
        Hue.reset_settings("global_settings", false)
      } else if (e.key === Hue.ls_room_settings) {
        if (e.url === document.location.href) {
          Hue.reset_settings("room_settings", false)
        }
      } else if (e.key === Hue.ls_last_message_board_post_checked) {
        Hue.get_last_message_board_post_checked()
        Hue.check_last_message_board_post()
      }
    },
    false
  )
}

// If the user is banned the client enters locked mode
// This only shows a simple menu with a few navigation options
Hue.start_locked_mode = function () {
  $("#header").css("display", "none")
  $("#footer").css("display", "none")

  Hue.show_locked_menu()
  Hue.make_main_container_visible()
}

// Show the locked menu
Hue.show_locked_menu = function () {
  Hue.msg_locked.show()
}

// Setups lockscreen events
Hue.setup_lockscreen = function () {
  $("#lockscreen_title_menu").on("mouseenter", function () {
    Hue.lockscreen_peek_timeout = setTimeout(function () {
      $("#Msg-container-lockscreen").css("opacity", 0.2)
      Hue.lockscreen_peek_active = true
    }, Hue.lockscreen_peek_delay)
  })

  $("#lockscreen_title_menu").on("mouseleave", function () {
    clearTimeout(Hue.lockscreen_peek_timeout)

    if (Hue.lockscreen_peek_active) {
      $("#Msg-container-lockscreen").css("opacity", 1)
      Hue.remove_alert_title()
    }

    Hue.lockscreen_peek_active = false
  })

  $("#lockscreen_principal").click(function () {
    Hue.unlock_screen()
  })
}

// Enables the lockscreen
// The lockscreen is a special mode where the display is covered
// The user is considered unfocused
Hue.lock_screen = function (save = true, force = false) {
  if (!force && Hue.screen_locked) {
    return false
  }

  Hue.stop_tv()
  Hue.screen_locked = true
  Hue.msg_lockscreen.show()

  Hue.execute_commands("on_lockscreen")

  if (save) {
    Hue.save_room_state()
  }
}

// Disables the lockscreen
Hue.unlock_screen = function (save = true) {
  if (!Hue.screen_locked) {
    return false
  }

  clearTimeout(Hue.lockscreen_peek_timeout)

  Hue.screen_locked = false
  Hue.msg_lockscreen.close()
  Hue.process_visibility()
  Hue.change({ type: "image", force: false, play: false})
  Hue.change({ type: "tv", force: false, play: false})
  Hue.execute_commands("on_unlockscreen")

  if (save) {
    Hue.save_room_state()
  }
}
// Regex generator for character based markdown
// For example **this** or _this_
Hue.make_markdown_char_regex = function (char) {
  // Raw regex if "=" was the char
  // (^|\s|\[)(\=+)(?!\s)(.*[^\=\s])\2($|\s)
  let regex = `(^|\\s)(${Hue.utilz.escape_special_characters(
    char
  )}+)(?!\\s)(.*[^${Hue.utilz.escape_special_characters(
    char
  )}\\s])\\2($|\\s|\:)`
  return new RegExp(regex, "gm")
}

// Makes and prepares the markdown regexes
Hue.setup_markdown_regexes = function () {
  Hue.markdown_regexes["*"] = {}
  Hue.markdown_regexes["*"].regex = Hue.make_markdown_char_regex("*")
  Hue.markdown_regexes["*"].replace_function = function (g1, g2, g3, g4, g5) {
    let n = g3.length

    if (n === 1) {
      return `${g2}<span class='italic'>${g4}</span>${g5}`
    } else if (n === 2) {
      return `${g2}<span class='bold'>${g4}</span>${g5}`
    } else if (n === 3) {
      return `${g2}<span class='italic bold'>${g4}</span>${g5}`
    }

    return g1
  }

  Hue.markdown_regexes["_"] = {}
  Hue.markdown_regexes["_"].regex = Hue.make_markdown_char_regex("_")
  Hue.markdown_regexes["_"].replace_function = function (g1, g2, g3, g4, g5) {
    let n = g3.length

    if (n === 1) {
      return `${g2}<span class='italic'>${g4}</span>${g5}`
    } else if (n === 2) {
      return `${g2}<span class='underlined'>${g4}</span>${g5}`
    }

    return g1
  }

  Hue.markdown_regexes["="] = {}
  Hue.markdown_regexes["="].regex = Hue.make_markdown_char_regex("=")
  Hue.markdown_regexes["="].replace_function = function (g1, g2, g3, g4, g5) {
    let n = g3.length

    if (n === 1) {
      return `${g2}<span class='backgrounded'>${g4}</span>${g5}`
    }

    return g1
  }

  Hue.markdown_regexes["|"] = {}
  Hue.markdown_regexes["|"].regex = Hue.make_markdown_char_regex("|")
  Hue.markdown_regexes["|"].replace_function = function (g1, g2, g3, g4, g5) {
    let n = g3.length

    if (n === 2) {
      return `${g2}<span class='spoiler' title='Click To Reveal'>${g4}</span>${g5}`
    }

    return g1
  }

  Hue.markdown_regexes["!"] = {}
  Hue.markdown_regexes["!"].regex = Hue.make_markdown_char_regex("!")
  Hue.markdown_regexes["!"].replace_function = function (g1, g2, g3, g4, g5) {
    let n = g3.length

    if (n === 2) {
      return `${g2}<span class='yuge'>${g4}</span>${g5}`
    }

    return g1
  }

  Hue.markdown_regexes["$"] = {}
  Hue.markdown_regexes["$"].regex = Hue.make_markdown_char_regex("$")
  Hue.markdown_regexes["$"].replace_function = function (g1, g2, g3, g4, g5) {
    let n = g3.length

    if (n === 1) {
      return `${g2}<span class='generic_uname action'>${g4}</span>${g5}`
    }

    return g1
  }

  Hue.markdown_regexes[">"] = {}
  Hue.markdown_regexes[">"].regex = new RegExp("^ *((?:&gt;)+).*", "gm")
  Hue.markdown_regexes[">"].replace_function = function (g1, g2) {
    let m = g2.match(/&gt;/g)

    if (!m) {
      return false
    }

    let num = m.length

    if (num === 1) {
      return `<span class='colortext greentext'>${g1}</span>`
    } else if (num === 2) {
      return `<span class='colortext bluetext'>${g1}</span>`
    } else {
      return `<span class='colortext redtext'>${g1}</span>`
    }
  }

  Hue.markdown_regexes["whisper_link"] = {}
  Hue.markdown_regexes["whisper_link"].regex = new RegExp(
    `\\[whisper\\s+(.*?)\\](.*?)\\[\/whisper\\]`,
    "gm"
  )
  Hue.markdown_regexes["whisper_link"].replace_function = function (
    g1,
    g2,
    g3
  ) {
    return `<span class="whisper_link special_link" data-whisper="${g2}" title="[Whisper] ${g2}">${g3.replace(/\s+/, "&nbsp;")}</span>`
  }

  Hue.markdown_regexes["horizontal_line"] = {}
  Hue.markdown_regexes["horizontal_line"].regex = new RegExp(
    `\\[line\\]`, "gm"
  )
  Hue.markdown_regexes["horizontal_line"].replace_function = function () {
    return "<hr class='chat_hr'>"
  }

  Hue.markdown_regexes["anchor_link"] = {}
  Hue.markdown_regexes["anchor_link"].regex = new RegExp(
    `\\[anchor\\s+(.*?)\\](.*?)\\[\/anchor\\]`,
    "gm"
  )
  Hue.markdown_regexes["anchor_link"].replace_function = function (g1, g2, g3) {
    return `<a href="${g2}" class="stop_propagation anchor_link special_link" target="_blank">${g3.trim().replace(/\s+/, "&nbsp;")}</a>`
  }
}

// Passes text through all markdown regexes doing the appropiate replacements
// It runs in recursion until no more replacements are found
// This is to allow replacements in any order
Hue.replace_markdown = function (text, multilines = true, filter = false) {
  if (filter) {
    text = text.replace(Hue.markdown_regexes["whisper_link"].regex, "")
    text = text.replace(Hue.markdown_regexes["anchor_link"].regex, "")
    text = text.replace(Hue.markdown_regexes["horizontal_line"].regex, "")
    text = text.replace(Hue.markdown_regexes["|"].regex, " (spoiler) ")
  } else {
    text = text.replace(
      Hue.markdown_regexes["whisper_link"].regex,
      Hue.markdown_regexes["whisper_link"].replace_function
    )
    text = text.replace(
      Hue.markdown_regexes["anchor_link"].regex,
      Hue.markdown_regexes["anchor_link"].replace_function
    )
    text = text.replace(
      Hue.markdown_regexes["horizontal_line"].regex,
      Hue.markdown_regexes["horizontal_line"].replace_function
    )
    if (!Hue.get_setting("autoreveal_spoilers")) {
      text = text.replace(
        Hue.markdown_regexes["|"].regex,
        Hue.markdown_regexes["|"].replace_function
      )
    }
  }

  text = text.replace(
    Hue.markdown_regexes["*"].regex,
    Hue.markdown_regexes["*"].replace_function
  )
  text = text.replace(
    Hue.markdown_regexes["_"].regex,
    Hue.markdown_regexes["_"].replace_function
  )
  text = text.replace(
    Hue.markdown_regexes["="].regex,
    Hue.markdown_regexes["="].replace_function
  )
  text = text.replace(
    Hue.markdown_regexes["!"].regex,
    Hue.markdown_regexes["!"].replace_function
  )
  text = text.replace(
    Hue.markdown_regexes["$"].regex,
    Hue.markdown_regexes["$"].replace_function
  )
  text = text.replace(
    Hue.markdown_regexes[">"].regex,
    Hue.markdown_regexes[">"].replace_function
  )

  if (multilines) {
    let num_lines = 0
    
    for (let line of text.split("\n")) {
      if (line.trim()) {
        num_lines += 1
  
        if (num_lines > 1) {
          text = `<pre class='precode'><code>${text}</code></pre>`
          break
        }
      }
    }
  }

  return text
}

// Removes unwanted formatting from chat messages
Hue.remove_markdown_from_message = function (message) {
  message = message.replace(/\[.*?\](.+?)\[\/.*?\]/gm, function (a, b) {
    return b
  })

  return message
}
// Setups media
Hue.setup_media = function () {
  $("#media_image_frame").click(function () {
    Hue.show_current_image_modal()
  })

  $("#media_image_error").click(function () {
    Hue.show_current_image_modal()
  })
}

// What to do after pushing a new media changed item
Hue.after_push_media_change = function (type, data) {
  if (Hue.show_media_history_type) {
    Hue.prepend_to_media_history(data.message_id)
  }
}

// Applies percentages changes to the chat and media elements based on current state
Hue.apply_media_percentages = function () {
  let mode = Hue.room_state.media_layout
  let p1 = Hue.room_state.tv_display_percentage
  let p2 = 100 - p1

  if (mode === "column") {
    $("#media_tv").css("height", `${p1}%`)
    $("#media_image").css("height", `${p2}%`)
    $("#media_tv").css("width", "100%")
    $("#media_image").css("width", "100%")
  } else if (mode === "row") {
    $("#media_tv").css("width", `${p1}%`)
    $("#media_image").css("width", `${p2}%`)
    $("#media_tv").css("height", "100%")
    $("#media_image").css("height", "100%")
  }

  let c1 = Hue.room_state.chat_display_percentage
  let c2 = 100 - c1

  $("#chat_main").css("width", `${c1}%`)
  $("#media").css("width", `${c2}%`)

  Hue.on_resize()
}

// Applies the image and tv positions based on current state
Hue.apply_media_positions = function () {
  let p = Hue.room_state.tv_display_position
  let tvp
  let ip

  if (p === "top") {
    tvp = 1
    ip = 2
  } else if (p === "bottom") {
    tvp = 2
    ip = 1
  }

  $("#media_image").css("order", ip)
  $("#media_tv").css("order", tvp)
}

Hue.swap_display_positions = function () {
  Hue.room_state.tv_display_position =
    Hue.room_state.tv_display_position === "top" ? "bottom" : "top"
  Hue.save_room_state()
  Hue.apply_media_positions()
}

// If the media menu is open the loaded media section is updated
Hue.check_media_menu_loaded_media = function () {
  if (Hue.media_menu_open) {
    Hue.update_media_menu_loaded_media()
  }
}

// Updates the loaded media section of the media menu
Hue.update_media_menu_loaded_media = function () {
  let obj = Hue.get_loaded_media_messages()

  for (let type of Hue.utilz.media_types) {
    if (obj[type]) {
      $(`#media_menu_loaded_${type}`).html(obj[type])
    } else {
      $(`#media_menu_loaded_${type}`).html("")
    }
  }

  $("#media_menu_loaded_media").html()
}

// Shows the media menu
Hue.show_media_menu = function () {
  Hue.update_media_menu_loaded_media()
  Hue.msg_media_menu.show()
}

// Hides the media menu
Hue.hide_media_menu = function () {
  Hue.msg_media_menu.close()
}

// Stops and locks all media (image, tv)
Hue.stop_and_lock = function (stop = true) {
  if (stop) {
    Hue.stop_media()
  }

  Hue.change_media_lock({type:"image", what:true})
  Hue.change_media_lock({type:"tv", what:true})
  Hue.save_room_state()
}

Hue.unlock = function () {
  Hue.change_media_lock({type:"image", what:false})
  Hue.change_media_lock({type:"tv", what:false})
  Hue.save_room_state()
}

// Initial change for current media
Hue.start_active_media = function () {
  Hue.change({
    type: "image",
    play: false
  })
  Hue.change({
    type: "tv",
    play: false
  })

  Hue.first_media_change = true
}

// Mouse events for maxers
Hue.maxers_mouse_events = function () {
  let f = function (e) {
    if (e.ctrlKey) {
      return false
    }

    if (!e.shiftKey) {
      return false
    }

    let maximized = Hue.num_media_elements_visible() === 1
    let direction = e.deltaY > 0 ? "down" : "up"
    let el = $("#media_tv")[0]

    if (direction === "up") {
      if (maximized) {
        if (Hue.tv_is_maximized()) {
          let tv_pos = Hue.room_state.tv_display_position

          if (tv_pos === "top") {
            Hue.do_media_tv_size_change(90)
            Hue.unmaximize_media()
          } else {
            Hue.swap_display_positions()
            Hue.do_media_tv_size_change(90)
            Hue.unmaximize_media()
          }
        } else if (Hue.image_is_maximized()) {
          let tv_pos = Hue.room_state.tv_display_position

          if (tv_pos === "bottom") {
            Hue.do_media_tv_size_change(10)
            Hue.unmaximize_media()
          } else {
            Hue.swap_display_positions()
            Hue.do_media_tv_size_change(10)
            Hue.unmaximize_media()
          }
        }

        return
      }

      if (el.style.order == 1) {
        Hue.maxer_wheel_timer(Hue.decrease_tv_percentage)
      } else if (el.style.order == 2) {
        Hue.maxer_wheel_timer(Hue.increase_tv_percentage)
      }
    } else if (direction === "down") {
      if (maximized) {
        if (Hue.tv_is_maximized()) {
          let tv_pos = Hue.room_state.tv_display_position

          if (tv_pos === "bottom") {
            Hue.do_media_tv_size_change(90)
            Hue.unmaximize_media()
          } else {
            Hue.swap_display_positions()
            Hue.do_media_tv_size_change(90)
            Hue.unmaximize_media()
          }
        } else if (Hue.image_is_maximized()) {
          let tv_pos = Hue.room_state.tv_display_position

          if (tv_pos === "top") {
            Hue.do_media_tv_size_change(10)
            Hue.unmaximize_media()
          } else {
            Hue.swap_display_positions()
            Hue.do_media_tv_size_change(10)
            Hue.unmaximize_media()
          }
        }

        return
      }

      if (el.style.order == 1) {
        Hue.maxer_wheel_timer(Hue.increase_tv_percentage)
      } else if (el.style.order == 2) {
        Hue.maxer_wheel_timer(Hue.decrease_tv_percentage)
      }
    }
  }

  $("#media_maxer")[0].addEventListener("wheel", f)

  let f2 = function (e) {
    if (e.ctrlKey) {
      return false
    }

    if (!e.shiftKey) {
      return false
    }

    let maximized = false

    if (Hue.num_media_elements_visible() === 0) {
      maximized = true
    }

    let direction = e.deltaY > 0 ? "down" : "up"

    if (direction === "down") {
      if (maximized) {
        return
      }

      Hue.maxer_wheel_timer(Hue.increase_chat_percentage)
    } else if (direction === "up") {
      if (maximized) {
        Hue.do_chat_size_change(90)
        Hue.show_media_items()
        return
      }

      Hue.maxer_wheel_timer(Hue.decrease_chat_percentage)
    }
  }

  $("#chat_maxer")[0].addEventListener("wheel", f2)

  $("#media_maxer").on("auxclick", function (e) {
    if (e.which === 2) {
      Hue.unmaximize_media()
      Hue.set_default_tv_size()
    }
  })

  $("#chat_maxer").on("auxclick", function (e) {
    if (e.which === 2) {
      Hue.set_default_chat_size()
      Hue.show_media_items()
    }
  })
}

// If the image or tv is maximized it unmaximizes it so both are shown
Hue.unmaximize_media = function () {
  if (Hue.tv_is_maximized()) {
    Hue.maximize_tv()
  } else if (Hue.image_is_maximized()) {
    Hue.maximize_image()
  }
}

// Removes and item from a media changed array
Hue.remove_item_from_media_changed = function (type, id) {
  Hue[`${type}_changed`] = Hue[`${type}_changed`].filter((x) => x.id !== id)
}

// Tabs between media source and comment input on open pickers
// This is done because tab is disabled to avoid focus problems
Hue.do_media_picker_input_cycle = function (type) {
  if (Hue.just_tabbed) {
    return false
  }

  if (document.activeElement === $(`#${type}_source_picker_input`)[0]) {
    $(`#${type}_source_picker_input_comment`).focus()
  } else if (
    document.activeElement === $("#image_source_picker_input_comment")[0]
  ) {
    $(`#${type}_source_picker_input`).focus()
  } else {
    $(`#${type}_source_picker_input`).focus()
  }
}

// Checks how many elements (image, tv) are visible in the media section
Hue.num_media_elements_visible = function () {
  let num = 0

  $("#media_split .media_main_container").each(function () {
    if ($(this).css("display") !== "none") {
      num += 1
    }
  })

  return num
}

// Locally loads next item of its respective media changed list
Hue.media_load_next = function (type, just_check = false) {
  if (Hue[`${type}_changed`].length < 2) {
    return false
  }

  let index = Hue[`${type}_changed`].indexOf(Hue[`loaded_${type}`])

  if (index < 0) {
    return false
  }

  if (index >= Hue[`${type}_changed`].length - 1) {
    return false
  }

  if (just_check) {
    return true
  }

  let item = Hue[`${type}_changed`][index + 1]

  Hue.change({
    type: type,
    item: item,
    force: true
  })

  Hue.change_media_lock({type:type, what:true})
}

// Locally loads previous item of its respective media changed list
Hue.media_load_previous = function (type, just_check = false) {
  if (Hue[`${type}_changed`].length < 2) {
    return false
  }

  let index = Hue[`${type}_changed`].indexOf(Hue[`loaded_${type}`])

  if (index <= 0) {
    return false
  }

  if (just_check) {
    return true
  }

  let item = Hue[`${type}_changed`][index - 1]

  Hue.change({
    type: type,
    item: item,
    force: true
  })

  Hue.change_media_lock({type:type, what:true})
}

// Updates blinking media history items to reflect which is the current loaded item
Hue.update_media_history_blinks = function () {
  if (!Hue.started || !Hue.show_media_history_type) {
    return false
  }

  let type = Hue.show_media_history_type
  let loaded = Hue[`loaded_${type}`]

  $(`#${type}_history_container`)
    .find(".message")
    .each(function () {
      $(this).removeClass("blinking_2")
    })

  if (!loaded) {
    $(`#${type}_history_container`)
      .find(".message")
      .first()
      .addClass("blinking_2")
  } else {
    $(`#${type}_history_container .message_id_${loaded.message_id}`)
      .eq(0)
      .addClass("blinking_2")
  }
}

// Tries to separate a comment from a URL when using change media commands
// The proper way is to use '/image url > comment'
// But if the > is ommitted it will still try to determine what each part is
Hue.get_media_change_inline_comment = function (type, source) {
  let comment = $(`#${type}_source_picker_input_comment`).val()

  if (comment) {
    // OK
  } else if (source.includes(">")) {
    let split = source.split(">")

    source = split[0].trim()
    comment = split.slice(1).join(">").trim()
  } else {
    let split = source.split(" ")
    let url = ""
    let cm = []

    for (let sp of split) {
      if (Hue.utilz.is_url(sp)) {
        if (!url) {
          url = sp
        }
      } else {
        cm.push(sp)
      }
    }

    if (url && cm.length > 0) {
      source = url
      comment = cm.join(" ")
    }
  }

  return {
    source: source,
    comment: comment
  }
}

// Creates a media object from initial data
// For instance it gets all the 'tv_*' properties
Hue.get_media_object_from_init_data = function (type) {
  let obj = {}

  for (let key in Hue.init_data) {
    if (key.startsWith(`${type}_`)) {
      obj[key.replace(`${type}_`, "")] = Hue.init_data[key]
    }
  }

  return obj
}

// Hides the media area (image and tv)
Hue.hide_media = function () {
  Hue.stop_tv()
  $("#media").css("display", "none")
}

// Makes the media area visible or not visible
Hue.toggle_media_area = function () {
  if (Hue.tv_visible || Hue.image_visible) {
    Hue.hide_media_items()
  } else {
    Hue.show_media_items()
  }
}

// Hides media items if visible
Hue.hide_media_items = function () {
  if (Hue.tv_visible) {
    Hue.toggle_media({type:"tv", what:false})
  }

  if (Hue.image_visible) {
    Hue.toggle_media({type:"image", what:false})
  }
}

// If both are not visible it makes them visible
Hue.show_media_items = function () {
  if (!Hue.tv_visible && !Hue.image_visible) {
    Hue.toggle_media({type:"tv", what:true})
    Hue.toggle_media({type:"image", what:true})
  }
}

// Setups media modes from initial data
Hue.setup_active_media = function (data) {
  Hue.room_image_mode = data.room_image_mode
  Hue.room_tv_mode = data.room_tv_mode

  Hue.media_visibility_and_locks()
}

// Changes media visibility and locks based on current state
Hue.media_visibility_and_locks = function () {
  Hue.change_image_visibility()
  Hue.change_tv_visibility(false)

  if (Hue.connections === 1) {
    Hue.change_media_lock_icon("image")
    Hue.change_media_lock_icon("tv")
  }
}

// Resets media history filter of a certain type
Hue.reset_media_history_filter = function (type) {
  $(`#${type}_history_filter`).val("")
  $(`#${type}_history_container`).html("")
  Hue.show_media_history_type = false
}

// Shows and/or filters media history of a certain type
Hue.show_media_history = function (type, filter = false) {
  if (filter) {
    filter = filter.trim()
  }

  let sfilter = filter ? filter : ""

  $(`#${type}_history_container`).html("")
  $(`#${type}_history_filter`).val(sfilter)

  let clone = $($("#chat_area").children().get().reverse()).clone(true, true)

  clone.each(function () {
    $(this).removeAttr("id")
  })

  if (filter) {
    let lc_value = Hue.utilz.clean_string2(filter).toLowerCase()
    let words = lc_value.split(" ").filter((x) => x.trim() !== "")

    clone = clone.filter(function () {
      let type2 = $(this).data("type")

      if (type2 !== `${type}_change`) {
        return false
      }

      let text = $(this).text().toLowerCase()
      return words.some((word) => text.includes(word))
    })
  } else {
    clone = clone.filter(function () {
      let type2 = $(this).data("type")

      if (type2 !== `${type}_change`) {
        return false
      }

      return true
    })
  }

  clone.appendTo(`#${type}_history_container`)
  Hue.show_media_history_type = type
  Hue.update_media_history_blinks()
}

// Prepends media history items if the window is open
// This is used to update the windows on media changes
Hue.prepend_to_media_history = function (message_id) {
  if (!Hue.started || !Hue.show_media_history_type) {
    return false
  }

  let type = Hue.show_media_history_type
  let el = $(`#chat_area > .message_id_${message_id}`).eq(0)
  let filter = $(`#${type}_history_filter`).val()

  if (filter) {
    let lc_value = Hue.utilz.clean_string2(filter).toLowerCase()
    let words = lc_value.split(" ").filter((x) => x.trim() !== "")
    let text = el.text().toLowerCase()

    if (words.some((word) => text.includes(word))) {
      $(`#${type}_history_container`).prepend(el)
    }
  } else {
    $(`#${type}_history_container`).prepend(el)
  }
}

// Additional media menu configurations
Hue.setup_media_menu = function () {
  Hue.set_media_menu_tv_volume()

  $("#media_menu_tv_volume").on("input change", function () {
    Hue.set_tv_volume(parseFloat(this.value), true, false)
  })

  $("#media_menu_tv_volume").dblclick(function () {
    Hue.set_media_menu_tv_volume("default")
  })

  $("#media_menu_image_icon").click(function () {
    Hue.show_image_picker()
  })

  $("#media_menu_tv_icon").click(function () {
    Hue.show_tv_picker()
  })

  $("#media_menu_stop").click(function () {
    Hue.stop_media()
    Hue.hide_media_menu()
  })

  $("#media_menu_lock").click(function () {
    Hue.stop_and_lock(false)
    Hue.hide_media_menu()
  })

  $("#media_menu_stop_and_lock").click(function () {
    Hue.stop_and_lock()
    Hue.hide_media_menu()
  })

  $("#media_menu_decrease_tv_volume").click(function () {
    Hue.set_media_menu_tv_volume('decrease')
  })

  $("#media_menu_decrease_tv_volume").on("auxclick", function (e) {
    if (e.which === 2) {
      Hue.set_media_menu_tv_volume('min')
    }
  })

  $("#media_menu_increase_tv_volume").click(function () {
    Hue.set_media_menu_tv_volume('increase')
  })

  $("#media_menu_increase_tv_volume").on("auxclick", function (e) {
    if (e.which === 2) {
      Hue.set_media_menu_tv_volume('max')
    }
  })

  Hue.horizontal_separator.separate("media_menu_actions_1")
}

// Format local sources that start with slash
Hue.get_proper_media_url = function (type) {
  let source = Hue[`current_${type}`]().source

  if (source.startsWith("/")) {
    source = window.location.origin + source
  }

  return source
}

// Show the current source of a given media type
Hue.show_media_source = function (what) {
  let source = Hue.get_proper_media_url(what)
  let current = Hue[`current_${what}`]()
  let setter = current.setter
  let date = current.nice_date
  let s = Hue.media_string(what)

  if (setter !== "") {
    Hue.feedback(`${s} Source: ${source}`, {
      title: `Setter: ${setter} | ${date} | ${Hue.utilz.nice_date()}`,
    })
  } else {
    Hue.feedback(`${s} Source: ${source}`)
  }
}

// More media picker configurations
Hue.setup_media_pickers = function () {
  for (let type of Hue.utilz.media_types) {
    Hue.horizontal_separator.separate($(`#${type}_picker_options`)[0])
  }

  $("#image_picker_draw").click(function () {
    Hue.open_draw_image()
    Hue.msg_image_picker.close()
  })

  $("#image_picker_upload").click(function () {
    Hue.msg_image_picker.close()
  })

  $("#image_picker_submit").click(function () {
    Hue.image_picker_submit()
  })

  $("#tv_picker_restart").click(function () {
    Hue.needs_confirm("restart_tv", "This will restart the tv for everyone. Are you sure?")
  })

  $("#tv_picker_submit").click(function () {
    Hue.tv_picker_submit()
  })
}

// Updates the dimensions of a specified element
// It grows the element as much as it can while maintaining the aspect ratio
// This is done by making calculations with the element and parent's ratios
Hue.fix_frame = function (frame_id, test_parent_height = false) {
  let id = `#${frame_id}`
  let frame = $(id)
  let frame_ratio

  if (frame_id === "media_image_frame") {
    frame_ratio = frame[0].naturalHeight / frame[0].naturalWidth
  } else {
    frame_ratio = 0.5625
  }

  let parent = frame.parent()
  let info_height = 0
  let info = frame.parent().find(".media_info")

  if (info.length > 0) {
    info_height = info.eq(0).outerHeight(true)
  }

  let parent_width = parent.width()
  let parent_height = test_parent_height ?
    test_parent_height :
    parent.height() - info_height
  let parent_ratio = parent_height / parent_width
  let width, height

  if (parent_ratio === frame_ratio) {
    width = parent_width
    height = parent_height
  } else if (parent_ratio < frame_ratio) {
    width = parent_height / frame_ratio
    height = parent_height
  } else if (parent_ratio > frame_ratio) {
    width = parent_width
    height = parent_width * frame_ratio
  }

  if (!test_parent_height) {
    frame.width(width)
    frame.height(height)
  } else {
    return {
      width: width,
      height: height,
      parent_width: parent_width,
      parent_height: parent_height,
    }
  }
}

// Updates dimensions of the image and tv
Hue.fix_frames = function () {
  Hue.fix_visible_video_frame()
  Hue.fix_image_frame()
}

// Gets a volume number in percentage form
// Like 20 or 100
Hue.get_nice_volume = function (volume) {
  return parseInt(Math.round(volume * 100))
}

// This handles all media load
// It will attempt to load and play media taking into account the room state
// It is responsible to initiate the construction of all required media players
Hue.change = function (args = {}) {
  let def_args = {
    type: "",
    force: false,
    play: true,
    notify: true,
    current_source: false,
    item: false,
    bypass_lock: false
  }

  args = Object.assign(def_args, args)

  if (!Hue.app_focused || Hue.screen_locked) {
    return
  }

  let item

  if (args.item) {
    item = args.item
  } else if (args.current_source && Hue[`loaded_${args.type}`].source) {
    item = Hue[`loaded_${args.type}`]
  } else {
    item = Hue[`current_${args.type}`]()
  }

  if (args.type === "image") {
    if (!args.force && Hue.loaded_image.source === Hue.current_image().source) {
      Hue.loaded_image = item
      return false
    }
  } else if (args.type === "tv") {
    if (!args.force && Hue.loaded_tv.source === Hue.current_tv().source) {
      Hue.loaded_tv = item
      return false
    }
  } else {
    return false
  }

  if (args.type === "image") {
    if (!Hue.room_state.image_enabled) {
      return false
    }

    let locked = Hue.image_locked && !args.bypass_lock

    if (
      !args.item &&
      locked &&
      Hue.loaded_image.source &&
      !args.current_source
    ) {
      return false
    }

    if (Hue.room_image_mode === "disabled") {
      return false
    }

    Hue.loaded_image = item
    Hue.show_image(args.force)

    if (!args.item || args.item === Hue.current_image()) {
      $("#footer_lock_image_icon").removeClass("blinking")
    }

    if (
      Hue.background_mode === "mirror" ||
      Hue.background_mode === "mirror_tiled"
    ) {
      Hue.apply_background()
    }
  } else if (args.type === "tv") {
    if (!Hue.room_state.tv_enabled) {
      return false
    }

    let locked = Hue.tv_locked && !args.bypass_lock

    if (!args.item && locked && Hue.loaded_tv.source && !args.current_source) {
      return false
    }

    if (Hue.room_tv_mode === "disabled") {
      return false
    }

    if (!Hue.loaded_tv.source && !args.force) {
      args.play = false
    }

    if (item.type !== "video" && item.type !== "iframe") {
      if (Hue[`${item.type}_video_player`] === undefined) {
        Hue.request_media(`${item.type}_video_player`, args)
        return false
      }
    }

    Hue.loaded_tv = item

    Hue[`show_${item.type}_video`](args.play)

    if (!args.item || args.item === Hue.current_tv()) {
      $("#footer_lock_tv_icon").removeClass("blinking")
    }
  } else {
    return false
  }

  Hue.update_chat_media_feedback()
  Hue.update_media_history_blinks()
  Hue.check_media_menu_loaded_media()

  if (args.notify && item.setter !== Hue.username) {
    Hue.on_activity("media_change")
  }
}

// Check if maxers should be displayed or not
Hue.check_media_maxers = function () {
  if (Hue.room_tv_mode !== "disabled" && Hue.room_image_mode !== "disabled") {
    $(".maxer_container").css("display", "flex")
  } else {
    $(".maxer_container").css("display", "none")
  }
}

// Function that setups frame info items
Hue.start_media_info_events = function () {
  $("#media").on("click", ".media_info_username", function () {
    let username = $(this).closest(".media_info").data("item").setter
    Hue.show_profile(username)
  })

  $("#media").on("click", ".media_info_details", function () {
    z = this
    let media_info = $(this).closest(".media_info")
    let item = media_info.data("item")
    let mode = media_info.data("mode")

    Hue.open_url_menu({
      source: item.source,
      data: item,
      media_type: mode
    })
  })

  $("#media").on("auxclick", ".media_info_username", function (e) {
    if (e.which === 2) {
      Hue.process_write_whisper(
        $(this).closest(".media_info").data("item").setter
      )
    }
  })
}

// Sets a media info item with proper information and events
Hue.apply_media_info = function (element, item, mode) {
  if (!Hue.room_state[`${mode}_enabled`]) {
    return
  }

  let custom_title

  if (mode === "tv") {
    Hue.media_info_tv_data = [...arguments]
  } else if (mode === "image") {
    if (item.type === "upload") {
      custom_title = `${Hue.utilz.get_size_string(item.size)} upload`
    }

    Hue.media_info_image_data = [...arguments]
  }

  let info = ""

  if (item.comment) {
    info = Hue.remove_markdown_from_message(item.comment)
  }

  let title = custom_title || item.title || ""

  if (title) {
    if (info) {
      info += " | "
    }

    info += title
  }

  if (!info) {
    if (item.source) {
      info = item.source
    }
  }

  info = info.substring(0, Hue.media_info_max_length).trim()

  let hover_title = item.info

  let html = `
        <div class='media_info_username pointer action'>${Hue.utilz.make_html_safe(
          item.setter
        )}</div>
        <div class='media_info_details pointer action'>: ${Hue.utilz.make_html_safe(
          info
        )}</div>
    `

  $(element).html(html)
  $(element).attr("title", hover_title)
  $(element).data("otitle", hover_title)
  $(element).data("date", item.date)
  $(element).data("item", item)
  $(element).data("mode", mode)
}

// Configures media info
Hue.configure_media_info = function () {
  let media_info_display

  if (Hue.get_setting("media_info") === "custom_enabled") {
    media_info_display = "grid"
  }

  if (Hue.get_setting("media_info") === "custom_disabled") {
    media_info_display = "none"
  } else if (Hue.media_info === "enabled") {
    media_info_display = "grid"
  } else if (Hue.media_info === "disabled") {
    media_info_display = "none"
  }

  document.documentElement.style.setProperty('--media_info_display', media_info_display)

  Hue.fix_frames()
}

// Enables or disables media info
Hue.change_media_info = function (media_info) {
  if (!Hue.check_op_permission(Hue.role, "media")) {
    return false
  }

  if (media_info !== "enabled" && media_info !== "disabled") {
    Hue.feedback("Valid media info modes: enabled disabled")
    return false
  }

  if (media_info === Hue.media_info) {
    Hue.feedback(`Media info is already set to that`)
  }

  Hue.socket_emit("change_media_info", {
    media_info: media_info
  })
}

// Announces media info change and configures it
Hue.media_info_changed = function (data) {
  Hue.set_media_info(data.media_info)
  Hue.show_room_notification(
    data.username,
    `${data.username} changed media info to ${data.media_info}`
  )
}

// Media info setter
Hue.set_media_info = function (what) {
  Hue.media_info = what
  Hue.configure_media_info()
  Hue.config_admin_media_info()
}

// Toggles media visibility
Hue.toggle_media = function (args) {
  let def_args = {
    type: "",
    what: undefined, 
    save: true,
    feedback: false
  }

  args = Object.assign(def_args, args)

  let room_mode = Hue[`room_${args.type}_mode`]

  if (room_mode === "disabled") {
    if (args.feedback) {
      Hue.feedback("This media is disabled at the room level")
    }

    return false
  }

  if (args.what !== undefined) {
    if (Hue.room_state[`${args.type}_enabled`] !== args.what) {
      Hue.room_state[`${args.type}_enabled`] = args.what
    } else {
      save = false
    }
  } else {
    Hue.room_state[`${args.type}_enabled`] = !Hue.room_state[`${args.type}_enabled`]
  }

  if (Hue[`${args.type}_visible`] !== args.what) {
    Hue[`change_${args.type}_visibility`]()
  }

  if (args.save) {
    Hue.save_room_state()
  }
}

// Change the lock of some media
Hue.change_media_lock = function(args) {
  let def_args = {
    type: "",
    what: undefined,  
    feedback: false
  }

  args = Object.assign(def_args, args)

  let room_mode = Hue[`room_${args.type}_mode`]

  if (room_mode === "locked") {
    if (args.feedback) {
      Hue.feedback("This media is locked at the room level")
    }

    return false
  }
  
  if (args.what !== undefined) {
    Hue[`${args.type}_locked`] = args.what
  } else {
    Hue[`${args.type}_locked`] = !Hue[`${args.type}_locked`]
  }

  Hue.change_media_lock_icon(args.type)
}

// Toggles media locks for any type
Hue.change_media_lock_icon = function (type) {
  let room_mode = Hue[`room_${type}_mode`]

  if (room_mode === "locked" || Hue[`${type}_locked`]) {
    $(`#footer_lock_${type}_icon`).find("use").eq(0).attr("href", "#icon_locked")
    $(`#footer_lock_${type}_label`).css("display", "block")

    if (Hue[`loaded_${type}`] !== Hue[`current_${type}`]()) {
      $(`#footer_lock_${type}_icon`).addClass("blinking")
    }
  } else {
    $(`#footer_lock_${type}_icon`).find("use").eq(0).attr("href", "#icon_unlocked")
    $(`#footer_lock_${type}_icon`).removeClass("blinking")
    $(`#footer_lock_${type}_label`).css("display", "none")

    Hue.change({ type: type })
  }
}

// Changes the media layout between row and column
Hue.change_media_layout = function (mode = false) {
  if (!mode) {
    mode = Hue.room_state.media_layout
  }

  if (mode === "column") {
    $("#media_split").css("flex-direction", "column")
    $(".media_main_container").css("width", "100%")
    $(".media_main_container").css("height", "50%")
  } else if (mode === "row") {
    $("#media_split").css("flex-direction", "row")
    $(".media_main_container").css("width", "50%")
    $(".media_main_container").css("height", "100%")
  }

  Hue.apply_media_percentages()
  Hue.fix_frames()
}

// Switches between row and column media layout mode
Hue.swap_media_layout = function () {
  Hue.room_state.media_layout = Hue.room_state.media_layout === "row" ? "column" : "row"
  Hue.save_room_state()
  Hue.change_media_layout()
}

// Stop all media
Hue.stop_media = function () {
  Hue.stop_tv()
}

// Shows the swap rotate menu
Hue.show_swaprotate = function () {
  Hue.msg_info2.show(["Swap or Rotate Media", Hue.template_swaprotate()], function () {
    $("#swaprotate_swap").click(function () {
      Hue.swap_media()
      Hue.msg_info2.close()
    })

    $("#swaprotate_rotate").click(function () {
      Hue.rotate_media()
      Hue.msg_info2.close()
    })

    Hue.horizontal_separator.separate("swaprotate_container")
  })
}

// Swaps media
Hue.swap_media = function () {
  if (Hue.num_media_elements_visible() < 2) {
    return false
  }
  
  Hue.swap_display_positions()
}

// Rotates media
Hue.rotate_media = function () {
  if (Hue.num_media_elements_visible() < 2) {
    return false
  }

  Hue.swap_media_layout()
}

// Get html for media info items
Hue.get_media_info_html = function (type) {
  return `<div id='media_${type}_info_container' class='media_info_container grid_row_center'>
    <div id='media_${type}_info' class='media_info dynamic_title'></div>
    <div class='media_info_separator'>|</div>
    <div class='media_react_button action pointer' data-type='${type}'>React</div>
  </div>`
}

// Some initial media info setups
Hue.start_media_info = function () {
  $("#media_image_container").append(Hue.get_media_info_html("image"))

  $(".media_main_container").on("click", ".media_react_button", function () {
    Hue.show_reaction_picker($(this).data("type"))
  })
}

// Get proper media string
Hue.media_string = function (what) {
  if (what === "chat") {
    return "Chat"
  } else if (what === "image") {
    return "Image"
  } else if (what === "tv") {
    return "TV"
  }
}
// Setups the message board
Hue.setup_message_board = function () {
  $("#message_board_post_icon").click(function () {
    Hue.create_message_board_post()
  })

  $("#message_board_post_button").click(function () {
    Hue.submit_message_board_post()
  })

  $("#message_board_post_textarea").on("input blur", function () {
    let val = $(this)
      .val()
      .substring(0, Hue.config.max_message_board_post_length)
    $(this).val(val)
  })

  $("#message_board_container").on(
    "click",
    ".message_board_delete",
    function () {
      if (confirm("Are you sure?")) {
        let item = $(this).closest(".message_board_item")
        let id = item.data("id")

        if (id) {
          Hue.socket_emit("delete_message_board_post", { id: id })
        }
      }
    }
  )

  $("#message_board_publish").click(function () {
    Hue.submit_message_board_post()
  })
  
  Hue.get_last_message_board_post_checked()
}

// Creates and adds an item to the message board
Hue.add_post_to_message_board = function (post) {
  let item = $(`
    <div class='message_board_item modal_item'>
        <div class='message_board_username'></div>
        <div class='message_board_text dynamic_title'></div>
        <div><div class='message_board_delete action pointer inline underlined'>Delete</div></div>
    </div>`)

  item.data("id", post.id)
  item.data("date", post.date)

  let uname
  
  if (post.username) {
    let safe_uname = Hue.utilz.make_html_safe(post.username || "")
    uname = Hue.replace_markdown(`$${safe_uname}$`)
  } else {
    uname = "Unknown"
  }
  
  let username = item.find(".message_board_username").eq(0)
  username.html(`Posted By: ${uname}`)
  username.attr("title", `ID: ${post.user_id}`)

  let text = item.find(".message_board_text").eq(0)
  text.html(Hue.replace_markdown(Hue.utilz.make_html_safe(post.message), false)).urlize()

  let title = Hue.utilz.nice_date(post.date)

  if (post.id) {
    title = `${post.id.slice(-3)} | ${title}`
  }

  text.attr("title", title)
  text.data("date", post.date)
  text.data("otitle", title)

  let delet = item.find(".message_board_delete").eq(0)
  if (post.user_id === Hue.user_id) {
    delet.css("display", "inline-block")
  }

  let items = $("#message_board_container .message_board_item")
  let num_items = items.length

  if (num_items === 0) {
    $("#message_board_container").html(item)
  } else {
    $("#message_board_container").prepend(item)
  }

  if (
    $("#message_board_container").find(".message_board_item").length >
    Hue.config.max_message_board_posts
  ) {
    $("#message_board_container").find(".message_board_item").last().remove()
  }

  if (Hue.message_board_filtered) {
    Hue.do_modal_filter("message_board")
  }
}

// Fills the message board with init data
Hue.init_message_board = function (data) {
  if (data.message_board_posts.length > 0) {
    $("#message_board_container").html("")
  }

  for (let post of data.message_board_posts) {
    Hue.add_post_to_message_board(post)
  }

  Hue.check_last_message_board_post()
}

// Shows the message board
Hue.show_message_board = function (filter = false) {
  Hue.msg_message_board.show(function () {
    Hue.update_last_message_post_checked()
    Hue.check_last_message_board_post()

    if (filter) {
      $("#message_board_filter").val(filter)
      Hue.do_modal_filter()
    } else {
      $("#message_board_post_textarea").focus()
    }
  })
}

// Submits a message board post
Hue.submit_message_board_post = function () {
  if (!Hue.can_messageboard) {
    return false
  }
  
  let message = Hue.utilz.remove_multiple_empty_lines($("#message_board_post_textarea").val()).trim()

  if (!message || message.length > Hue.config.max_message_board_post_length) {
    return false
  }

  if (Hue.get_setting("confirm_message_board")) {
    if (!confirm("Are you sure you want to send a board message here?")) {
      return
    }
  }

  $("#message_board_post_textarea").val("")
  Hue.socket_emit("message_board_post", { message: message })
}

// When a new message board message arrives
Hue.on_message_board_received = function (data) {
  Hue.add_post_to_message_board(data)
  Hue.check_last_message_board_post()

  let func = function () { Hue.show_message_board() }
  let item = Hue.make_info_popup_item({icon: "pencil", message: "New message board post", on_click:func})

  if (!Hue.message_board_open) {
    Hue.show_popup(Hue.make_info_popup(func), item)
  }
}

// Checks if there are new message board posts
Hue.check_last_message_board_post = function () {
  let items = $("#message_board_container").find(".message_board_item")

  if (items.length === 0) {
    $("#header_message_board_count").text("(0)")
    return false
  }

  let date = Hue.last_message_board_post_checked[Hue.room_id]

  if (items.first().data("date") > date) {
    if (!Hue.msg_message_board.is_open()) {
      let count = 0

      $("#message_board_container")
        .find(".message_board_item")
        .each(function () {
          if ($(this).data("date") <= date) {
            return false
          }

          count += 1
        })

      $("#header_message_board_count").text(`(${count})`)
    } else {
      Hue.update_last_message_post_checked()
    }
  } else {
    $("#header_message_board_count").text("(0)")
  }
}

// Updates the message board date local storage
Hue.update_last_message_post_checked = function () {
  let item = $("#message_board_container").find(".message_board_item").first()
  let date = item.data("date")

  if (date !== Hue.last_message_board_post_checked[Hue.room_id]) {
    Hue.save_last_message_board_post_checked(date)
  }
}

// Saves the last message board post check local storage
Hue.save_last_message_board_post_checked = function (date) {
  Hue.last_message_board_post_checked[Hue.room_id] = date
  Hue.save_local_storage(
    Hue.ls_last_message_board_post_checked,
    Hue.last_message_board_post_checked
  )
}

// Checks if the user can delete posts in the message board
Hue.check_message_board_permissions = function () {
  if (Hue.check_op_permission(Hue.role, "message_board_delete")) {
    $("#message_board_container").addClass("message_board_container_admin")
  } else {
    $("#message_board_container").removeClass("message_board_container_admin")
  }

  if (Hue.can_messageboard) {
    $("#message_board_top").css("display", "block")
  } else {
    $("#message_board_top").css("display", "none")
  }
}

// Remove a post from the message board window
Hue.remove_message_board_post = function (data) {
  $("#message_board_container")
    .find(".message_board_item")
    .each(function () {
      if ($(this).data("id") === data.id) {
        $(this).remove()
        return false
      }
    })
  
  if ($(".message_board_item").length === 0) {
    $("#message_board_container").text("No Posts Yet")
  }

  Hue.check_last_message_board_post()
}

// Gets the last message board checked local storage
Hue.get_last_message_board_post_checked = function () {
  Hue.last_message_board_post_checked = Hue.get_local_storage(
    Hue.ls_last_message_board_post_checked
  )

  let changed = false

  if (!Hue.last_message_board_post_checked) {
    Hue.last_message_board_post_checked = {}
    changed = true
  }

  if (!Hue.last_message_board_post_checked[Hue.room_id]) {
    Hue.last_message_board_post_checked[Hue.room_id] = 0
    changed = true
  }

  if (changed) {
    Hue.save_last_message_board_post_checked(
      Hue.last_message_board_post_checked[Hue.room_id]
    )
  }
}

// Deletes all message board posts
Hue.clear_message_board = function () {
  if (!Hue.check_op_permission(Hue.role, "message_board_delete")) {
    return false
  }

  Hue.socket_emit("clear_message_board", {})
}

// After the message board gets cleared
Hue.on_message_board_cleared = function (data) {
  $("#message_board_container").text("No Posts Yet")
  Hue.show_room_notification(
    data.username,
    `${data.username} cleared the message board`
  )
}

// Some notification configurations
Hue.configure_notifications = function () {
  $("#notifications_configure_icon").click(function () {
    Hue.open_user_settings_category("notifications")
  })
}

// Makes popups used for events like join and part
Hue.make_info_popup = function (on_click = function () {}) {
  let autoclose_delay = Hue.get_setting("popup_notifications_close_delay")

  let popup = Hue.create_popup({
    position: "topright",
    autoclose: true,
    autoclose_delay: autoclose_delay,
    enable_titlebar: true,
    window_x: "inner_right",
    content_class: "!info_popup",
    window_width: "auto",
    on_click: on_click,
    close_on_escape: false,
  }, "info")

  popup.hue_date = Date.now()
  return popup
}

// Makes standard info popup items
Hue.make_info_popup_item = function (args = {}) {
  let def_args = {
    icon: "",
    messgage: "",
    action: true,
    push: true,
    on_click: false,
    type: "",
  }

  args = Object.assign(def_args, args)

  let classes = ""

  if (args.action) {
    classes = "pointer action"
  }

  if (args.push) {
    Hue.push_notification(args.icon, args.message, args.on_click)
  }

  let icon = ""

  if (!args.icon) {
    args.icon = "info"
  }

  if (args.icon) {
    icon = `<svg class='other_icon info_popup_icon'><use href='#icon_${args.icon}'></svg>`
  }

  return `<div class='info_popup_item ${classes}'>
  ${icon}
  <div>${Hue.utilz.make_html_safe(
    args.message
  )}</div></div>`
}

// Pushes a new notification to the notifications window
Hue.push_notification = function (icon, message, on_click = false) {
  let d = Date.now()
  let t = Hue.utilz.nice_date(d)

  let icon_html = ""

  if (icon) {
    icon_html = `<svg class='other_icon notifications_icon'><use href='#icon_${icon}'></svg>`
  }

  let message_html = `<div class='notifications_message'>${Hue.utilz.make_html_safe(
    message
  )}</div>`
  let content_classes = ""

  if (on_click) {
    content_classes = "pointer action"
  }

  let item = $(
    `<div class='notifications_item modal_item'><div class='notifications_item_content ${content_classes} dynamic_title'>${icon_html}${message_html}</div>`
  )
  let content = item.find(".notifications_item_content").eq(0)

  content.attr("title", t)
  content.data("otitle", t)
  content.data("date", d)

  if (on_click) {
    content.click(function () {
      on_click()
    })
  }

  let items = $("#notifications_container .notifications_item")
  let num_items = items.length

  if (num_items === 0) {
    $("#notifications_container").html(item)
  } else {
    $("#notifications_container").prepend(item)
  }

  if (num_items > Hue.config.notifications_crop_limit) {
    $("#notifications_container .notifications_item").last().remove()
  }
}

// Shows information about the recent info popups
Hue.show_notifications = function (filter = false) {
  Hue.msg_notifications.show(function () {
    if (filter) {
      $("#notifications_filter").val(filter)
      Hue.do_modal_filter()
    }
  })
}

// Centralized function for room changes
Hue.show_room_notification = function (username, message) {
  let f = function () {
    Hue.show_profile(username)
  }

  let item = Hue.make_info_popup_item({
    message: message,
    on_click: f,
    type: "room",
  })
  let method = Hue.get_setting("room_notifications_method")

  if (method === "popups") {
    Hue.show_popup(Hue.make_info_popup(f), item)
  } else if (method === "chat") {
    Hue.public_feedback(message, {
      username: username,
      open_profile: true,
    })
  }
}

// Centralized function to show a popup
Hue.show_popup = function (popup, html="") {
  if (html) {
    popup.set(html)
  }

  if (Hue.app_focused) {
    if (Hue.num_open_info_popups() >= Hue.config.max_info_popups) {
      return
    }

    if (popup.hue_date) {
      popup.set_title(Hue.get_timeago(popup.hue_date))
    }

    popup.show()
  } else {
    Hue.add_to_info_popups(popup)
  }
}

// Trigger stored notification popups
Hue.show_info_popups = function () {
  for (popup of Hue.info_popups) {
    Hue.show_popup(popup)
  }

  Hue.info_popups = []
}

// Add popup to info popups list
Hue.add_to_info_popups = function (popup) {
  Hue.info_popups.push(popup)

  if (Hue.info_popups.length > Hue.config.max_info_popups) {
    Hue.info_popups = Hue.info_popups.slice(-Hue.config.max_info_popups)
  }
}

// Get the number of visible info popups
Hue.num_open_info_popups = function () {
  let popups = Hue.get_popup_instances()
  let num = 0

  for (let popup of popups) {
    if (popup.hue_type === "info" && popup.is_open()) {
      num += 1
    }
  }

  return num
}
// Show the Help window
Hue.show_help = function () {
  let help = Hue.template_help()
  Hue.msg_info2.show(["Help", help], function () {
    $('#help_commands').click(function () {
      Hue.show_commands()
    })
  })
}

// Copies a string to the clipboard
Hue.copy_string = function (s) {
  let textareaEl = document.createElement("textarea")

  document.body.appendChild(textareaEl)

  textareaEl.value = s
  textareaEl.select()

  document.execCommand("copy")
  document.body.removeChild(textareaEl)
}

// Feedback that an error occurred
Hue.error_occurred = function () {
  Hue.feedback("An error occurred")
}

// Wrapper to show a confirmation dialog before running a function
Hue.needs_confirm = function (func, s = false) {
  if (!s) {
    s = "Are you sure?"
  }

  if (confirm(s)) {
    Hue[func]()
  }
}

// Wrapper to show a confirmation dialog before running a function
// This one takes a full function and not just the name
Hue.needs_confirm_2 = function (func, s = false) {
  if (!s) {
    s = "Are you sure?"
  }

  if (confirm(s)) {
    func()
  }
}

// Prints an informational console message
Hue.show_console_message = function () {
  let s =
    "🤔 Want to work with us? It's pretty much 99.99% risks, some negligible fraction AI, a couple bureaucracies to keep people minimally pissed off, and a whole lot of creativity."
  let style = "font-size:1.4rem"

  console.info(`%c${s}`, style)
}

// Dynamically generate a favicon
Hue.generate_favicon = function (mode) {
  let color
  
  if (mode === -1) {
    color = "#808080"
  } else if (mode === 0 || mode === 1) {
    color = "#C06DCF"
  } else if (mode === 2) {
    color = "#DD4A66"
  } else {
    return
  }

  let canvas = document.createElement("canvas")

  canvas.height = 256
  canvas.width = 256

  let context = canvas.getContext("2d")
  let center = canvas.height / 2
  let side, side2

  if (mode === -1 || mode === 0) {
    side = 112
    side2 = 114
  } else {
    side = 192
    side2 = 194
  }

  context.fillStyle = "rgb(16,16,16)"
  context.fillRect(center - (side2 / 2), center - (side2 / 2), side2, side2)
  context.fillStyle = color
  context.fillRect(center - (side / 2), center - (side / 2), side, side)

  let link = document.querySelector("link[rel*='icon']") || document.createElement('link')

  link.type = 'image/x-icon'
  link.rel = 'shortcut icon'
  link.href = canvas.toDataURL()

  document.getElementsByTagName('head')[0].appendChild(link)
  Hue.favicon_mode = mode
}

// Apply favicon mode if necesssary
Hue.check_favicon = function (mode=undefined) {
  if (mode !== undefined) {
    if (mode > Hue.favicon_mode) {
      Hue.generate_favicon(mode)
    }
  } else {
    if (Hue.alert_mode !== Hue.favicon_mode) {
      Hue.generate_favicon(Hue.alert_mode)
    }
  }
}

// Centralized console info printer
Hue.loginfo = function (message, style="") {
  console.info(`🤡 %c(${Hue.utilz.nice_date(Date.now(), "log")}) %c${message}`, "color:blue", style)
}

// Centralized function to return a chat icon svg
Hue.get_chat_icon = function (name) {
  return `<svg class='chat_icon'><use href='#icon_${name}'></svg>`
}

// Centralized function to return an icon
Hue.get_icon = function (name, cls="") {
  return `<svg class='other_icon ${cls}'><use href='#icon_${name}'></svg>`
}

// Setups maxers
Hue.setup_maxers = function () {
  $(".maxer").attr("title", "Click or Shift+Wheel")
}
// Checks if an op can perform an action
Hue.check_op_permission = function (role, permission) {
  if (role === "admin") {
    return true
  }

  if (!role.startsWith("op")) {
    return false
  }

  return Hue[`${role}_permissions`][permission]
}

// Changes a specified permission to a specified voice
Hue.change_voice_permission = function (vtype, ptype, what) {
  if (!Hue.check_op_permission(Hue.role, "voice_permissions")) {
    return false
  }

  let p = Hue[`${vtype}_permissions`]

  if (!p) {
    return false
  }

  if (what !== true && what !== false) {
    return false
  }

  if (p[ptype] === what) {
    Hue.feedback(`That permission is already set to that`)
    return false
  }

  Hue.socket_emit("change_voice_permission", {
    vtype: vtype,
    ptype: ptype,
    what: what,
  })
}

// Changes a specified permission to a specified op
Hue.change_op_permission = function (optype, ptype, what) {
  if (Hue.role !== "admin") {
    return false
  }

  let p = Hue[`${optype}_permissions`]

  if (!p) {
    return false
  }

  if (what !== true && what !== false) {
    return false
  }

  if (p[ptype] === what) {
    Hue.feedback(`That permission is already set to that`)
    return false
  }

  Hue.socket_emit("change_op_permission", {
    optype: optype,
    ptype: ptype,
    what: what,
  })
}

// Announces voice permission changes
Hue.announce_voice_permission_change = function (data) {
  let s = `${data.username} set ${data.vtype}.${data.ptype} to ${data.what}`

  Hue[`${data.vtype}_permissions`][data.ptype] = data.what
  Hue.show_room_notification(data.username, s)
  Hue.check_media_permissions()
  Hue.config_admin_permission_checkboxes()
  Hue.check_message_board_permissions()
}

// Announces op permission changes
Hue.announce_op_permission_change = function (data) {
  let s = `${data.username} set ${data.optype}.${data.ptype} to ${data.what}`

  Hue[`${data.optype}_permissions`][data.ptype] = data.what
  Hue.show_room_notification(data.username, s)
  Hue.config_room_menu()
  Hue.check_message_board_permissions()
}

// Handle the voice permission command
Hue.change_voice_permission_command = function (arg) {
  let split = arg.split(" ")

  if (split.length !== 3) {
    return false
  }

  let num = split[0]
  let type = split[1]
  let value = split[2]
  let ptype = `voice_${num}_${type}_permission`

  if (Hue[ptype] === undefined) {
    Hue.feedback("Invalid format")
    return false
  }

  if (value === "true" || value === "false") {
    value = JSON.parse(value)
  } else {
    Hue.feedback("Invalid value")
    return false
  }

  Hue.change_voice_permission(ptype, value)
}

// Setups permissions from initial data
Hue.start_permissions = function (data) {
  Hue.voice_1_permissions = data.voice_1_permissions
  Hue.voice_2_permissions = data.voice_2_permissions
  Hue.voice_3_permissions = data.voice_3_permissions
  Hue.voice_4_permissions = data.voice_4_permissions

  Hue.op_1_permissions = data.op_1_permissions
  Hue.op_2_permissions = data.op_2_permissions
  Hue.op_3_permissions = data.op_3_permissions
  Hue.op_4_permissions = data.op_4_permissions
}

// Setups variables that determine if a user has permission to use certain media
Hue.check_media_permissions = function () {
  Hue.can_chat = Hue.check_media_permission(Hue.role, "chat")
  Hue.can_image =
    Hue.room_image_mode === "enabled" &&
    Hue.check_media_permission(Hue.role, "image")

  Hue.can_tv =
    Hue.room_tv_mode === "enabled" && Hue.check_media_permission(Hue.role, "tv")

  Hue.can_messageboard = Hue.check_media_permission(Hue.role, "messageboard")

  Hue.setup_footer_icons()
}

// Checks whether a user can use a specified media
Hue.check_media_permission = function (role = false, type = false) {
  if (Hue.is_admin_or_op(role)) {
    return true
  }

  if (role && type) {
    if (Hue[`${role}_permissions`][type]) {
      return true
    }
  }

  return false
}

// Loads YouTube script or creates players
Hue.load_youtube = async function (what = "") {
  if (Hue.youtube_loaded) {
    if (
      Hue.youtube_video_player_requested &&
      Hue.youtube_video_player === undefined
    ) {
      Hue.create_youtube_video_player()
    }

    return false
  }

  if (Hue.youtube_loading) {
    return false
  }

  Hue.youtube_loading = true

  await Hue.load_script("https://www.youtube.com/iframe_api")

  Hue.youtube_loaded = true
}

// Create tv YouTube player
Hue.create_youtube_video_player = function () {
  Hue.youtube_video_player_requested = false

  let html = "<div id='media_youtube_video' class='video_frame'></div>"
  $("#media_youtube_video_container").html(html)
  Hue.add_media_info("media_youtube_video_container")

  Hue.yt_video_player = new YT.Player("media_youtube_video", {
    events: {
      onReady: Hue.on_youtube_video_player_ready,
    },
    playerVars: {
      iv_load_policy: 3,
      rel: 0,
      width: 640,
      height: 360,
      autoplay: 0,
    },
  })
}

// This gets executed when the YouTube iframe API is ready
onYouTubeIframeAPIReady = function () {
  if (Hue.youtube_video_player_requested) {
    Hue.create_youtube_video_player()
  }
}

// This gets executed when the tv YouTube player is ready
Hue.on_youtube_video_player_ready = function () {
  this.clear_activity_bar_items
  Hue.youtube_video_player = Hue.yt_video_player

  Hue.youtube_video_player.addEventListener("onStateChange", function (e) {
    if (e.data === 5) {
      if (Hue.youtube_video_play_on_queue) {
        Hue.youtube_video_player.playVideo()
      }
    }
  })

  if (Hue.youtube_video_player_request) {
    Hue.change(Hue.youtube_video_player_request)
    Hue.youtube_video_player_request = false
  }
}

// Loads the Soundcloud script and creates players
Hue.start_soundcloud = async function () {
  if (Hue.soundcloud_loaded) {
    if (
      Hue.soundcloud_video_player_requested &&
      Hue.soundcloud_video_player === undefined
    ) {
      Hue.create_soundcloud_video_player()
    }
  }

  if (Hue.soundcloud_loading) {
    return false
  }

  Hue.soundcloud_loading = true

  await Hue.load_script("https://w.soundcloud.com/player/api.js")

  Hue.soundcloud_loaded = true

  if (Hue.soundcloud_video_player_requested) {
    Hue.create_soundcloud_video_player()
  }
}

// Creates the tv Soundcloud player
Hue.create_soundcloud_video_player = function () {
  Hue.soundcloud_video_player_requested = false

  try {
    let src =
      "https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/301986536"

    $("#media_soundcloud_video_container")
      .html(`<iframe width="640px" height="360px"
        id='media_soundcloud_video' class='video_frame' src='${src}'></iframe>`)

    Hue.add_media_info("media_soundcloud_video_container")

    let _soundcloud_video_player = SC.Widget("media_soundcloud_video")

    _soundcloud_video_player.bind(SC.Widget.Events.READY, function () {
      Hue.soundcloud_video_player = _soundcloud_video_player

      if (Hue.soundcloud_video_player_request) {
        Hue.change(Hue.soundcloud_video_player_request)
        Hue.soundcloud_video_player_request = false
      }
    })
  } catch (err) {
    console.error("Soundcloud failed to load")
  }
}

// Centralized function to request media player creation
// For instance, if there's a YouTube tv change,
// if the YouTube player is not created, this function gets triggered
// Then the respective script gets loaded if it's not loaded yet,
// and the player gets created
// A change event is called after player creation
Hue.request_media = function (player, args) {
  Hue[`${player}_requested`] = true
  Hue[`${player}_request`] = args

  if (player === "youtube_video_player") {
    Hue.load_youtube()
  } else if (player === "twitch_video_player") {
    Hue.start_twitch()
  } else if (player === "soundcloud_video_player") {
    Hue.start_soundcloud()
  }
}

// Function to add a frame info after creating a player
Hue.add_media_info = function (container_id) {
  $(`#${container_id}`).append(Hue.get_media_info_html("tv"))
}

// Loads Twitch script and creates player
Hue.start_twitch = async function () {
  if (Hue.twitch_loaded) {
    if (Hue.twitch_video_player_requested && Hue.twitch_video_player === undefined) {
      Hue.create_twitch_video_player()
    }

    return false
  }

  if (Hue.twitch_loading) {
    return false
  }

  Hue.twitch_loading = true

  await Hue.load_script("https://player.twitch.tv/js/embed/v1.js")

  Hue.twitch_loaded = true

  if (Hue.twitch_video_player_requested) {
    Hue.create_twitch_video_player()
  }
}

// Creates the tv Twitch player
Hue.create_twitch_video_player = function () {
  Hue.twitch_video_player_requested = false

  let c = Hue.current_tv()
  let channel = "dummy"

  if (c.type === "twitch") {
    channel = Hue.utilz.get_twitch_id(c.source)[1]
  }

  try {
    let twch_video_player = new Twitch.Player("media_twitch_video_container", {
      width: 640,
      height: 360,
      autoplay: false,
      channel: channel
    })

    twch_video_player.addEventListener(Twitch.Player.READY, () => {
      Hue.twitch_video_player = twch_video_player

      let iframe = $("#media_twitch_video_container").find("iframe").eq(0)
      iframe.attr("id", "media_twitch_video").addClass("video_frame")
      Hue.add_media_info("media_twitch_video_container")

      if (Hue.twitch_video_player_request) {
        Hue.change(Hue.twitch_video_player_request)
        Hue.twitch_video_player_request = false
      }
    })
  } catch (err) {
    console.error("Twitch failed to load")
  }
}
// Setup reactions
Hue.setup_reactions = function () {
  $("#reaction_picker").on("click", ".reaction_icon", function () {
    Hue.send_reaction($(this).data("kind"), Hue.reaction_target)
    Hue.msg_reaction_picker.close()
  })
}

// Sends a reaction to the chat
Hue.send_reaction = function (reaction_type, reaction_target) {
  if (!reaction_type || !reaction_target) {
    return false
  }

  if (!Hue.can_chat) {
    Hue.feedback("You don't have permission to chat")
    return false
  }

  if (!Hue.reaction_types.includes(reaction_type)) {
    return false
  }

  let reaction_source = ""

  if (reaction_target !== "chat") {
    reaction_source = Hue[`loaded_${reaction_target}`].source
  }

  Hue.socket_emit("send_reaction", { 
    reaction_type: reaction_type, 
    reaction_target: reaction_target,
    reaction_source: reaction_source
  })
}

// Shows a message depending on the reaction type
Hue.show_reaction = function (data, date = false) {
  if (Hue.user_is_ignored(data.username)) {
    return false
  }
  
  let d

  if (date) {
    d = date
  } else {
    d = Date.now()
  }

  let icon
  let message

  if (data.reaction_type === "like") {
    icon = Hue.get_chat_icon("thumbs-up")
    message = `likes this`
  } else if (data.reaction_type === "love") {
    icon = Hue.get_chat_icon("heart")
    message = `loves this`
  } else if (data.reaction_type === "happy") {
    icon = Hue.get_chat_icon("happy")
    message = `is feeling happy`
  } else if (data.reaction_type === "meh") {
    icon = Hue.get_chat_icon("meh")
    message = `is feeling meh`
  } else if (data.reaction_type === "sad") {
    icon = Hue.get_chat_icon("sad")
    message = `is feeling sad`
  } else if (data.reaction_type === "dislike") {
    icon = Hue.get_chat_icon("thumbs-down")
    message = `dislikes this`
  } else {
    return false
  }

  if (data.reaction_target === "chat") {
    Hue.update_chat({
      id: data.id,
      brk: icon,
      message: message,
      username: data.username,
      prof_image: data.profile_image,
      third_person: true,
      date: d,
    })
  } else {
    let html = `<div class='flex_row_center'>${icon}&nbsp;${Hue.utilz.make_html_safe(data.username)} ${message}</div>`
    if (data.reaction_target === "image") {
      if (!Hue.image_visible) {
        return false
      }

      if (Hue.loaded_image.source !== data.reaction_source) {
        return false
      }      

      $("#media_image_reactions").css("display", "block")
      $("#media_image_reactions").append(html)
      Hue.media_image_reactions_timer()
    } else if (data.reaction_target === "tv") {
      if (!Hue.tv_visible) {
        return false
      }

      if (Hue.loaded_tv.source !== data.reaction_source) {
        return false
      }

      $("#media_tv_reactions").css("display", "block")
      $("#media_tv_reactions").append(html)
      Hue.media_tv_reactions_timer()
    }
  }
}

// Show the reaction picker
Hue.show_reaction_picker = function (target) {
  Hue.reaction_target = target
  Hue.msg_reaction_picker.set_title(`React to ${Hue.media_string(target)}`)
  Hue.msg_reaction_picker.show()
}
// Gets the room state localStorage object
Hue.get_room_state = function () {
  let room_state_all = Hue.get_local_storage(Hue.ls_room_state)

  if (room_state_all === null) {
    room_state_all = {}
  }

  Hue.room_state = room_state_all[Hue.room_id]

  if (Hue.room_state === undefined) {
    Hue.room_state = {}
  }

  let changed = false

  let settings = [
    "image_enabled",
    "tv_enabled",
    "tv_volume",
    "chat_searches",
    "last_highlight_date",
    "chat_display_percentage",
    "tv_display_percentage",
    "tv_display_position",
    "media_layout"
  ]

  for (let setting of settings) {
    if (Hue.room_state[setting] === undefined) {
      Hue.room_state[setting] = Hue.config[`room_state_default_${setting}`]
      changed = true
    }
  }

  if (changed) {
    Hue.save_room_state()
  }
}

// Saves the room state localStorage object
Hue.save_room_state = function () {
  let room_state_all = Hue.get_local_storage(Hue.ls_room_state)

  if (room_state_all === null) {
    room_state_all = {}
  }

  room_state_all[Hue.room_id] = Hue.room_state

  Hue.save_local_storage(Hue.ls_room_state, room_state_all)
}

// Shows a window with room details
Hue.show_room_status = function () {
  let name = Hue.room_name
  let topic = Hue.topic
  let privacy = Hue.is_public ? "Public" : "Private"
  let log = Hue.log_enabled ? "Enabled" : "Disabled"

  Hue.msg_room_status.show(function () {
    $("#room_status_name").text(name)
    $("#room_status_topic").text(topic)
    $("#room_status_privacy").text(privacy)
    $("#room_status_log").text(log)
  })
}

// Show whether a room is public or private
Hue.show_public = function () {
  if (Hue.is_public) {
    Hue.feedback("This room is public")
  } else {
    Hue.feedback("This room is private")
  }
}

// Show the room name
Hue.show_room = function () {
  Hue.feedback(`Room: ${Hue.room_name}`)
}

// Change the name of the room
Hue.change_room_name = function (arg) {
  if (!Hue.check_op_permission(Hue.role, "name")) {
    return false
  }

  arg = Hue.utilz.clean_string2(
    arg.substring(0, Hue.config.max_room_name_length)
  )

  if (arg === Hue.room_name) {
    Hue.feedback("That's already the room name")
    return
  }

  if (arg.length > 0) {
    Hue.socket_emit("change_room_name", { name: arg })
  }
}

// Put the room name in the input to be edited
Hue.room_name_edit = function () {
  Hue.change_input(`/roomname ${Hue.room_name}`)
}

// Returns proper default topic
Hue.get_unset_topic = function () {
  if (Hue.is_admin_or_op()) {
    return Hue.config.default_topic_admin
  } else {
    return Hue.config.default_topic
  }
}

// Gets the topic
Hue.get_topic = function () {
  if (Hue.topic) {
    return Hue.topic
  } else {
    return Hue.get_unset_topic()
  }
}

// Shows the topic
Hue.show_topic = function () {
  if (Hue.topic) {
    if (Hue.topic_setter !== "") {
      Hue.feedback(`Topic: ${Hue.topic}`, {
        title: `Setter: ${Hue.topic_setter} | ${
          Hue.topic_date
        } | ${Hue.utilz.nice_date()}`,
      })
    } else {
      Hue.feedback(`Topic: ${Hue.topic}`)
    }
  } else {
    Hue.feedback(`Topic: ${Hue.get_unset_topic()}`)
  }
}

// Clears the chat and resets media change state
// Re-makes initial media setups for current media
Hue.clear_room = function () {
  Hue.clear_chat()

  let first_image = (Hue.image_changed = Hue.image_changed.slice(-1)[0])
  let first_tv = (Hue.tv_changed = Hue.tv_changed.slice(-1)[0])

  Hue.loaded_image = {}
  Hue.loaded_tv = {}

  Hue.image_changed = []
  Hue.tv_changed = []

  Hue.setup_image("show", first_image)
  Hue.setup_tv("show", first_tv)

  Hue.change({ type: "image" })
  Hue.change({ type: "tv" })
}

// Announces room name changes
Hue.announce_room_name_change = function (data) {
  if (data.name !== Hue.room_name) {
    Hue.show_room_notification(
      data.username,
      `${data.username} changed the room name`
    )
    Hue.set_room_name(data.name)
    Hue.update_title()
    Hue.update_input_placeholder()
  }

  if (Hue.room_status_open) {
    Hue.show_room_status()
  }
}

// Room name setter
Hue.set_room_name = function (name) {
  Hue.room_name = name
  Hue.config_admin_room_name()
}

// Changes the topic
Hue.change_topic = function (dtopic) {
  if (!Hue.check_op_permission(Hue.role, "topic")) {
    return false
  }

  dtopic = Hue.utilz.clean_string2(
    dtopic.substring(0, Hue.config.max_topic_length)
  )

  if (dtopic.length > 0) {
    if (Hue.topic !== dtopic) {
      Hue.socket_emit("change_topic", { topic: dtopic })
    } else {
      Hue.feedback("Topic is already set to that")
    }
  }
}

// Appends the topic with new text
Hue.topicadd = function (arg) {
  if (!Hue.check_op_permission(Hue.role, "topic")) {
    return false
  }

  arg = Hue.utilz.clean_string2(arg)

  if (arg.length === 0) {
    return
  }

  let ntopic = Hue.topic + Hue.config.topic_separator + arg

  if (ntopic.length > Hue.config.max_topic_length) {
    Hue.feedback("There is no more room to add that to the topic")
    return
  }

  Hue.change_topic(ntopic)
}

// Removes topic sections
Hue.topictrim = function (n) {
  if (!Hue.check_op_permission(Hue.role, "topic")) {
    return false
  }

  let split = Hue.topic.split(Hue.config.topic_separator)

  if (split.length > 1) {
    if (!isNaN(n)) {
      if (n < 1) {
        return false
      }

      if (n > split.length - 1) {
        n = split.length - 1
      }
    } else {
      Hue.feedback("Argument must be a number")
      return false
    }

    if (split.length > 1) {
      let t = split.slice(0, -n).join(Hue.config.topic_separator)

      if (t.length > 0) {
        Hue.change_topic(t)
      }
    }
  } else {
    Hue.feedback("Nothing to trim")
  }
}

// Prepends the topic with new text
Hue.topicstart = function (arg) {
  if (!Hue.check_op_permission(Hue.role, "topic")) {
    return false
  }

  arg = Hue.utilz.clean_string2(arg)

  if (arg.length === 0) {
    return
  }

  let ntopic = arg + Hue.config.topic_separator + Hue.topic

  if (ntopic.length > Hue.config.max_topic_length) {
    Hue.feedback("There is no more room to add that to the topic")
    return
  }

  Hue.change_topic(ntopic)
}

// Removes topic sections from the start
Hue.topictrimstart = function (n) {
  if (!Hue.check_op_permission(Hue.role, "topic")) {
    return false
  }

  let split = Hue.topic.split(Hue.config.topic_separator)

  if (split.length > 1) {
    if (!isNaN(n)) {
      if (n < 1) {
        return false
      }

      if (n > split.length - 1) {
        n = split.length - 1
      }
    } else {
      Hue.feedback("Argument must be a number")
      return false
    }

    if (split.length > 1) {
      let t = split.slice(n, split.length).join(Hue.config.topic_separator)

      if (t.length > 0) {
        Hue.change_topic(t)
      }
    }
  } else {
    Hue.feedback("Nothing to trim")
  }
}

// Changes the input with the topic to be edited
Hue.topicedit = function () {
  Hue.change_input(`/topic ${Hue.topic}`)
}

// Announces topic changes
Hue.announce_topic_change = function (data) {
  if (data.topic !== Hue.topic) {
    Hue.show_room_notification(
      data.topic_setter,
      `${data.topic_setter} changed the topic`
    )
    Hue.set_topic_info(data)
    Hue.update_title()
  }

  if (Hue.room_status_open) {
    Hue.show_room_status()
  }
}

// Sets topic data with received data
Hue.set_topic_info = function (data) {
  if (!data) {
    data = {}

    data.topic = ""
    data.topic_setter = ""
    data.topic_date = ""
  }

  Hue.topic = data.topic
  Hue.topic_setter = data.topic_setter
  Hue.topic_date = Hue.utilz.nice_date(data.topic_date)
  Hue.config_admin_topic()
}

// Changes the room privacy to public or private
Hue.change_privacy = function (what) {
  if (!Hue.check_op_permission(Hue.role, "privacy")) {
    return false
  }

  if (Hue.is_public === what) {
    if (what) {
      Hue.feedback("Room is already public")
    } else {
      Hue.feedback("Room is already private")
    }

    return false
  }

  Hue.socket_emit("change_privacy", { what: what })
}

// Announces a privacy change
Hue.announce_privacy_change = function (data) {
  Hue.set_privacy(data.what)

  let s

  if (Hue.is_public) {
    s = `${data.username} made the room public`
    s += ". The room will appear in the public room list"
  } else {
    s = `${data.username} made the room private`
    s += ". The room won't appear in the public room list"
  }

  Hue.show_room_notification(data.username, s)

  if (Hue.room_status_open) {
    Hue.show_room_status()
  }
}

// Privacy setter
Hue.set_privacy = function (what) {
  Hue.is_public = what
  Hue.config_admin_privacy()
}

// Log enabled setter
Hue.set_log_enabled = function (what) {
  Hue.log_enabled = what
  Hue.config_admin_log_enabled()
}

// Enables or disables the log
Hue.change_log = function (log) {
  if (!Hue.check_op_permission(Hue.role, "log")) {
    return false
  }

  if (log === Hue.log_enabled) {
    if (log) {
      Hue.feedback("Log is already enabled")
    } else {
      Hue.feedback("Log is already disabled")
    }
  }

  Hue.socket_emit("change_log", { log: log })
}

// Clears the log
Hue.clear_log = function (type = "all", id = false) {
  if (!Hue.check_op_permission(Hue.role, "log")) {
    return false
  }

  if (!Hue.utilz.clear_log_types.includes(type)) {
    Hue.feedback(
      `Invalid type. Available types are: ${Hue.utilz.clear_log_types.join(
        ", "
      )}`
    )
    return false
  }

  if (type === "above" || type === "below") {
    if (!id) {
      Hue.feedback("A message ID needs to be provided for this operation")
      return false
    }
  }

  Hue.socket_emit("clear_log", { type: type, id: id })
}

// Announces log changes
Hue.announce_log_change = function (data) {
  if (!data.log) {
    Hue.clear_room()
  }

  let s

  if (data.log) {
    s = `${data.username} enabled the log`
  } else {
    s = `${data.username} cleared and disabled the log`
  }

  Hue.set_log_enabled(data.log)
  Hue.show_room_notification(data.username, s)

  if (Hue.room_status_open) {
    Hue.show_room_status()
  }
}

// Announces that the log was cleared
Hue.announce_log_cleared = function (data) {
  if (data.type === "all") {
    Hue.clear_room()
  } else if (data.type === "above" || data.type === "below") {
    Hue.remove_messages_after_id(data.id, data.type)
  }

  Hue.show_room_notification(data.username, `${data.username} cleared the log`)
}

// Shows the log status
Hue.show_log = function () {
  if (Hue.log_enabled) {
    Hue.feedback("Log is enabled")
  } else {
    Hue.feedback("Log is disabled")
  }
}

// Requests the admin activity list from the server
Hue.request_admin_activity = function (filter = "") {
  if (!Hue.is_admin_or_op(Hue.role)) {
    Hue.not_an_op()
    return false
  }

  Hue.admin_activity_filter_string = filter

  Hue.socket_emit("get_admin_activity", {})
}

// Shows the admin activity list
Hue.show_admin_activity = function (messages) {
  $("#admin_activity_container").html("")

  Hue.msg_admin_activity.show(function () {
    for (let message of messages) {
      let nice_date = Hue.utilz.nice_date(message.date)

      let el = $(`
            <div class='modal_item admin_activity_item dynamic_title' title='${nice_date}'>
                <div class='admin_activity_message'></div>
                <div class='admin_activity_date'></div>
            </div>`)

      el.find(".admin_activity_message")
        .eq(0)
        .text(`${message.data.username} ${message.data.content}`)
      el.find(".admin_activity_date").eq(0).text(nice_date)

      el.data("date", message.date)
      el.data("otitle", nice_date)

      $("#admin_activity_container").prepend(el)
    }

    $("#admin_activity_filter").val(Hue.admin_activity_filter_string)

    Hue.do_modal_filter()
  })
}

// Requests the admin list
Hue.request_admin_list = function () {
  if (!Hue.is_admin_or_op(Hue.role)) {
    Hue.not_an_op()
    return false
  }

  Hue.socket_emit("get_admin_list", {})
}

// Shows the admin list
Hue.show_admin_list = function (data) {
  let s = $("<div id='admin_list_container' class='grid_column_center'></div>")

  data.list.sort(Hue.compare_userlist)

  for (let user of data.list) {
    let hs =
      "<div class='flex_row_center'><div class='admin_list_username'></div>&nbsp;&nbsp;<div class='admin_list_role'></div></div>"
    let h = $(`<div class='admin_list_item pointer action'>${hs}</div>`)

    h.find(".admin_list_username").eq(0).text(user.username)
    h.find(".admin_list_role")
      .eq(0)
      .text(`(${Hue.get_pretty_role_name(user.role)})`)

    h.click(function () {
      Hue.show_profile(user.username)
    })

    s.append(h)
  }

  Hue.msg_info2.show([`Admin List (${data.list.length})`, s[0]], function () {
    Hue.admin_list_open = true
  })
}

// Requests the ban list
Hue.request_ban_list = function () {
  if (!Hue.is_admin_or_op(Hue.role)) {
    Hue.not_an_op()
    return false
  }

  Hue.socket_emit("get_ban_list", {})
}

// Shows the ban list
Hue.show_ban_list = function (data) {
  let s = $("<div id='ban_list_container' class='grid_column_center'></div>")

  for (let user of data.list) {
    let hs =
      "<div class='flex_row_center'><div class='ban_list_username' title='Click To Unban'></div></div>"
    let h = $(`<div class='ban_list_item pointer action'>${hs}</div>`)

    h.find(".ban_list_username").eq(0).text(user.username)

    h.click(function () {
      if (confirm(`Are you sure you want to unban ${user.username}`)) {
        Hue.unban(user.username)
      }
    })

    s.append(h)
  }

  Hue.msg_info2.show([`Ban List (${data.list.length})`, s[0]], function () {
    Hue.ban_list_open = true
  })
}

// Requests the access log
Hue.request_access_log = function (filter = "") {
  if (!Hue.is_admin_or_op(Hue.role)) {
    Hue.not_an_op()
    return false
  }

  Hue.access_log_filter_string = filter

  Hue.socket_emit("get_access_log", {})
}

// Shows the access log
Hue.show_access_log = function (messages) {
  $("#access_log_container").html("")

  Hue.msg_access_log.show(function () {
    for (let message of messages) {
      let nice_date = Hue.utilz.nice_date(message.date)

      let el = $(`
            <div class='modal_item access_log_item dynamic_title' title='${nice_date}'>
                <div class='access_log_message'></div>
                <div class='access_log_date'></div>
            </div>`)

      el.find(".access_log_message")
        .eq(0)
        .text(`${message.data.username} ${message.data.content}`)
      el.find(".access_log_date").eq(0).text(nice_date)

      el.data("date", message.date)
      el.data("otitle", nice_date)

      $("#access_log_container").prepend(el)
    }

    $("#access_log_filter").val(Hue.access_log_filter_string)

    Hue.do_modal_filter()
  })
}

// Shows a window with the topic
Hue.show_topic_window = function () {
  let edit_html = ""

  if (Hue.check_op_permission(Hue.role, "topic")) {
    edit_html =
      "<div><div id='topic_window_edit' class='pointer action inline'>Edit</div></div>"
  }

  let h = $(`
    <div id='topic_window'>
        <div id='topic_window_text'></div>
        ${edit_html}
    </div>`)

  let text = h.find("#topic_window_text").eq(0)
  text.text(Hue.topic || "No topic yet")

  if (edit_html) {
    let edit = h.find("#topic_window_edit").eq(0)

    edit.click(function () {
      Hue.open_room_menu_section("room_config")
    })
  }

  Hue.msg_info2.show(["Topic", h[0]])
}

// Opens the room menu and opens a specific section
Hue.open_room_menu_section = function (name) {
  Hue.msg_room_menu.show(function () {
    setTimeout(function () {
      $(`#room_menu_toggle_${name}`).click()
    }, 200)
  })
}
// Builds the permission sections of the room menu through their template
Hue.make_room_menu_voice_permissions_container = function () {
  let s = ""

  for (let i = 1; i <= Hue.vtypes.length; i++) {
    s += Hue.template_room_menu_voice_permissions_container({ number: i })
  }

  return s
}

// Builds the op permission sections of the room menu through their template
Hue.make_room_menu_op_permissions_container = function () {
  let s = ""

  for (let i = 1; i <= Hue.optypes.length; i++) {
    s += Hue.template_room_menu_op_permissions_container({ number: i })
  }

  return s
}

// Setups change events for the room menu widgets
Hue.setup_room_menu = function () {
  Hue.setup_togglers("room_menu")
  Hue.setup_togglers("room_menu_voice_permissions")
  Hue.setup_togglers("room_menu_op_permissions")

  $(".admin_voice_permissions_checkbox").each(function () {
    $(this).change(function () {
      let what = $(this).prop("checked")

      Hue.change_voice_permission(
        $(this).data("vtype"),
        $(this).data("ptype"),
        what
      )
    })
  })

  $(".admin_op_permissions_checkbox").each(function () {
    $(this).change(function () {
      let what = $(this).prop("checked")

      Hue.change_op_permission(
        $(this).data("optype"),
        $(this).data("ptype"),
        what
      )
    })
  })

  $("#admin_enable_image").change(function () {
    let what = $("#admin_enable_image option:selected").val()

    Hue.change_room_image_mode(what)
  })

  $("#admin_enable_tv").change(function () {
    let what = $("#admin_enable_tv option:selected").val()

    Hue.change_room_tv_mode(what)
  })

  $("#admin_privacy").change(function () {
    let what = JSON.parse($("#admin_privacy option:selected").val())

    Hue.change_privacy(what)
  })

  $("#admin_log").change(function () {
    let what = JSON.parse($("#admin_log option:selected").val())

    Hue.change_log(what)
  })

  $("#admin_theme_mode_select").change(function () {
    let what = $("#admin_theme_mode_select option:selected").val()

    Hue.change_theme_mode(what)
  })

  $("#admin_theme").change(function () {
    Hue.change_theme($(this).val())
  })

  $("#admin_background_mode_select").change(function () {
    let what = $("#admin_background_mode_select option:selected").val()

    Hue.change_background_mode(what)
  })

  $("#admin_background_effect_select").change(function () {
    let what = $("#admin_background_effect_select option:selected").val()

    Hue.change_background_effect(what)
  })

  $("#admin_background_tile_dimensions").blur(function () {
    let what = Hue.utilz.clean_string2($(this).val())

    if (what === "") {
      $("#admin_background_tile_dimensions").val(Hue.background_tile_dimensions)
      return false
    }

    Hue.change_background_tile_dimensions(what)
  })

  $("#admin_text_color_mode_select").change(function () {
    let what = $("#admin_text_color_mode_select option:selected").val()

    Hue.change_text_color_mode(what)
  })

  $("#admin_text_color").change(function () {
    Hue.change_text_color($(this).val())
  })

  $("#admin_room_name").blur(function () {
    let name = Hue.utilz.clean_string2($(this).val())

    if (name === "") {
      $("#admin_room_name").val(Hue.room_name)
      return false
    }

    if (name !== Hue.room_name) {
      Hue.change_room_name(name)
    }
  })

  $("#admin_topic").blur(function () {
    let t = Hue.utilz.clean_string2($(this).val())

    if (t === "") {
      $("#admin_topic").val(Hue.topic)
      return false
    }

    if (t !== Hue.topic) {
      Hue.change_topic(t)
    }
  })

  $("#admin_background_image").on("error", function () {
    if ($(this).attr("src") !== Hue.config.background_image_loading_url) {
      $(this).attr("src", Hue.config.background_image_loading_url)
    }
  })

  $("#admin_media_info").change(function () {
    let what = $("#admin_media_info option:selected").val()

    Hue.change_media_info(what)
  })

  $("#room_menu_more_reset_voices").click(function () {
    Hue.needs_confirm("reset_voices")
  })

  $("#room_menu_more_reset_ops").click(function () {
    Hue.needs_confirm("reset_ops")
  })

  $("#room_menu_more_remove_ops").click(function () {
    Hue.needs_confirm("remove_ops")
  })

  $("#room_menu_more_banned_count").click(function () {
    Hue.get_ban_count()
  })

  $("#room_menu_more_unban_all").click(function () {
    Hue.needs_confirm("unban_all")
  })

  $("#room_menu_more_admin_activity").click(function () {
    Hue.request_admin_activity()
  })

  $("#room_menu_more_access_log").click(function () {
    Hue.request_access_log()
  })

  $("#room_menu_more_admin_list").click(function () {
    Hue.request_admin_list()
  })

  $("#room_menu_more_ban_list").click(function () {
    Hue.request_ban_list()
  })

  $("#room_menu_more_clear_log").click(function () {
    Hue.needs_confirm("clear_log")
  })

  $("#room_menu_more_clear_message_board").click(function () {
    Hue.needs_confirm("clear_message_board")
  })

  $("#room_menu_visited_rooms").click(function () {
    Hue.request_roomlist('', 'visited_roomlist')
  })

  $("#room_menu_public_rooms").click(function () {
    Hue.request_roomlist('', 'public_roomlist')
  })

  $("#room_menu_goto_room").click(function () {
    Hue.show_goto_room()
  })

  $("#room_menu_create_room").click(function () {
    Hue.show_create_room()
  })

  $("#room_menu_status").click(function () {
    Hue.show_room_status()
  })

  $("#room_menu_help").click(function () {
    Hue.show_help(1)
  })

  $("#admin_background_image").click(function () {
    Hue.open_background_image_select()
  })
}

// Shows the room menu
Hue.show_room_menu = function () {
  Hue.msg_room_menu.show()
}

// Configures the room menu
// Updates all widgets with current state
Hue.config_room_menu = function () {
  if (Hue.is_admin_or_op()) {
    Hue.config_admin_permission_checkboxes()
    Hue.config_admin_room_image_mode()
    Hue.config_admin_room_tv_mode()
    Hue.config_admin_privacy()
    Hue.config_admin_log_enabled()
    Hue.config_admin_theme_mode()
    Hue.config_admin_theme()
    Hue.config_admin_background_mode()
    Hue.config_admin_background_effect()
    Hue.config_admin_background_tile_dimensions()
    Hue.config_admin_background_image()
    Hue.config_admin_text_color_mode()
    Hue.config_admin_text_color()
    Hue.config_admin_room_name()
    Hue.config_admin_topic()
    Hue.config_admin_media_info()
    Hue.config_admin_display()

    $("#admin_menu").css("display", "block")
  } else {
    $("#admin_menu").css("display", "none")
  }
}

// Checks or unchecks room menu voice permission checkboxes based on current state
Hue.config_admin_permission_checkboxes = function () {
  if (!Hue.is_admin_or_op()) {
    return false
  }

  $(".admin_voice_permissions_checkbox").each(function () {
    let what =
      Hue[`${$(this).data("vtype")}_permissions`][$(this).data("ptype")]
    $(this).prop("checked", what)
  })

  $(".admin_op_permissions_checkbox").each(function () {
    let what =
      Hue[`${$(this).data("optype")}_permissions`][$(this).data("ptype")]
    $(this).prop("checked", what)
  })
}

// Updates the background widgets in the room menu based on current state
Hue.config_admin_background_mode = function () {
  if (!Hue.is_admin_or_op()) {
    return false
  }

  $("#admin_background_mode_select")
    .find("option")
    .each(function () {
      if ($(this).val() === Hue.background_mode) {
        $(this).prop("selected", true)
      }
    })

  $("#admin_background_effect_select")
    .find("option")
    .each(function () {
      if ($(this).val() === Hue.background_effect) {
        $(this).prop("selected", true)
      }
    })

  if (Hue.background_mode === "normal") {
    $("#admin_background_tile_dimensions_container").css("display", "none")
    $("#admin_background_image_container").css("display", "block")
    $("#admin_background_effect_container").css("display", "block")
  } else if (Hue.background_mode === "tiled") {
    $("#admin_background_tile_dimensions_container").css("display", "block")
    $("#admin_background_image_container").css("display", "block")
    $("#admin_background_effect_container").css("display", "block")
  } else if (Hue.background_mode === "mirror") {
    $("#admin_background_tile_dimensions_container").css("display", "none")
    $("#admin_background_image_container").css("display", "none")
    $("#admin_background_effect_container").css("display", "block")
  } else if (Hue.background_mode === "mirror_tiled") {
    $("#admin_background_tile_dimensions_container").css("display", "block")
    $("#admin_background_image_container").css("display", "none")
    $("#admin_background_effect_container").css("display", "block")
  } else if (Hue.background_mode === "solid") {
    $("#admin_background_tile_dimensions_container").css("display", "none")
    $("#admin_background_image_container").css("display", "none")
    $("#admin_background_effect_container").css("display", "none")
  }
}

// Updates background tile dimension widget in the room menu based on current state
Hue.config_admin_background_tile_dimensions = function () {
  if (!Hue.is_admin_or_op()) {
    return false
  }

  $("#admin_background_tile_dimensions").val(Hue.background_tile_dimensions)
}

// Updates the background image widget in the room menu based on current state
Hue.config_admin_background_image = function () {
  if (!Hue.is_admin_or_op()) {
    return false
  }

  if (Hue.background_image !== $("#admin_background_image").attr("src")) {
    if (Hue.background_image !== "") {
      $("#admin_background_image").attr("src", Hue.background_image)
    } else {
      $("#admin_background_image").attr(
        "src",
        Hue.config.default_background_image_url
      )
    }
  }

  if (Hue.background_image_setter) {
    let s = `Setter: ${Hue.background_image_setter}`

    if (Hue.background_image_date) {
      s += ` | ${Hue.utilz.nice_date(Hue.background_image_date)}`
    }

    $("#admin_background_image").attr("title", s)
  }
}

// Updates the background effect widget in the room menu based on current state
Hue.config_admin_background_effect = function () {
  $("#admin_background_effect_select")
    .find("option")
    .each(function () {
      if ($(this).val() === Hue.background_effect) {
        $(this).prop("selected", true)
      }
    })
}

// Updates the text color mode widget in the room menu based on current state
Hue.config_admin_text_color_mode = function () {
  if (!Hue.is_admin_or_op()) {
    return false
  }

  $("#admin_text_color_mode_select")
    .find("option")
    .each(function () {
      if ($(this).val() === Hue.text_color_mode) {
        $(this).prop("selected", true)
      }
    })

  if (Hue.text_color_mode === "custom") {
    $("#admin_text_color_container").css("display", "block")
  } else {
    $("#admin_text_color_container").css("display", "none")
  }
}

// Updates the text color widget in the room menu based on current state
Hue.config_admin_text_color = function () {
  if (!Hue.is_admin_or_op()) {
    return false
  }

  $("#admin_text_color").val(Hue.text_color)
}

// Updates the privacy widget in the room menu based on current state
Hue.config_admin_privacy = function () {
  if (!Hue.is_admin_or_op()) {
    return false
  }

  $("#admin_privacy")
    .find("option")
    .each(function () {
      if (JSON.parse($(this).val()) === Hue.is_public) {
        $(this).prop("selected", true)
      }
    })
}

// Updates the log enabled widget in the room menu based on current state
Hue.config_admin_log_enabled = function () {
  if (!Hue.is_admin_or_op()) {
    return false
  }

  $("#admin_log")
    .find("option")
    .each(function () {
      if (JSON.parse($(this).val()) === Hue.log_enabled) {
        $(this).prop("selected", true)
      }
    })
}

// Updates the media info widget in the room menu based on current state
Hue.config_admin_media_info = function () {
  if (!Hue.is_admin_or_op()) {
    return false
  }

  $("#admin_media_info").val(Hue.media_info)
}

// Updates the room image mode widget in the room menu based on current state
Hue.config_admin_room_image_mode = function () {
  if (!Hue.is_admin_or_op()) {
    return false
  }

  $("#admin_enable_image")
    .find("option")
    .each(function () {
      if ($(this).val() === Hue.room_image_mode) {
        $(this).prop("selected", true)
      }
    })
}

// Updates the room tv mode widget in the room menu based on current state
Hue.config_admin_room_tv_mode = function () {
  if (!Hue.is_admin_or_op()) {
    return false
  }

  $("#admin_enable_tv")
    .find("option")
    .each(function () {
      if ($(this).val() === Hue.room_tv_mode) {
        $(this).prop("selected", true)
      }
    })
}

// Updates the theme mode widget in the room menu based on current state
Hue.config_admin_theme_mode = function () {
  if (!Hue.is_admin_or_op()) {
    return false
  }

  $("#admin_theme_mode_select")
    .find("option")
    .each(function () {
      if ($(this).val() === Hue.theme_mode) {
        $(this).prop("selected", true)
      }
    })

  if (Hue.theme_mode === "custom") {
    $("#admin_theme_mode_container").css("display", "block")
  } else {
    $("#admin_theme_mode_container").css("display", "none")
  }
}

// Updates the theme widget in the room menu based on current state
Hue.config_admin_theme = function () {
  if (!Hue.is_admin_or_op()) {
    return false
  }

  $("#admin_theme").val(Hue.theme)
}

// Updates the room name widget in the room menu based on current state
Hue.config_admin_room_name = function () {
  if (!Hue.is_admin_or_op()) {
    return false
  }

  $("#admin_room_name").val(Hue.room_name)
}

// Updates the topic widget in the room menu based on current state
Hue.config_admin_topic = function () {
  if (!Hue.is_admin_or_op()) {
    return false
  }

  $("#admin_topic").val(Hue.topic)
}

// Configures what should be visible in the room menu according to role
Hue.config_admin_display = function () {
  if (Hue.role === "admin") {
    $("#room_menu_main_container_op_permissions").css("display", "block")
    $("#room_menu_more_remove_ops").css("display", "block")
  } else {
    $("#room_menu_main_container_op_permissions").css("display", "none")
    $("#room_menu_more_remove_ops").css("display", "none")
  }

  if (Hue.check_op_permission(Hue.role, "media")) {
    $("#room_menu_main_container_media").css("display", "block")
  } else {
    $("#room_menu_main_container_media").css("display", "none")
  }

  if (Hue.check_op_permission(Hue.role, "theme")) {
    $("#room_menu_main_container_theme").css("display", "block")
  } else {
    $("#room_menu_main_container_theme").css("display", "none")
  }

  if (Hue.check_op_permission(Hue.role, "background")) {
    $("#room_menu_main_container_background").css("display", "block")
  } else {
    $("#room_menu_main_container_background").css("display", "none")
  }

  if (Hue.check_op_permission(Hue.role, "voice_permissions")) {
    $("#room_menu_main_container_voice_permissions").css("display", "block")
  } else {
    $("#room_menu_main_container_voice_permissions").css("display", "none")
  }

  let some_room_config = false

  if (Hue.check_op_permission(Hue.role, "privacy")) {
    $("#room_menu_privacy_container").css("display", "block")
    some_room_config = true
  } else {
    $("#room_menu_privacy_container").css("display", "none")
  }

  if (Hue.check_op_permission(Hue.role, "log")) {
    $("#room_menu_log_container").css("display", "block")
    some_room_config = true
  } else {
    $("#room_menu_log_container").css("display", "none")
  }

  if (Hue.check_op_permission(Hue.role, "name")) {
    $("#room_menu_room_name_container").css("display", "block")
    some_room_config = true
  } else {
    $("#room_menu_room_name_container").css("display", "none")
  }

  if (Hue.check_op_permission(Hue.role, "topic")) {
    $("#room_menu_topic_container").css("display", "block")
    some_room_config = true
  } else {
    $("#room_menu_topic_container").css("display", "none")
  }

  if (some_room_config) {
    $("#room_menu_main_container_room_config").css("display", "block")
  } else {
    $("#room_menu_main_container_room_config").css("display", "none")
  }

  if (Hue.check_op_permission(Hue.role, "voice_roles")) {
    $("#room_menu_more_reset_voices").css("display", "block")
  } else {
    $("#room_menu_more_reset_voices").css("display", "none")
  }

  if (Hue.check_op_permission(Hue.role, "voice_roles")) {
    $("#room_menu_more_reset_voices").css("display", "block")
  } else {
    $("#room_menu_more_reset_voices").css("display", "none")
  }

  if (Hue.check_op_permission(Hue.role, "unban")) {
    $("#room_menu_more_unban_all").css("display", "block")
  } else {
    $("#room_menu_more_unban_all").css("display", "none")
  }

  if (Hue.check_op_permission(Hue.role, "log")) {
    $("#room_menu_more_clear_log").css("display", "block")
  } else {
    $("#room_menu_more_clear_log").css("display", "none")
  }

  if (Hue.check_op_permission(Hue.role, "message_board_delete")) {
    $("#room_menu_more_clear_message_board").css("display", "block")
  } else {
    $("#room_menu_more_clear_message_board").css("display", "none")
  }
}

// Creates a room
Hue.create_room = function (data) {
  Hue.msg_info2.close(function () {
    Hue.socket_emit("create_room", data)
  })
}

// Request a room list to the server
// Either a public or a visited room list
Hue.request_roomlist = function (filter = "", type = "public_roomlist") {
  if (Hue.requesting_roomlist) {
    return false
  }

  Hue.requesting_roomlist = true
  Hue[`${type}_filter_string`] = filter
  Hue.socket_emit("roomlist", { type: type })

  setTimeout(function () {
    Hue.requesting_roomlist = false
  }, 1000)
}

// Handles a received room list
// Either a public or a visited room list
Hue.on_roomlist_received = function (data) {
  Hue.update_roomlist(data.type, data.roomlist)

  if (data.type === "public_roomlist") {
    Hue.show_public_roomlist()
  } else if (data.type === "visited_roomlist") {
    Hue.show_visited_roomlist()
  }
}

// Starts click events on room list items
Hue.start_roomlist_click_events = function () {
  $("#public_roomlist_container").on(
    "click",
    ".roomlist_item_inner",
    function () {
      Hue.show_open_room($(this).data("room_id"))
    }
  )

  $("#visited_roomlist_container").on(
    "click",
    ".roomlist_item_inner",
    function () {
      Hue.show_open_room($(this).data("room_id"))
    }
  )
}

// Builds the room list window items with received data
Hue.update_roomlist = function (type, roomlist) {
  $(`#${type}_filter`).val(Hue[`${type}_filter_string`])

  let s = $()

  s = s.add()

  for (let i = 0; i < roomlist.length; i++) {
    let c = `<div class='roomlist_item_inner pointer inline action' data-room_id='${roomlist[i].id}'>
            <div class='roomlist_name'></div><div class='roomlist_topic'></div>
            <div class='roomlist_here'></div><div class='roomlist_count'></div>
        </div>`

    let h = $(`<div class='modal_item roomlist_item'>${c}</div>`)

    h.find(".roomlist_name").eq(0).text(roomlist[i].name)
    h.find(".roomlist_count")
      .eq(0)
      .text(Hue.utilz.singular_or_plural(roomlist[i].usercount, "users"))

    if (roomlist[i].id === Hue.room_id) {
      h.find(".roomlist_here")
        .eq(0)
        .text("You are here")
        .css("display", "block")
    }

    let topic

    if (roomlist[i].topic.length > 0) {
      topic = roomlist[i].topic
    } else {
      topic = "No topic set"
    }

    h.find(".roomlist_topic").eq(0).text(topic).urlize()

    s = s.add(h)
  }

  $(`#${type}_container`).html(s)

  if (Hue[`${type}_filter_string`] !== "") {
    Hue.do_modal_filter(type)
  }
}

// Shows the Create Room window
Hue.show_create_room = function () {
  Hue.msg_info2.show(["Create Room", Hue.template_create_room()], function () {
    $("#create_room_done").click(function () {
      Hue.create_room_submit()
    })

    $("#create_room_name").focus()
    Hue.create_room_open = true
  })
}

// Submit action of Create Room window
Hue.create_room_submit = function () {
  let data = {}

  data.name = Hue.utilz.clean_string2(
    $("#create_room_name").val().substring(0, Hue.config.max_room_name_length)
  )

  if (data.name === "") {
    return false
  }

  data.public = JSON.parse($("#create_room_public option:selected").val())

  Hue.create_room(data)
}

// Shows the Open Room window where the user selects how to open a room
Hue.show_open_room = function (id) {
  if (id === Hue.config.main_room_id) {
    id = "/"
  }

  Hue.msg_info2.show(
    ["Open Room", Hue.template_open_room({ id: id })],
    function () {
      $("#open_room_here").click(function () {
        Hue.goto_url(id)
        Hue.msg_info2.close()
      })

      $("#open_room_new_tab").click(function () {
        Hue.goto_url(id, "tab")
        Hue.msg_info2.close()
      })

      Hue.open_room_open = true
    }
  )
}

// Shows the public room list
Hue.show_public_roomlist = function () {
  Hue.msg_public_roomlist.show()
}

// Shows the visited room list
Hue.show_visited_roomlist = function () {
  Hue.msg_visited_roomlist.show()
}

// Show the go to room window
Hue.show_goto_room = function () {
  Hue.msg_info2.show(["Go To Room", Hue.template_goto_room()], function () {
    $("#goto_room_submit").click(function () {
      Hue.goto_room_action()
    })

    $("#goto_room_input").focus()
    Hue.goto_room_open = true
  })
}

// On go to room window submit
Hue.goto_room_action = function () {
  let id = $("#goto_room_input").val().trim()

  if (id.length === 0) {
    return false
  }

  Hue.show_open_room(id)
}

// Show feedback to the user after creating a room
Hue.on_room_created = function (data) {
  let onclick = function () {
    Hue.show_open_room(data.id)
  }

  let msg

  if (data.public) {
    msg = `${data.username} created a room`
  } else {
    msg = "Room Created"
  }

  Hue.feedback(msg, {
    brk: Hue.get_chat_icon("key"),
    onclick: onclick,
    save: true,
  })

  if (data.username === Hue.username) {
    Hue.show_open_room(data.id)
  }
}

// Message to show when the create room cooldown is not over
Hue.create_room_cooldown_message = function () {
  let mins = Math.round(Hue.config.create_room_cooldown / 1000 / 60)
  let s
  
  if (mins === 1) {
    s = "minute"
  } else {
    s = "minutes"
  }

  Hue.msg_info.show(`You must wait ${mins} ${s} between room creation`)
}
// Loads a Javascript file from a specified URL
// Resolves a promise when the <script> is loaded
Hue.load_script = function (source) {
  if (!Hue.load_scripts) {
    return false
  }

  Hue.loginfo(`Loading script: ${source}`)

  return new Promise((resolve, reject) => {
    const script = document.createElement("script")
    document.body.appendChild(script)
    script.onload = resolve
    script.onerror = reject
    script.async = true
    script.src = source
  })
}
// User settings object
// Used to generate global and room settings
// And to declare what widget is used in the settings windows
Hue.user_settings = {
  highlight_current_username: {
    widget_type: "checkbox",
    description: `Whether messages containing the user's username must be highlighted`,
    action: (type, save = true) => {
      Hue[type].highlight_current_username = $(
        `#${type}_highlight_current_username`
      ).prop("checked")

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  case_insensitive_username_highlights: {
    widget_type: "checkbox",
    description: `Whether username highlight checks are case insensitive or not`,
    action: (type, save = true) => {
      Hue[type].case_insensitive_username_highlights = $(
        `#${type}_case_insensitive_username_highlights`
      ).prop("checked")

      if (
        Hue.active_settings("case_insensitive_username_highlights") === type
      ) {
        Hue.generate_mentions_regex()
      }

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  case_insensitive_words_highlights: {
    widget_type: "checkbox",
    description: `Whether 'other words' highlight checks are case insensitive or not`,
    action: (type, save = true) => {
      Hue[type].case_insensitive_words_highlights = $(
        `#${type}_case_insensitive_words_highlights`
      ).prop("checked")

      if (Hue.active_settings("case_insensitive_words_highlights") === type) {
        Hue.generate_highlight_words_regex()
      }

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  case_insensitive_ignored_words: {
    widget_type: "checkbox",
    description: `Whether 'ignored words' highlight checks are case insensitive or not`,
    action: (type, save = true) => {
      Hue[type].case_insensitive_ignored_words = $(
        `#${type}_case_insensitive_ignored_words`
      ).prop("checked")

      if (Hue.active_settings("case_insensitive_ignored_words") === type) {
        Hue.generate_ignored_words_regex()
      }

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  ignored_words_exclude_same_user: {
    widget_type: "checkbox",
    description: `Whether messages containing 'ignored words' should be ignored if coming from the user itself`,
    action: (type, save = true) => {
      Hue[type].ignored_words_exclude_same_user = $(
        `#${type}_ignored_words_exclude_same_user`
      ).prop("checked")

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  other_words_to_highlight: {
    widget_type: "textarea",
    description: `Words on messages to trigger highlights`,
    action: (type, save = true) => {
      let words = Hue.utilz.make_unique_lines(
        Hue.utilz.remove_multiple_empty_lines($(`#${type}_other_words_to_highlight`).val())
      )

      $(`#${type}_other_words_to_highlight`).val(words)

      Hue[type].other_words_to_highlight = words

      if (Hue.active_settings("other_words_to_highlight") === type) {
        Hue.generate_highlight_words_regex()
      }

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  double_tap: {
    widget_type: "textarea",
    description: `Actions to perform after a Double Tap 1 trigger`,
    action: (type, save = true) => {
      let cmds = Hue.utilz.remove_multiple_empty_lines($(`#${type}_double_tap`).val())

      $(`#${type}_double_tap`).val(cmds)

      Hue[type].double_tap = cmds

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  double_tap_2: {
    widget_type: "textarea",
    description: `Actions to perform after a Double Tap 2 trigger`,
    action: (type, save = true) => {
      let cmds = Hue.utilz.remove_multiple_empty_lines($(`#${type}_double_tap_2`).val())

      $(`#${type}_double_tap_2`).val(cmds)

      Hue[type].double_tap_2 = cmds

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  double_tap_3: {
    widget_type: "textarea",
    description: `Actions to perform after a Double Tap 3 trigger`,
    action: (type, save = true) => {
      let cmds = Hue.utilz.remove_multiple_empty_lines($(`#${type}_double_tap_3`).val())

      $(`#${type}_double_tap_3`).val(cmds)

      Hue[type].double_tap_3 = cmds

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  at_startup: {
    widget_type: "textarea",
    description: `Actions to perform after a successful startup`,
    action: (type, save = true) => {
      let cmds = Hue.utilz.remove_multiple_empty_lines($(`#${type}_at_startup`).val())

      $(`#${type}_at_startup`).val(cmds)

      Hue[type].at_startup = cmds

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  ignored_usernames: {
    widget_type: "textarea",
    description: `Ignore messages and actions from these users`,
    action: (type, save = true) => {
      let unames = Hue.utilz.make_unique_lines(
        Hue.utilz.remove_multiple_empty_lines($(`#${type}_ignored_usernames`).val())
      )

      $(`#${type}_ignored_usernames`).val(unames)

      Hue[type].ignored_usernames = unames

      if (Hue.active_settings("ignored_usernames") === type) {
        Hue.get_ignored_usernames_list()
        Hue.check_activity_bar()
      }

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  accept_commands_from: {
    widget_type: "textarea",
    description: `Accept remote command executions from these users`,
    action: (type, save = true) => {
      let unames = Hue.utilz.make_unique_lines(
        Hue.utilz.remove_multiple_empty_lines($(`#${type}_accept_commands_from`).val())
      )

      $(`#${type}_accept_commands_from`).val(unames)

      Hue[type].accept_commands_from = unames

      if (Hue.active_settings("ignored_usernames") === type) {
        Hue.get_accept_commands_from_list()
      }

      if (save) {
        Hue[`save_${type}`]()
      }

      if (unames) {
        Hue.feedback("Your list of users to accept commands from was modified. This is dangerous and might not have been intended.")
      }
    },
  },
  ignored_words: {
    widget_type: "textarea",
    description: `Ignore messages that contain these words`,
    action: (type, save = true) => {
      let unames = Hue.utilz.make_unique_lines(
        Hue.utilz.remove_multiple_empty_lines($(`#${type}_ignored_words`).val())
      )

      $(`#${type}_ignored_words`).val(unames)

      Hue[type].ignored_words = unames

      if (Hue.active_settings("ignored_words") === type) {
        Hue.generate_ignored_words_regex()
      }

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  open_whispers_automatically: {
    widget_type: "checkbox",
    description: `Whether messages received should open in a window automatically`,
    action: (type, save = true) => {
      Hue[type].open_whispers_automatically = $(`#${type}_open_whispers_automatically`).prop(
        "checked"
      )

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  user_function_1: {
    widget_type: "textarea",
    description: `Actions to perform when triggering User Function 1`,
    action: (type, save = true) => {
      Hue.setting_user_function_do_action(1, type, save)
    },
  },
  user_function_2: {
    widget_type: "textarea",
    description: `Actions to perform when triggering User Function 2`,
    action: (type, save = true) => {
      Hue.setting_user_function_do_action(2, type, save)
    },
  },
  user_function_3: {
    widget_type: "textarea",
    description: `Actions to perform when triggering User Function 3`,
    action: (type, save = true) => {
      Hue.setting_user_function_do_action(3, type, save)
    },
  },
  user_function_4: {
    widget_type: "textarea",
    description: `Actions to perform when triggering User Function 4`,
    action: (type, save = true) => {
      Hue.setting_user_function_do_action(4, type, save)
    },
  },
  user_function_5: {
    widget_type: "textarea",
    description: `Actions to perform when triggering User Function 5`,
    action: (type, save = true) => {
      Hue.setting_user_function_do_action(5, type, save)
    },
  },
  user_function_6: {
    widget_type: "textarea",
    description: `Actions to perform when triggering User Function 6`,
    action: (type, save = true) => {
      Hue.setting_user_function_do_action(6, type, save)
    },
  },
  user_function_7: {
    widget_type: "textarea",
    description: `Actions to perform when triggering User Function 7`,
    action: (type, save = true) => {
      Hue.setting_user_function_do_action(7, type, save)
    },
  },
  user_function_8: {
    widget_type: "textarea",
    description: `Actions to perform when triggering User Function 8`,
    action: (type, save = true) => {
      Hue.setting_user_function_do_action(8, type, save)
    },
  },
  user_function_1_name: {
    widget_type: "text",
    description: `Displayed name for User Function 1`,
    action: (type, save = true) => {
      Hue.setting_user_function_name_do_action(1, type, save)
    },
  },
  user_function_2_name: {
    widget_type: "text",
    description: `Displayed name for User Function 2`,
    action: (type, save = true) => {
      Hue.setting_user_function_name_do_action(2, type, save)
    },
  },
  user_function_3_name: {
    widget_type: "text",
    description: `Displayed name for User Function 3`,
    action: (type, save = true) => {
      Hue.setting_user_function_name_do_action(3, type, save)
    },
  },
  user_function_4_name: {
    widget_type: "text",
    description: `Displayed name for User Function 4`,
    action: (type, save = true) => {
      Hue.setting_user_function_name_do_action(4, type, save)
    },
  },
  user_function_5_name: {
    widget_type: "text",
    description: `Displayed name for User Function 5`,
    action: (type, save = true) => {
      Hue.setting_user_function_name_do_action(5, type, save)
    },
  },
  user_function_6_name: {
    widget_type: "text",
    description: `Displayed name for User Function 6`,
    action: (type, save = true) => {
      Hue.setting_user_function_name_do_action(6, type, save)
    },
  },
  user_function_7_name: {
    widget_type: "text",
    description: `Displayed name for User Function 7`,
    action: (type, save = true) => {
      Hue.setting_user_function_name_do_action(7, type, save)
    },
  },
  user_function_8_name: {
    widget_type: "text",
    description: `Displayed name for User Function 8`,
    action: (type, save = true) => {
      Hue.setting_user_function_name_do_action(8, type, save)
    },
  },
  on_lockscreen: {
    widget_type: "textarea",
    description: `Actions to perform when the screen gets locked`,
    action: (type, save = true) => {
      let cmds = Hue.utilz.remove_multiple_empty_lines($(`#${type}_on_lockscreen`).val())

      $(`#${type}_on_lockscreen`).val(cmds)

      Hue[type].on_lockscreen = cmds

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  on_unlockscreen: {
    widget_type: "textarea",
    description: `Actions to perform when the screen gets unlocked`,
    action: (type, save = true) => {
      let cmds = Hue.utilz.remove_multiple_empty_lines($(`#${type}_on_unlockscreen`).val())

      $(`#${type}_on_unlockscreen`).val(cmds)

      Hue[type].on_unlockscreen = cmds

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  aliases: {
    widget_type: "textarea",
    description: `Custom commands defined by the user, based on other commands`,
    action: (type, save = true) => {
      let cmds = Hue.utilz.remove_multiple_empty_lines($(`#${type}_aliases`).val())

      cmds = Hue.format_command_aliases(cmds)

      $(`#${type}_aliases`).val(cmds)

      Hue[type].aliases = cmds

      if (Hue.active_settings("aliases") === type) {
        Hue.setup_command_aliases()
      }

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  other_words_to_autocomplete: {
    widget_type: "textarea",
    description: `Other words to be considered on Tab autocompletion`,
    action: (type, save = true) => {
      let words = Hue.utilz.make_unique_lines(
        Hue.utilz.remove_multiple_empty_lines($(`#${type}_other_words_to_autocomplete`).val())
      )

      $(`#${type}_other_words_to_autocomplete`).val(words)

      Hue[type].other_words_to_autocomplete = words

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  warn_before_closing: {
    widget_type: "checkbox",
    description: `Show a confirmation message in some cases when the client is going to be closed or refreshed`,
    action: (type, save = true) => {
      Hue[type].warn_before_closing = $(`#${type}_warn_before_closing`).prop(
        "checked"
      )

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  show_image_previews: {
    widget_type: "checkbox",
    description: `Whether to show image previews on certain chat image links`,
    action: (type, save = true) => {
      Hue[type].show_image_previews = $(`#${type}_show_image_previews`).prop(
        "checked"
      )

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  show_link_previews: {
    widget_type: "checkbox",
    description: `Whether to show related information of chat links when available`,
    action: (type, save = true) => {
      Hue[type].show_link_previews = $(`#${type}_show_link_previews`).prop(
        "checked"
      )

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  show_input_placeholder: {
    widget_type: "checkbox",
    description: `Whether information inside the input should be shown`,
    action: (type, save = true) => {
      Hue[type].show_input_placeholder = $(
        `#${type}_show_input_placeholder`
      ).prop("checked")

      Hue.update_input_placeholder()

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  autoreveal_spoilers: {
    widget_type: "checkbox",
    description: `Whether spoiler messages should be autorevealed`,
    action: (type, save = true) => {
      Hue[type].autoreveal_spoilers = $(`#${type}_autoreveal_spoilers`).prop(
        "checked"
      )

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  autoscroll_amount: {
    widget_type: "number",
    description: `Pixel amount to scroll up or down on each tick on autoscroll`,
    action: (type, save = true) => {
      let val = parseInt(
        Hue.utilz.clean_string2($(`#${type}_autoscroll_amount`).val())
      )

      if (!val) {
        val = Hue.config.global_settings_default_autoscroll_amount
      }

      $(`#${type}_autoscroll_amount`).val(val)

      Hue[type].autoscroll_amount = val

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  autoscroll_delay: {
    widget_type: "number",
    description: `Perform an autoscroll tick after these milliseconds`,
    action: (type, save = true) => {
      let val = parseInt(
        Hue.utilz.clean_string2($(`#${type}_autoscroll_delay`).val())
      )

      if (!val) {
        val = Hue.config.global_settings_default_autoscroll_delay
      }

      $(`#${type}_autoscroll_delay`).val(val)

      Hue[type].autoscroll_delay = val

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  theme_mode: {
    widget_type: "select",
    description: `It either uses the room's theme color or a custom theme color`,
    action: (type, save = true) => {
      Hue[type].theme_mode = $(`#${type}_theme_mode option:selected`).val()

      if (Hue.active_settings("theme_mode") === type) {
        Hue.apply_theme()
      }

      Hue.check_hideable_settings()

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  theme_color: {
    widget_type: "color",
    description: `The theme color to use if the user is using a custom theme mode`,
    action: (type, save = true) => {
      Hue[type].theme_color = $(`#${type}_theme_color`).val()

      if (Hue.active_settings("theme_color") === type) {
        Hue.apply_theme()
      }

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  text_color: {
    widget_type: "color",
    description: `The text color to use if the user is using a custom theme mode`,
    action: (type, save = true) => {
      Hue[type].text_color = $(`#${type}_text_color`).val()

      if (Hue.active_settings("text_color") === type) {
        Hue.apply_theme()
      }

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  background_mode: {
    widget_type: "select",
    description: `It either uses the room's background, a custom background, or no background`,
    action: (type, save = true) => {
      Hue[type].background_mode = $(
        `#${type}_background_mode option:selected`
      ).val()

      if (Hue.active_settings("background_mode") === type) {
        Hue.apply_background()
      }

      Hue.check_hideable_settings()

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  background_url: {
    widget_type: "text",
    description: `The background url to use if the user is using a custom background`,
    action: (type, save = true) => {
      let src = Hue.utilz.clean_string5(
        $(`#${type}_background_url`).val().replace(".gifv", ".gif")
      )
      $(`#${type}_background_url`).val(src)
      Hue[type].background_url = src

      if (Hue.active_settings("background_url") === type) {
        Hue.apply_background()
      }

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  background_tile_dimensions: {
    widget_type: "text",
    description: `The background url to use if the user is using a custom background`,
    action: (type, save = true) => {
      let dimensions = Hue.utilz.clean_string2(
        $(`#${type}_background_tile_dimensions`).val()
      )
      $(`#${type}_background_tile_dimensions`).val(dimensions)
      Hue[type].background_tile_dimensions = dimensions

      if (Hue.active_settings("background_tile_dimensions") === type) {
        Hue.apply_background()
      }

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  message_log: {
    widget_type: "checkbox",
    description: `Whether the user requests the message log on load`,
    action: (type, save = true) => {
      Hue[type].message_log = $(`#${type}_message_log`).prop("checked")

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  chat_crop_limit: {
    widget_type: "number",
    description: `Crop the chat area after this many messages`,
    action: (type, save = true) => {
      let val = parseInt(
        Hue.utilz.clean_string2($(`#${type}_chat_crop_limit`).val())
      )

      if (!val) {
        val = Hue.config.global_settings_default_chat_crop_limit
      }

      $(`#${type}_chat_crop_limit`).val(val)

      Hue[type].chat_crop_limit = val

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  autoconnect: {
    widget_type: "checkbox",
    description: `Whether a user should autoconnect automatically after a socket disconnect`,
    action: (type, save = true) => {
      Hue[type].autoconnect = $(`#${type}_autoconnect`).prop("checked")

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  popup_notifications_close_delay: {
    widget_type: "number",
    description: `How much time (ms) needs to pass before the notification popups close automatically`,
    action: (type, save = true) => {
      let delay = parseInt($(`#${type}_popup_notifications_close_delay`).val())

      if (isNaN(delay)) {
        delay =
          Hue.config.global_settings_default_popup_notifications_close_delay
      }

      $(`#${type}_popup_notifications_close_delay`).val(delay)
      Hue[type].popup_notifications_close_delay = delay

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  media_info: {
    widget_type: "select",
    description: `It either uses the room's media info, forces enabled, or, forces disabled`,
    action: (type, save = true) => {
      Hue[type].media_info = $(`#${type}_media_info option:selected`).val()

      if (Hue.active_settings("media_info") === type) {
        Hue.configure_media_info()
      }

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  transparent_panels: {
    widget_type: "checkbox",
    description: `Whether panels get a slight transparency`,
    action: (type, save = true) => {
      Hue[type].transparent_panels = $(`#${type}_transparent_panels`).prop(
        "checked"
      )

      if (Hue.active_settings("transparent_panels") === type) {
        Hue.apply_theme()
      }

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  confirm_chat: {
    widget_type: "checkbox",
    description: `Whether to show a confirmation dialog when sending a chat message`,
    action: (type, save = true) => {
      Hue[type].confirm_chat = $(`#${type}_confirm_chat`).prop("checked")

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  confirm_image: {
    widget_type: "checkbox",
    description: `Whether to show a confirmation dialog when changing the image`,
    action: (type, save = true) => {
      Hue[type].confirm_image = $(`#${type}_confirm_image`).prop("checked")

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  confirm_tv: {
    widget_type: "checkbox",
    description: `Whether to show a confirmation dialog when changing the tv`,
    action: (type, save = true) => {
      Hue[type].confirm_tv = $(`#${type}_confirm_tv`).prop("checked")

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  },
  confirm_message_board: {
    widget_type: "checkbox",
    description: `Whether to show a confirmation dialog when sending a board message`,
    action: (type, save = true) => {
      Hue[type].confirm_message_board = $(
        `#${type}_confirm_message_board`
      ).prop("checked")

      if (save) {
        Hue[`save_${type}`]()
      }
    },
  }
}

// Empties the global settings localStorage object
Hue.empty_global_settings = function () {
  Hue.global_settings = {}
  Hue.save_global_settings(true)
}

// Gets the global settings localStorage object
Hue.get_global_settings = function () {
  Hue.global_settings = Hue.get_local_storage(Hue.ls_global_settings)

  if (Hue.global_settings === null) {
    Hue.global_settings = {}
  }

  let changed = false

  for (let setting in Hue.user_settings) {
    if (Hue.global_settings[setting] === undefined) {
      Hue.global_settings[setting] =
        Hue.config[`global_settings_default_${setting}`]
      changed = true
    }
  }

  if (changed) {
    Hue.save_global_settings()
  }
}

// Saves the global settings localStorage object
Hue.save_global_settings = function (force = false) {
  Hue.save_local_storage(Hue.ls_global_settings, Hue.global_settings, force)
}

// Starts the settings windows widgets with current state
Hue.start_settings_widgets = function (type) {
  for (let setting in Hue.user_settings) {
    Hue.modify_setting_widget(type, setting)
  }
}

// Updates a setting widget based on the setting state
Hue.modify_setting_widget = function (type, setting_name) {
  let widget_type = Hue.user_settings[setting_name].widget_type
  let item = $(`#${type}_${setting_name}`)

  if (widget_type === "checkbox") {
    item.prop("checked", Hue[type][setting_name])
  } else if (
    widget_type === "textarea" ||
    widget_type === "text" ||
    widget_type === "number" ||
    widget_type === "range" ||
    widget_type === "color"
  ) {
    item.val(Hue[type][setting_name])
  } else if (widget_type === "select") {
    item.find("option").each(function () {
      if ($(this).val() == Hue[type][setting_name]) {
        $(this).prop("selected", true)
      }
    })
  }
}

// Starts listeners for settings windows widgets's change
Hue.start_settings_widgets_listeners = function (type) {
  for (let key in Hue.user_settings) {
    let setting = Hue.user_settings[key]
    let item = $(`#${type}_${key}`)

    if (
      setting.widget_type === "checkbox" ||
      setting.widget_type === "select"
    ) {
      item.change(() => setting.action(type))
    } else if (
      setting.widget_type === "textarea" ||
      setting.widget_type === "text"
    ) {
      item.blur(() => setting.action(type))
    } else if (
      setting.widget_type === "number" ||
      setting.widget_type === "color"
    ) {
      item.change(() => setting.action(type))
    } else if (setting.widget_type === "range") {
      item.on("input change", function () {
        setting.action(type)
      })
    }
  }
}

// Executes all settings action functions
Hue.call_setting_actions = function (type, save = true) {
  for (let key in Hue.user_settings) {
    let setting = Hue.user_settings[key]
    setting.action(type, save)
  }
}

// Empties the room settings localStorage object
Hue.empty_room_settings = function () {
  Hue.room_settings = {}
  Hue.save_room_settings(true)
}

// Gets the room settings localStorage object
// Defaults are filled with global settings
Hue.get_room_settings = function () {
  let room_settings_all = Hue.get_local_storage(Hue.ls_room_settings)

  if (room_settings_all === null) {
    room_settings_all = {}
  }

  Hue.room_settings = room_settings_all[Hue.room_id]

  if (Hue.room_settings === undefined) {
    Hue.room_settings = {}
  }

  let changed = false

  for (let key in Hue.global_settings) {
    if (Hue.room_settings[key] === undefined) {
      Hue.room_settings[key] = Hue.global_settings[key]
      changed = true
    }

    if (Hue.room_settings[`${key}_override`] === undefined) {
      Hue.room_settings[`${key}_override`] = false
      changed = true
    }
  }

  if (changed) {
    Hue.save_room_settings()
  }
}

// Saves the room settings localStorage object
Hue.save_room_settings = function (force = false) {
  let room_settings_all = Hue.get_local_storage(Hue.ls_room_settings)

  if (room_settings_all === null) {
    room_settings_all = {}
  }

  room_settings_all[Hue.room_id] = Hue.room_settings

  Hue.save_local_storage(Hue.ls_room_settings, room_settings_all, force)
}

// Confirm if the user wants to reset the settings
Hue.confirm_reset_settings = function (type) {
  let s

  if (type === "global_settings") {
    s = "Global Settings"
  } else {
    s = "Room Settings"
  }

  if (
    confirm(`Are you sure you want to reset the ${s} to their initial state?`)
  ) {
    Hue.reset_settings(type)
  }
}

// Reset the settings of a certain type
Hue.reset_settings = function (type, empty = true) {
  if (empty) {
    Hue[`empty_${type}`]()
  }

  Hue[`get_${type}`]()

  Hue.start_settings_widgets(type)
  Hue.call_setting_actions("global_settings", false)
  Hue.call_setting_actions("room_settings", false)
  Hue.prepare_media_settings()

  if (type === "room_settings") {
    Hue.set_room_settings_overriders()
    Hue.check_room_settings_override()
  }
}

// Scrolls a settings window to the top
Hue.scroll_settings_window_to_top = function (type) {
  $(`#settings_window_right_${type}`).scrollTop(0)
}

// Show the global settings window
Hue.show_global_settings = function (filter = false) {
  Hue.do_settings_filter("global_settings", filter)
  Hue.msg_global_settings.show()
}

// Show the rooms settings window
Hue.show_room_settings = function (filter = false) {
  Hue.do_settings_filter("room_settings", filter)
  Hue.msg_room_settings.show()
}

// Setup the settings windows
Hue.setup_settings_windows = function () {
  Hue.setup_setting_elements("global_settings")
  Hue.setup_setting_elements("room_settings")
  Hue.create_room_settings_overriders()
  Hue.set_room_settings_overriders()
  Hue.start_room_settings_overriders()
  Hue.check_room_settings_override()
  Hue.setup_user_function_switch_selects()
  Hue.set_user_settings_titles()
  Hue.check_hideable_settings()

  $(".settings_main_window").on("click", ".settings_window_category", function (
    e
  ) {
    let category = $(this).data("category")
    Hue.change_settings_window_category(category)
  })

  let first_category = $("#global_settings_container .settings_window_category")
    .eq(0)
    .data("category")
  Hue.change_settings_window_category(first_category, "global_settings")
  Hue.change_settings_window_category(first_category, "room_settings")
}

// Creates the overrider widgets for the room settings window
Hue.create_room_settings_overriders = function () {
  $("#room_settings_container")
    .find(".settings_item")
    .each(function () {
      let setting = $(this).data("setting")

      let s = `
        <div class='room_settings_overrider_container'>
            <input type='checkbox' class='room_settings_overrider' id='room_settings_${setting}_overrider'>
            Override
        </div>`

      $(this).prepend(s)
    })
}

// Sets the room settings window's overriders based on current state
Hue.set_room_settings_overriders = function () {
  $(".room_settings_overrider").each(function () {
    let item = $(this).closest(".settings_item")
    let setting = item.data("setting")
    let override = Hue.room_settings[`${setting}_override`]

    if (override === undefined) {
      override = false
    }

    $(this).prop("checked", override)

    Hue.settings_window_item_fade(override, item)
  })
}

// Starts the room settings window's overrider's events
Hue.start_room_settings_overriders = function () {
  $(".room_settings_overrider").change(function () {
    let item = $(this).closest(".settings_item")
    let setting = item.data("setting")
    let override = $(this).prop("checked")

    if (override === undefined) {
      override = false
    }

    Hue.settings_window_item_fade(override, item)
    Hue.room_settings[`${setting}_override`] = override

    let setting_obj = Hue.user_settings[setting]

    if (override) {
      setting_obj.action("room_settings", false)
    } else {
      setting_obj.action("global_settings", false)
    }

    Hue.check_room_settings_override()
    Hue.save_room_settings()

    let togglers = item.find(".toggler")

    if (togglers.length > 0) {
      let toggler = togglers.eq(0)

      if (override) {
        Hue.set_toggler("room_settings", toggler, "open")
      } else {
        Hue.set_toggler("room_settings", toggler, "close")
      }
    }
  })
}

// If a global settings item is overriden in room settings,
// it becomes faded. This function sets this
Hue.settings_window_item_fade = function (override, item) {
  if (override) {
    item.removeClass("faded")
  } else {
    item.addClass("faded")
  }

  $("#settings_window_right_global_settings .settings_item").each(function () {
    if (item.data("setting") === $(this).data("setting")) {
      if (override) {
        $(this).addClass("faded")
      } else {
        $(this).removeClass("faded")
      }

      return false
    }
  })
}

// Sets up more settings elements
Hue.setup_setting_elements = function (type) {
  $(`#${type}_double_tap_key`).text(Hue.config.double_tap_key)
  $(`#${type}_double_tap_2_key`).text(Hue.config.double_tap_key_2)
  $(`#${type}_double_tap_3_key`).text(Hue.config.double_tap_key_3)

  $(`#${type}_reset`).click(function () {
    Hue.confirm_reset_settings(type)
  })

  $(`#${type}_switch`).click(function () {
    Hue.settings_window_switch(type)
  })

  Hue.setup_togglers(type)
}

// Switch between global and room settings
Hue.settings_window_switch = function (from) {
  Hue[`msg_${from}`].close(function () {
    let dest = "global_settings"

    if (from === "global_settings") {
      dest = "room_settings"
    }

    let category = Hue.get_selected_user_settings_category(from)
    Hue.open_user_settings_category(category, dest)

    let filter = $(`#${from}_filter`).val()

    if (filter) {
      Hue.do_settings_filter(dest, filter)
    }
  })
}

// Checks for room settings overrides to show or not indicators of change,
// in each category and in the user menu
Hue.check_room_settings_override = function () {
  $("#settings_window_left_room_settings .settings_window_category").each(
    function () {
      $(this).find(".settings_window_category_status").eq(0).html("")
      $(this).find(".settings_window_category_status_filler").eq(0).html("")
    }
  )

  for (let key in Hue.global_settings) {
    if (Hue.room_settings[`${key}_override`]) {
      override = true

      let el = $(`#room_settings_${key}`)

      if (el.length > 0) {
        let container = el.closest(".settings_category")

        if (container.length > 0) {
          let category = container.data("category")

          $(
            "#settings_window_left_room_settings .settings_window_category"
          ).each(function () {
            if ($(this).data("category") === category) {
              $(this)
                .find(".settings_window_category_status")
                .eq(0)
                .html("&nbsp;*")
              $(this)
                .find(".settings_window_category_status_filler")
                .eq(0)
                .html("&nbsp;*")
              return false
            }
          })
        }
      }
    }
  }
}

// Gets the active version of a setting
// Either from global settings or room settings
// A room setting version is active when the setting is overriden
Hue.get_setting = function (name) {
  try {
    if (Hue.room_settings[`${name}_override`]) {
      return Hue.room_settings[name]
    } else {
      return Hue.global_settings[name]
    }
  } catch (err) {
    return undefined
  }
}

// Checks whether a setting is active as a global or as a room setting
Hue.active_settings = function (name) {
  if (Hue.room_settings[`${name}_override`]) {
    return "room_settings"
  } else {
    return "global_settings"
  }
}

// Sets the hover titles for the setttings widgets
Hue.set_user_settings_titles = function () {
  for (let key in Hue.user_settings) {
    let setting = Hue.user_settings[key]
    let value = Hue.config[`global_settings_default_${key}`]

    if (typeof value === "string") {
      value = `"${value}"`
    }

    let title = `${setting.description} (${key}) (Default: ${value})`

    $(`#global_settings_${key}`).closest(".settings_top_level_item").attr("title", title)
    $(`#room_settings_${key}`).closest(".settings_top_level_item").attr("title", title)
  }
}

// Modifies a setting manually instead of using the settings windows
Hue.modify_setting = function (arg, show_feedback = true, force = false) {
  let split = arg.split(" ")
  let setting = split[0]

  if (Hue.user_settings[setting] === undefined) {
    Hue.feedback("Invalid setting")
    return false
  }

  let value = ""

  if (split.length > 1) {
    value = split.slice(1).join(" ")
  }

  if (value) {
    if (value === "true") {
      value = true
    } else if (value === "false") {
      value = false
    } else if (!isNaN(value)) {
      value = Number(value)
    } else {
      value = value.split("\\n").join("\n")
    }
  }

  let type = Hue.active_settings(setting)

  if (Hue[type][setting] === value) {
    if (show_feedback) {
      Hue.feedback(`Setting "${setting}" is already set to that`)
    }

    return false
  }

  let setting_obj = Hue.user_settings[setting]

  Hue[type][setting] = value
  Hue.modify_setting_widget(type, setting)
  setting_obj.action(type, false)
  Hue[`save_${type}`](force)

  if (show_feedback) {
    Hue.feedback(`Setting "${setting}" succesfully modified`)
  }
}

// Shows a window with a form to enter a string received by Export Settings
// Used to import settings from one client to another
Hue.show_import_settings = function () {
  let s = `
    <div class='container_22'>
        Paste code generated by Export Settings
        <textarea id='import_settings_textarea' rows=5 class='setting_textarea'></textarea>
        <div class='menu_item inline action pointer' id='import_settings_apply'>Apply</div>
    </div>
    `

  Hue.msg_info2.show(["Import Settings", s], function () {
    $("#import_settings_textarea").focus()
    $("#import_settings_apply").click(function () {
      Hue.process_imported_settings()
    })

    Hue.import_settings_open = true
  })
}

// Processes the string entered in the import settings window
Hue.process_imported_settings = function () {
  let code = $("#import_settings_textarea").val().trim()

  if (code === "") {
    return false
  }

  try {
    eval(code)
  } catch (err) {
    alert("Code provided is invalid")
  }
}

// Shows a window that displays strings to export settings to another client
// It shows different kinds of export methods
// A string is then entered in Import Settings in another client and executed
Hue.show_export_settings = function () {
  let gsettings = localStorage.getItem(Hue.ls_global_settings)
  let rsettings = localStorage.getItem(Hue.ls_room_settings)
  let delay = Hue.local_storage_save_delay * 2
  let code = `let gsettings = ${gsettings}; Hue.save_local_storage(Hue.ls_global_settings, gsettings); let rsettings = ${rsettings}; Hue.save_local_storage(Hue.ls_room_settings, rsettings); Hue.delay_reload_client(${delay})`
  let code2 = `let gsettings = ${gsettings}; Hue.save_local_storage(Hue.ls_global_settings, gsettings); Hue.delay_reload_client(${delay})`
  let code3 = `let rsettings = ${rsettings}; Hue.save_local_storage(Hue.ls_room_settings, rsettings); Hue.delay_reload_client(${delay})`

  let s = `
    <div class='container_22'>

        <div id='export_settings_info'  class='grid_column_center'>
            <div>In case you want to export your settings from one browser to another.</div>
            <div>You can import either Global Settings, Room Settings, or both.</div>
            <div>Room Settings copies every room's settings, not just the current one.</div>
            <div>To do this, copy one of the codes below, and paste it in Import Settings in the other browser.</div>
        </div>

        <div class='export_settings_textarea_label'>(a) Use this code if you want to import <span class='bold'>Global</span> and <span class='bold'>Room</span> Settings</div>
        <textarea rows=5 class='setting_textarea export_settings_textarea'>${code}</textarea>

        <div class='export_settings_textarea_label'>(b) Use this code if you only want to import <span class='bold'>Global</span> Settings</div>
        <textarea rows=5 class='setting_textarea export_settings_textarea'>${code2}</textarea>

        <div class='export_settings_textarea_label'>(c) Use this code if you only want to import <span class='bold'>Room</span> Settings</div>
        <textarea rows=5 class='setting_textarea'>${code3}</textarea>
    </div>
    `

  Hue.msg_info2.show(["Export Settings", s])
}

// Apply media percentages and positions
Hue.prepare_media_settings = function () {
  Hue.apply_media_percentages()
  Hue.apply_media_positions()
}

// Opens a settings window and goes to a specific category
Hue.open_user_settings_category = function (
  category,
  type = "global_settings"
) {
  Hue[`show_${type}`]()
  Hue.change_settings_window_category(category)
}

// Goes to a specific item in a settings window
// Opens the toggler if it has one
Hue.go_to_user_settings_item = function (setting) {
  let type = Hue.which_user_settings_window_is_open()

  $(`#${type}_container .settings_item`).each(function () {
    if ($(this).data("setting") === setting) {
      let toggler_container = $(this).closest(".toggler_main_container")
      let toggler = toggler_container.find(".toggler").eq(0)

      if (toggler.length === 0) {
        toggler_container = $(this).find(".toggler_main_container").eq(0)
        toggler = toggler_container.find(".toggler").eq(0)
      }

      if (toggler.length > 0) {
        Hue.set_toggler(type, toggler, "open")
        toggler_container[0].scrollIntoView({ block: "center" })
      } else {
        this.scrollIntoView({ block: "center" })
      }

      return false
    }
  })
}

// Checks which type of settings window is open
Hue.which_user_settings_window_is_open = function () {
  let type = false

  if (Hue.msg_global_settings.is_highest()) {
    type = "global_settings"
  } else if (Hue.msg_room_settings.is_highest()) {
    type = "room_settings"
  }

  return type
}

// Gets the selected settings window category
Hue.get_selected_user_settings_category = function (type) {
  let category = false

  $(`#settings_window_left_${type} .settings_window_category`).each(
    function () {
      let selected = $(this).data("selected_category")

      if (selected) {
        category = $(this).data("category")
        return false
      }
    }
  )

  return category
}

// Change the active category in a settings window
Hue.change_settings_window_category = function (category, type = false) {
  type = type ? type : Hue.which_user_settings_window_is_open()

  if (!type) {
    return false
  }

  let element = $(`#settings_window_category_${category}_${type}`)[0]
  let main = $(element).closest(".settings_main_window")

  main.find(".settings_window_category").each(function () {
    $(this)
      .find(".settings_window_category_text")
      .eq(0)
      .removeClass("border_bottom")
    $(this).data("selected_category", false)
  })

  $(element)
    .find(".settings_window_category_text")
    .eq(0)
    .addClass("border_bottom")
  $(element).data("selected_category", true)

  main.find(".settings_window_category_container_selected").each(function () {
    $(this).removeClass("settings_window_category_container_selected")
    $(this).addClass("settings_window_category_container")
  })

  let container = $(`#${$(element).data("category_container")}`)

  container.removeClass("settings_window_category_container")
  container.addClass("settings_window_category_container_selected")
}

// Overrides a global setting by triggering a click on the room setting overrider
Hue.enable_setting_override = function (setting) {
  if (Hue.room_settings[`${setting}_override`]) {
    return false
  }

  $(`#room_settings_${setting}_overrider`).click()
}

// Filter a settings window
Hue.do_settings_filter = function (type, filter = false) {
  if (filter) {
    filter = filter.trim()
  }

  let sfilter = filter ? filter : ""

  $(`#${type}_filter`).val(sfilter)

  let words

  if (filter) {
    let lc_value = Hue.utilz.clean_string2(filter).toLowerCase()
    words = lc_value.split(" ").filter((x) => x.trim() !== "")
  }

  $(`#${type}_container .settings_top_level_item`).each(function () {
    if (filter) {
      let text = Hue.utilz.clean_string2($(this).text()).toLowerCase()

      if (words.some((word) => text.includes(word))) {
        $(this).css("display", "block")
      } else {
        $(this).css("display", "none")
      }
    } else {
      $(this).css("display", "block")
    }
  })

  let current_category = Hue.get_selected_user_settings_category(type)
  let current_category_visible = true
  let active_category = false

  $(`#${type}_container .settings_category`).each(function () {
    let category = $(this).data("category")
    let count = $(this).find(
      ".settings_top_level_item:not([style*='display: none'])"
    ).length

    if (count === 0) {
      if (category === current_category) {
        current_category_visible = false
      }

      $(`#settings_window_category_${category}_${type}`).css("display", "none")
    } else {
      if (!active_category) {
        active_category = category
      }

      $(`#settings_window_category_${category}_${type}`).css("display", "flex")
    }
  })

  let new_category = current_category_visible
    ? current_category
    : active_category

  if (new_category) {
    Hue.change_settings_window_category(new_category, type)
  }

  if (!filter) {
    Hue.check_hideable_settings()
  }

  Hue.scroll_settings_window_to_top(type)
}

// Makes a setting invisible
Hue.hide_setting = function (type, name) {
  $(`#${type}_${name}`)
    .closest(".settings_top_level_item")
    .css("display", "none")
  $(`#${type}_${name}`)
    .closest(".settings_top_level_item")
    .addClass("hidden_setting")
}

// Makes a setting visible
Hue.unhide_setting = function (type, name) {
  $(`#${type}_${name}`)
    .closest(".settings_top_level_item")
    .css("display", "block")
  $(`#${type}_${name}`)
    .closest(".settings_top_level_item")
    .removeClass("hidden_setting")
}

// Checks to see what settings should be invisible in the settings window
// This depends on the state of other certain settings
Hue.check_hideable_settings = function () {
  if (Hue.get_setting("theme_mode") === "room") {
    Hue.hide_setting("global_settings", "theme_color")
    Hue.hide_setting("global_settings", "text_color")
    Hue.hide_setting("room_settings", "theme_color")
    Hue.hide_setting("room_settings", "text_color")
  } else {
    Hue.unhide_setting("global_settings", "theme_color")
    Hue.unhide_setting("global_settings", "text_color")
    Hue.unhide_setting("room_settings", "theme_color")
    Hue.unhide_setting("room_settings", "text_color")
  }

  let background_mode = Hue.get_setting("background_mode")

  if (background_mode === "room" || background_mode === "custom_solid") {
    Hue.hide_setting("global_settings", "background_url")
    Hue.hide_setting("global_settings", "background_tile_dimensions")
    Hue.hide_setting("room_settings", "background_url")
    Hue.hide_setting("room_settings", "background_tile_dimensions")
  } else {
    Hue.unhide_setting("global_settings", "background_url")
    Hue.unhide_setting("room_settings", "background_url")

    if (background_mode === "custom_tiled") {
      Hue.unhide_setting("global_settings", "background_tile_dimensions")
      Hue.unhide_setting("room_settings", "background_tile_dimensions")
    } else {
      Hue.hide_setting("global_settings", "background_tile_dimensions")
      Hue.hide_setting("room_settings", "background_tile_dimensions")
    }
  }
}
// Reloads the client
Hue.reload_client = function () {
  Hue.user_leaving = true
  window.location = window.location
}

// Reloads the client with a delay
Hue.delay_reload_client = function (delay) {
  setTimeout(function () {
    Hue.reload_client()
  }, delay)
}

// Reconnect asynchronously
Hue.refresh_client = function () {
  if (Hue.connecting || Hue.room_locked || Hue.socket.connected) {
    return false
  }

  Hue.connecting = true
  Hue.start_socket()
}

// Send a signal to an Electron client
Hue.electron_signal = function (func, data = {}) {
  if (window["electron_api"] === undefined) {
    return false
  }

  if (window["electron_api"][func] !== undefined) {
    window["electron_api"][func](data)
  }
}

// Simple emit to check server response
Hue.ping_server = function () {
  Hue.socket_emit("ping_server", { date: Date.now() })
}

// Calculates how much time the pong response took to arrive
Hue.pong_received = function (data) {
  let nice_time = Hue.utilz.nice_time(Date.now(), data.date)
  Hue.feedback(`Pong: ${nice_time}`)
}

// Only for superusers
// Sends a system restart signal that tells all clients to refresh
Hue.send_system_restart_signal = function () {
  Hue.socket_emit("system_restart_signal", {})
}

// Shows a message saying the client disconnects
// When clicked the client is refreshed
Hue.show_reload_button = function () {
  Hue.feedback(
    "Disconnected. Click to reload, or middle click to activate auto connect",
    {
      onclick: function () {
        Hue.refresh_client()
      },
      on_middle_click: function () {
        Hue.modify_setting("autoconnect true", false, true)
        Hue.refresh_client()
      },
      brk: Hue.get_chat_icon("plug")
    }
  )
}

// When the system suggests a refresh
Hue.system_restart_signal = function () {
  let item = Hue.make_info_popup_item({icon: "info", message: "Refresh is recommended"})
  Hue.show_popup(Hue.make_info_popup(), item)
}
// This is used to declare actions for server responses
Hue.server_update_events = {
  joined: (data) => {
    Hue.on_join(data)
  },
  typing: (data) => {
    Hue.show_typing(data)
  },
  chat_message: (data) => {
    Hue.on_chat_message(data)
  },
  request_slice_upload: (data) => {
    Hue.request_slice_upload(data)
  },
  upload_ended: (data) => {
    Hue.upload_ended(data)
  },
  changed_image_source: (data) => {
    Hue.setup_image("change", data)
  },
  changed_tv_source: (data) => {
    Hue.setup_tv("change", data)
  },
  restarted_tv_source: (data) => {
    Hue.setup_tv("restart", data)
  },
  profile_image_changed: (data) => {
    Hue.profile_image_changed(data)
  },
  user_join: (data) => {
    Hue.user_join(data)
  },
  receive_roomlist: (data) => {
    Hue.on_roomlist_received(data)
  },
  upload_error: (data) => {
    Hue.show_upload_error()
  },
  topic_change: (data) => {
    Hue.announce_topic_change(data)
  },
  room_name_changed: (data) => {
    Hue.announce_room_name_change(data)
  },
  log_changed: (data) => {
    Hue.announce_log_change(data)
  },
  log_cleared: (data) => {
    Hue.announce_log_cleared(data)
  },
  announce_role_change: (data) => {
    Hue.announce_role_change(data)
  },
  voices_resetted: (data) => {
    Hue.announce_voices_resetted(data)
  },
  ops_resetted: (data) => {
    Hue.announce_ops_resetted(data)
  },
  announce_removed_ops: (data) => {
    Hue.announce_removed_ops(data)
  },
  announce_ban: (data) => {
    Hue.announce_ban(data)
  },
  announce_unban: (data) => {
    Hue.announce_unban(data)
  },
  announce_unban_all: (data) => {
    Hue.announce_unban_all(data)
  },
  receive_ban_count: (data) => {
    Hue.receive_ban_count(data)
  },
  nothing_to_unban: (data) => {
    Hue.feedback("There was nothing to unban")
  },
  nothing_to_clear: (data) => {
    Hue.feedback("There was nothing to clear")
  },
  forbidden_user: (data) => {
    Hue.forbidden_user()
  },
  nothing_was_found: (data) => {
    Hue.feedback("Nothing was found")
  },
  user_not_found: (data) => {
    Hue.feedback("User doesn't exist")
  },
  user_not_in_room: (data) => {
    Hue.user_not_in_room()
  },
  no_ops_to_remove: (data) => {
    Hue.feedback("There were no ops to remove")
  },
  no_voices_to_reset: (data) => {
    Hue.feedback("There were no voices to reset")
  },
  no_ops_to_reset: (data) => {
    Hue.feedback("There were no ops to reset")
  },
  is_already: (data) => {
    Hue.is_already(data.who, data.what)
  },
  user_already_banned: (data) => {
    Hue.feedback("User is already banned")
  },
  user_already_unbanned: (data) => {
    Hue.feedback("User is already unbanned")
  },
  privacy_change: (data) => {
    Hue.announce_privacy_change(data)
  },
  image_not_found: (data) => {
    Hue.feedback("The image couldn't be found")
  },
  song_not_found: (data) => {
    Hue.feedback("The song couldn't be found")
  },
  video_not_found: (data) => {
    Hue.feedback("The video couldn't be found")
  },
  image_cooldown_wait: (data) => {
    Hue.feedback(
      "The image was changed recently. You must wait a while before changing it again"
    )
  },
  tv_cooldown_wait: (data) => {
    Hue.feedback(
      "The tv was changed recently. You must wait a while before changing it again"
    )
  },
  room_created: (data) => {
    Hue.on_room_created(data)
  },
  redirect: (data) => {
    Hue.goto_url(data.location)
  },
  username_already_exists: (data) => {
    Hue.feedback(`${data.username} already exists`)
  },
  email_already_exists: (data) => {
    Hue.feedback(`${data.email} already exists`)
  },
  new_username: (data) => {
    Hue.announce_new_username(data)
  },
  password_changed: (data) => {
    Hue.password_changed(data)
  },
  email_changed: (data) => {
    Hue.email_changed(data)
  },
  room_image_mode_change: (data) => {
    Hue.announce_room_image_mode_change(data)
  },
  room_tv_mode_change: (data) => {
    Hue.announce_room_tv_mode_change(data)
  },
  theme_mode_changed: (data) => {
    Hue.announce_theme_mode_change(data)
  },
  theme_change: (data) => {
    Hue.announce_theme_change(data)
  },
  background_image_change: (data) => {
    Hue.announce_background_image_change(data)
  },
  background_mode_changed: (data) => {
    Hue.announce_background_mode_change(data)
  },
  background_effect_changed: (data) => {
    Hue.announce_background_effect_change(data)
  },
  background_tile_dimensions_changed: (data) => {
    Hue.announce_background_tile_dimensions_change(data)
  },
  text_color_mode_changed: (data) => {
    Hue.announce_text_color_mode_change(data)
  },
  text_color_changed: (data) => {
    Hue.announce_text_color_change(data)
  },
  voice_permission_change: (data) => {
    Hue.announce_voice_permission_change(data)
  },
  op_permission_change: (data) => {
    Hue.announce_op_permission_change(data)
  },
  user_disconnect: (data) => {
    Hue.user_disconnect(data)
  },
  others_disconnected: (data) => {
    Hue.show_others_disconnected(data)
  },
  whisper: (data) => {
    Hue.whisper_received(data)
  },
  system_broadcast: (data) => {
    Hue.whisper_received(data)
  },
  system_restart_signal: (data) => {
    Hue.system_restart_signal()
  },
  error_occurred: (data) => {
    Hue.error_occurred()
  },
  email_change_code_sent: (data) => {
    Hue.feedback(
      `Verification code sent. Use the command sent to ${data.email}. Email might take a couple of minutes to arrive`
    )
  },
  email_change_code_not_sent: (data) => {
    Hue.feedback(
      `Verification code not sent yet. Use ${Hue.config.commands_prefix}changeemail [new_email] to get a verification code`
    )
  },
  email_change_wait: (data) => {
    Hue.feedback(`You must wait a while before changing the email again`)
  },
  email_change_wrong_code: (data) => {
    Hue.feedback(`Code supplied didn't match`)
  },
  email_change_expired_code: (data) => {
    Hue.feedback(`Code supplied has expired`)
  },
  create_room_wait: (data) => {
    Hue.create_room_cooldown_message()
  },
  pong_received: (data) => {
    Hue.pong_received(data)
  },
  reaction_received: (data) => {
    Hue.show_reaction(data)
  },
  cannot_embed_iframe: (data) => {
    Hue.feedback("That website cannot be embedded")
  },
  same_image: (data) => {
    Hue.feedback("Image is already set to that")
  },
  same_tv: (data) => {
    Hue.feedback("TV is already set to that")
  },
  receive_admin_activity: (data) => {
    Hue.show_admin_activity(data.messages)
  },
  receive_access_log: (data) => {
    Hue.show_access_log(data.messages)
  },
  receive_admin_list: (data) => {
    Hue.show_admin_list(data)
  },
  receive_ban_list: (data) => {
    Hue.show_ban_list(data)
  },
  activity_trigger: (data) => {
    Hue.push_to_activity_bar(data.user_id, Date.now())
  },
  message_deleted: (data) => {
    Hue.remove_message_from_chat(data)
  },
  announcement: (data) => {
    Hue.show_announcement(data)
  },
  bio_changed: (data) => {
    Hue.bio_changed(data)
  },
  badge_received: (data) => {
    Hue.on_badge_received(data)
  },
  report_tv_progress: (data) => {
    Hue.report_tv_progress(data)
  },
  receive_tv_progress: (data) => {
    Hue.receive_tv_progress(data)
  },
  media_info_changed: (data) => {
    Hue.media_info_changed(data)
  },
  new_message_board_post: (data) => {
    Hue.on_message_board_received(data)
  },
  message_board_post_deleted: (data) => {
    Hue.remove_message_board_post(data)
  },
  message_board_cleared: (data) => {
    Hue.on_message_board_cleared(data)
  },
  audio_clip_changed: (data) => {
    Hue.audio_clip_changed(data)
  },
  done: (data) => {
    Hue.feedback("Done")
  },
}

// Centralized function to initiate a socket emit to the server
Hue.socket_emit = function (destination, data, force = false) {
  if (!force) {
    if (!Hue.connected && !Hue.room_locked) {
      return
    }
  }

  let obj = {
    destination: destination,
    data: data,
  }

  Hue.emit_queue.push(obj)

  if (Hue.emit_queue_timeout === undefined) {
    Hue.check_emit_queue()
  }

  Hue.num_socket_out += 1
}

// Checks the socket emit queue to send the next emit
// A throttled queue is used to control the rate in which emits are sent
Hue.check_emit_queue = function () {
  if (Hue.emit_queue.length > 0) {
    let obj = Hue.emit_queue[0]

    if (obj !== "first") {
      Hue.do_socket_emit(obj)
    }

    Hue.emit_queue.shift()

    Hue.emit_queue_timeout = setTimeout(function () {
      Hue.check_emit_queue()
    }, Hue.config.socket_emit_throttle)
  } else {
    clearTimeout(Hue.emit_queue_timeout)
    Hue.emit_queue_timeout = undefined
  }
}

// Actually do the socket emit
Hue.do_socket_emit = function (obj) {
  if (Hue.debug_socket) {
    Hue.loginfo(
      `Emit: ${obj.destination} | Data: ${JSON.stringify(obj.data).substring(
        0,
        250
      )}`
    )
  }

  obj.data.server_method_name = obj.destination
  Hue.socket.emit("server_method", obj.data)
}

// Starts and setups the client's socket
Hue.start_socket = function () {
  Hue.socket = io("/", {
    reconnection: false,
  })

  Hue.socket.on("connect", () => {
    Hue.loginfo("Socket Connected", "color:green")
    Hue.connecting = false
    let no_message_log = !Hue.get_setting("message_log")

    Hue.socket_emit("join_room", {
      room_id: Hue.room_id,
      user_id: Hue.user_id,
      token: Hue.jwt_token,
      no_message_log: no_message_log,
    }, true)
  })

  Hue.socket.on("connect_error", () => {
    if (Hue.connecting) {
      if (Hue.started) {
        setTimeout(function () {
          Hue.connecting = false
          Hue.on_disconnect()
        }, 3000)
      }
    }
  })

  Hue.socket.on("disconnect", (reason) => {
    Hue.loginfo("Socket Disconnected", "color:red")
    Hue.connected = false

    if (Hue.started) {
      Hue.on_disconnect()
    }
  })

  Hue.socket.on("update", (obj) => {
    let type = obj.type
    let data = obj.data

    if (Hue.server_update_events[type]) {
      Hue.server_update_events[type](data)
    }

    Hue.num_socket_in += 1
  })
}

// Actions on disconnect
Hue.on_disconnect = function () {
  if (Hue.user_leaving) {
    return
  }

  Hue.userlist = []
  Hue.activity_list = []
  Hue.update_userlist()
  Hue.update_activity_bar()

  if (Hue.open_profile_username) {
    Hue.show_profile(Hue.open_profile_username)
  }

  if (Hue.get_setting("autoconnect")) {
    if ($("#reconnecting_feedback").length === 0) {
      Hue.feedback("Reconnecting...", { container_id: "reconnecting_feedback" })
    }

    setTimeout(function () {
      Hue.refresh_client()
    }, 3000)
  } else {
    Hue.show_reload_button()
  }

  Hue.generate_favicon(-1)
}

// Disconnects the user's socket
Hue.disconnect_socket = function () {
  Hue.socket.close()
}

// Some stats in socket i/o
Hue.start_socket_stats = function () {
  setInterval(() => {
    Hue.loginfo(`Socket Messsages IN (last minute): ${Hue.num_socket_in}`)
    Hue.loginfo(`Socket Messsages OUT (last minute): ${Hue.num_socket_out}`)
    Hue.num_socket_in = 0
    Hue.num_socket_out = 0
  }, 60 * 1000);
}
// Setups theme and background variables from initial data
Hue.setup_theme_and_background = function (data) {
  Hue.set_background_image(data)
  Hue.theme_mode = data.theme_mode
  Hue.theme = data.theme
  Hue.background_mode = data.background_mode
  Hue.background_effect = data.background_effect
  Hue.background_tile_dimensions = data.background_tile_dimensions
  Hue.text_color_mode = data.text_color_mode
  Hue.text_color = data.text_color
}

// Sets an applies background images from data
Hue.set_background_image = function (data) {
  if (data.background_image !== "") {
    Hue.background_image = data.background_image
  } else {
    Hue.background_image = Hue.config.default_background_image_url
  }

  Hue.background_image_setter = data.background_image_setter
  Hue.background_image_date = data.background_image_date
  Hue.apply_background()
  Hue.config_admin_background_image()
}

// Applies the background to all background elements
Hue.apply_background = function () {
  let bg_image, bg_mode, bg_tile_dimensions
  let background_mode = Hue.get_setting("background_mode")
  let background_url = Hue.get_setting("background_url")
  let tile_dimensions = Hue.get_setting("background_tile_dimensions")

  if (background_mode === "room") {
    if (
      Hue.loaded_image.source &&
      (Hue.background_mode === "mirror" ||
        Hue.background_mode === "mirror_tiled")
    ) {
      bg_image = Hue.loaded_image.source
    } else {
      bg_image = Hue.background_image
    }

    bg_mode = Hue.background_mode
    bg_tile_dimensions = Hue.background_tile_dimensions
  } else if (background_mode.startsWith("custom")) {
    if (!background_url) {
      $(".background_image").css("background-image", "none")
      return false
    }

    bg_image = background_url
    bg_mode = background_mode.replace("custom_", "")
    bg_tile_dimensions = tile_dimensions
  }

  if (Hue.background_image_enabled()) {
    $(".background_image").css("background-image", `url('${bg_image}')`)
  } else {
    $(".background_image").css("background-image", "none")
  }

  if (bg_mode === "normal" || bg_mode === "mirror") {
    $(".background_image").each(function () {
      $(this).removeClass("background_image_tiled")
    })
  } else if (bg_mode === "tiled" || bg_mode === "mirror_tiled") {
    $(".background_image").each(function () {
      $(this).addClass("background_image_tiled")
    })
  }

  $(".background_image").each(function () {
    $(this).removeClass("background_image_blur")
    $(this).removeClass("background_image_grayscale")
    $(this).removeClass("background_image_saturate")
    $(this).removeClass("background_image_brightness")
  })

  if (Hue.background_effect === "blur" && bg_mode !== "solid") {
    $(".background_image").each(function () {
      $(this).addClass("background_image_blur")
    })
  } else if (Hue.background_effect === "grayscale" && bg_mode !== "solid") {
    $(".background_image").each(function () {
      $(this).addClass("background_image_grayscale")
    })
  } else if (Hue.background_effect === "saturate" && bg_mode !== "solid") {
    $(".background_image").each(function () {
      $(this).addClass("background_image_saturate")
    })
  } else if (Hue.background_effect === "brightness" && bg_mode !== "solid") {
    $(".background_image").each(function () {
      $(this).addClass("background_image_brightness")
    })
  }

  document.documentElement.style.setProperty('--bg_tile_dimensions', bg_tile_dimensions)
}

// Theme Mode setter
Hue.set_theme_mode = function (mode) {
  Hue.theme_mode = mode
  Hue.config_admin_theme_mode()
}

// Theme setter
Hue.set_theme = function (color) {
  Hue.theme = color
  Hue.apply_theme()
  Hue.config_admin_theme()
}

// This is where the color theme gets built and applied
// This builds CSS declarations based on the current theme color
// The CSS declarations are inserted into the DOM
// Older declarations get removed
Hue.apply_theme = function () {
  let theme
  let theme_mode = Hue.get_setting("theme_mode")

  if (theme_mode === "room") {
    if (Hue.theme_mode === "automatic" && Hue.dominant_theme) {
      theme = Hue.dominant_theme
    } else {
      theme = Hue.theme
    }
  } else if (theme_mode === "custom") {
    theme = Hue.get_setting("theme_color")
  }

  if (theme.startsWith("#")) {
    theme = Hue.colorlib.array_to_rgb(Hue.colorlib.hex_to_rgb(theme))
  }

  let background_color = theme
  let background_color_2 = Hue.colorlib.get_lighter_or_darker(
    background_color,
    Hue.config.color_contrast_amount_1
  )
  let font_color

  if (theme_mode === "room") {
    if (Hue.text_color_mode === "custom") {
      font_color = Hue.text_color
    } else {
      font_color = Hue.colorlib.get_lighter_or_darker(
        background_color,
        Hue.config.color_contrast_amount_2
      )
    }
  } else if (theme_mode === "custom") {
    font_color = Hue.get_setting("text_color")
  }

  let background_color_a = Hue.colorlib.rgb_to_rgba(
    background_color,
    Hue.config.opacity_amount_1
  )
  let background_color_2_a_2ha = Hue.colorlib.rgb_to_rgba(
    background_color_2,
    Hue.config.opacity_amount_1
  )
  let background_color_a_2 = Hue.colorlib.rgb_to_rgba(
    background_color_2,
    Hue.config.opacity_amount_3
  )
  let color_3 = Hue.colorlib.get_lighter_or_darker(
    background_color,
    Hue.config.color_contrast_amount_3
  )
  let color_4 = Hue.colorlib.get_lighter_or_darker(
    background_color,
    Hue.config.color_contrast_amount_4
  )
  let color_4_a = Hue.colorlib.rgb_to_rgba(color_4, Hue.config.opacity_amount_3)
  let color_4_alpha = Hue.colorlib.rgb_to_rgba(
    color_4,
    Hue.config.opacity_amount_1
  )
  let overlay_color = Hue.colorlib.rgb_to_rgba(
    color_3,
    Hue.config.opacity_amount_3
  )
  let slight_background = Hue.colorlib.get_lighter_or_darker(
    background_color,
    Hue.config.color_contrast_amount_5
  )
  let slight_background_alpha = Hue.colorlib.rgb_to_rgba(
    slight_background,
    Hue.config.opacity_amount_3
  )

  let panel_bg_color

  if (Hue.get_setting("transparent_panels")) {
    panel_bg_color = background_color_2_a_2ha
  } else {
    panel_bg_color = background_color_2
  }

  $(".panel").css("background-color", panel_bg_color)
  $(".panel").css("color", font_color)

  document.documentElement.style.setProperty('--color_4', color_4)
  document.documentElement.style.setProperty('--color_4_a', color_4_a)
  document.documentElement.style.setProperty('--color_4_alpha', color_4_alpha)
  document.documentElement.style.setProperty('--color_3', color_3)
  document.documentElement.style.setProperty('--slight_background', slight_background)
  document.documentElement.style.setProperty('--slight_background_alpha', slight_background_alpha)
  document.documentElement.style.setProperty('--font_color', font_color)
  document.documentElement.style.setProperty('--background_color_2', background_color_2)
  document.documentElement.style.setProperty('--background_color_a', background_color_a)
  document.documentElement.style.setProperty('--background_color_a_2', background_color_a_2)
  document.documentElement.style.setProperty('--background_color', background_color)
  document.documentElement.style.setProperty('--overlay_color', overlay_color)
}

// Changes the theme mode
Hue.change_theme_mode = function (mode) {
  if (!Hue.check_op_permission(Hue.role, "theme")) {
    return false
  }

  if (mode !== "automatic" && mode !== "custom") {
    Hue.feedback("Invalid theme mode")
    return false
  }

  if (mode === Hue.theme_mode) {
    Hue.feedback(`Theme mode is already ${Hue.theme_mode}`)
    return false
  }

  Hue.socket_emit("change_theme_mode", { mode: mode })
}

// Changes the theme
Hue.change_theme = function (color) {
  if (!Hue.check_op_permission(Hue.role, "theme")) {
    return false
  }

  color = Hue.utilz.clean_string5(color).toLowerCase()

  if (color === undefined) {
    return false
  }

  if (!Hue.utilz.validate_hex(color)) {
    Hue.feedback("Not a valid hex color value")
    return false
  }

  if (color === Hue.theme) {
    Hue.feedback("Theme is already set to that")
    return false
  }

  Hue.socket_emit("change_theme", { color: color })
}

// Announces theme mode change
Hue.announce_theme_mode_change = function (data) {
  Hue.show_room_notification(
    data.username,
    `${data.username} changed the theme mode to ${data.mode}`
  )
  Hue.set_theme_mode(data.mode)
  Hue.apply_theme()
}

// Announces theme change
Hue.announce_theme_change = function (data) {
  Hue.show_room_notification(
    data.username,
    `${data.username} changed the theme to ${data.color}`
  )
  Hue.set_theme(data.color)
}

// Picker window to select how to change the background image
Hue.open_background_image_select = function () {
  Hue.msg_info2.show([
    "Change Background Image",
    Hue.template_background_image_select(),
  ], function () {
    $("#background_image_select_url").click(function () {
      Hue.open_background_image_input()
    })

    $("#background_image_select_upload").click(function () {
      Hue.open_background_image_picker()
    })
  })
  Hue.horizontal_separator.separate("background_image_select_container")
}

// If upload is chosen as the method to change the background image
// the file dialog is opened
Hue.open_background_image_picker = function () {
  Hue.msg_info2.close()

  $("#background_image_input").click()
}

// If a URL source is chosen as the method to change the background image
// this window is opened
Hue.open_background_image_input = function () {
  Hue.msg_info2.show(
    ["Change Background Image", Hue.template_background_image_input()],
    function () {
      $("#background_image_input_submit").click(function () {
        Hue.background_image_input_action()
      })

      $("#background_image_input_text").focus()
      Hue.background_image_input_open = true
    }
  )
}

// On background image source input change
Hue.background_image_input_action = function () {
  let src = $("#background_image_input_text").val().trim()

  if (Hue.change_background_image_source(src)) {
    Hue.msg_info2.close()
  }
}

// On background image selected for upload
Hue.background_image_selected = function (input) {
  if (!Hue.check_op_permission(Hue.role, "background")) {
    return false
  }

  let file = input.files[0]
  let size = file.size / 1024

  $("#background_image_input").closest("form").get(0).reset()

  if (size > Hue.config.max_image_size) {
    Hue.msg_info.show("File is too big")
    return false
  }

  $("#admin_background_image").attr(
    "src",
    Hue.config.background_image_loading_url
  )

  Hue.upload_file({ file: file, action: "background_image_upload" })
}

// Change the background image with a URL
Hue.change_background_image_source = function (src) {
  if (!Hue.check_op_permission(Hue.role, "background")) {
    return false
  }

  if (src === undefined) {
    return false
  }

  if (src !== "default") {
    if (!Hue.utilz.is_url(src)) {
      return false
    }

    src = src.replace(/\.gifv/g, ".gif")

    if (src === Hue.background_image) {
      Hue.feedback("Background image is already set to that")
      return false
    }

    if (src.length === 0) {
      return false
    }

    if (src.length > Hue.config.max_media_source_length) {
      return false
    }

    let extension = Hue.utilz.get_extension(src).toLowerCase()

    if (!extension || !Hue.utilz.image_extensions.includes(extension)) {
      return false
    }

    if (Hue.check_domain_list("image", src)) {
      Hue.feedback("Image sources from that domain are not allowed")
      return false
    }
  } else {
    if (Hue.background_image === Hue.config.default_background_image_url) {
      Hue.feedback("Background image is already set to that")
      return false
    }
  }

  Hue.socket_emit("change_background_image_source", { src: src })

  return true
}

// Announces background image changes
Hue.announce_background_image_change = function (data) {
  Hue.show_room_notification(
    data.username,
    `${data.username} changed the background image`
  )
  Hue.set_background_image(data)
}

// Changes the background mode
Hue.change_background_mode = function (mode) {
  if (!Hue.check_op_permission(Hue.role, "background")) {
    return false
  }

  if (
    mode !== "normal" &&
    mode !== "tiled" &&
    mode !== "mirror" &&
    mode !== "mirror_tiled" &&
    mode !== "solid"
  ) {
    Hue.feedback("Invalid background mode")
    return false
  }

  if (mode === Hue.background_mode) {
    Hue.feedback(`Background mode is already ${Hue.background_mode}`)
    return false
  }

  Hue.socket_emit("change_background_mode", { mode: mode })
}

// Announces background mode changes
Hue.announce_background_mode_change = function (data) {
  Hue.show_room_notification(
    data.username,
    `${data.username} changed the background mode to ${data.mode}`
  )
  Hue.set_background_mode(data.mode)
}

// Changes background tile dimensions
Hue.change_background_tile_dimensions = function (dimensions) {
  if (!Hue.check_op_permission(Hue.role, "background")) {
    return false
  }

  if (dimensions.length > Hue.config.safe_limit_1) {
    return false
  }

  dimensions = Hue.utilz.clean_string2(dimensions)

  if (dimensions.length === 0) {
    return false
  }

  if (dimensions === Hue.background_tile_dimensions) {
    return false
  }

  Hue.socket_emit("change_background_tile_dimensions", {
    dimensions: dimensions,
  })
}

// Announces background tile dimensions changes
Hue.announce_background_tile_dimensions_change = function (data) {
  Hue.show_room_notification(
    data.username,
    `${data.username} changed the background tile dimensions to ${data.dimensions}`
  )
  Hue.set_background_tile_dimensions(data.dimensions)
  Hue.apply_background()
}

// Check whether a background image should be enabled,
// depending on the background mode and settings
Hue.background_image_enabled = function () {
  let background_mode = Hue.get_setting("background_mode")

  if (background_mode === "room") {
    if (Hue.background_mode === "solid") {
      return false
    }

    if (
      Hue.background_mode === "mirror" ||
      Hue.background_mode === "mirror_tiled"
    ) {
      if (Hue.room_image_mode === "disabled") {
        return false
      }
    }
  } else {
    if (background_mode === "custom_solid") {
      return false
    }
  }

  return true
}

// Changes the background effect
Hue.change_background_effect = function (effect) {
  if (!Hue.check_op_permission(Hue.role, "background")) {
    return false
  }

  if (
    effect !== "none" &&
    effect !== "blur" &&
    effect !== "grayscale" &&
    effect !== "saturate" &&
    effect !== "brightness"
  ) {
    Hue.feedback("Invalid background effect")
    return false
  }

  if (effect === Hue.background_effect) {
    Hue.feedback(`Background effect is already ${Hue.background_effect}`)
    return false
  }

  Hue.socket_emit("change_background_effect", { effect: effect })
}

// Announces background effect changes
Hue.announce_background_effect_change = function (data) {
  Hue.show_room_notification(
    data.username,
    `${data.username} changed the background effect to ${data.effect}`
  )
  Hue.set_background_effect(data.effect)
}

// Background mode setter
Hue.set_background_mode = function (what) {
  Hue.background_mode = what
  Hue.config_admin_background_mode()
  Hue.apply_background()
}

// Background effect setter
Hue.set_background_effect = function (what) {
  Hue.background_effect = what
  Hue.config_admin_background_effect()
  Hue.apply_background()
}

// Background tile dimensions setter
Hue.set_background_tile_dimensions = function (dimensions) {
  Hue.background_tile_dimensions = dimensions
  Hue.config_admin_background_tile_dimensions()
}

// Changes the text color mode
Hue.change_text_color_mode = function (mode) {
  if (!Hue.check_op_permission(Hue.role, "theme")) {
    return false
  }

  if (mode !== "automatic" && mode !== "custom") {
    Hue.feedback("Invalid text color mode")
    return false
  }

  if (mode === Hue.text_color_mode) {
    Hue.feedback(`Text color mode is already ${Hue.text_color_mode}`)
    return false
  }

  Hue.socket_emit("change_text_color_mode", { mode: mode })
}

// Announces text color mode changes
Hue.announce_text_color_mode_change = function (data) {
  Hue.show_room_notification(
    data.username,
    `${data.username} changed the text color mode to ${data.mode}`
  )
  Hue.set_text_color_mode(data.mode)
  Hue.apply_theme()
}

// Text color mode setter
Hue.set_text_color_mode = function (mode) {
  Hue.text_color_mode = mode
  Hue.config_admin_text_color_mode()
}

// Changes the text color
Hue.change_text_color = function (color) {
  if (!Hue.check_op_permission(Hue.role, "theme")) {
    return false
  }

  color = Hue.utilz.clean_string5(color).toLowerCase()

  if (color === undefined) {
    return false
  }

  if (!Hue.utilz.validate_hex(color)) {
    Hue.feedback("Not a valid hex color value")
    return false
  }

  if (color === Hue.text_color) {
    Hue.feedback("Text color is already set to that")
    return false
  }

  Hue.socket_emit("change_text_color", { color: color })
}

// Announces text color changes
Hue.announce_text_color_change = function (data) {
  Hue.show_room_notification(
    data.username,
    `${data.username} changed the text color to ${data.color}`
  )
  Hue.set_text_color(data.color)
  Hue.apply_theme()
}

// Text color setter
Hue.set_text_color = function (color) {
  Hue.text_color = color
  Hue.config_admin_text_color()
}

// Change CSS variables
Hue.change_css_variable = function (name, value) {
  document.documentElement.style.setProperty(`--${name}`, value)
}

// Setups an tv object
// This handles tv objects received live from the server or from logged messages
// This is the entry function for tv objects to get registered, announced, and be ready for use
Hue.setup_tv = function (mode, odata = {}) {
  let data

  if (mode === "restart") {
    data = Hue.current_tv()
    data.date = odata.date
    data.info += ` | ${Hue.utilz.nice_date(data.date)}`
    data.message = `${odata.setter} restarted the tv`
    data.comment = odata.comment
    data.in_log = odata.in_log === undefined ? true : odata.in_log
  } else {
    data = {}

    data.id = odata.id
    data.user_id = odata.user_id
    data.type = odata.type
    data.source = odata.source
    data.title = odata.title
    data.setter = odata.setter
    data.date = odata.date
    data.query = odata.query
    data.comment = odata.comment
    data.nice_date = data.date ?
      Hue.utilz.nice_date(data.date) :
      Hue.utilz.nice_date()
    data.in_log = odata.in_log === undefined ? true : odata.in_log

    if (!data.setter) {
      data.setter = Hue.config.system_username
    }

    if (!data.source) {
      data.source = Hue.config.default_tv_source
      data.type = Hue.config.default_tv_type
      data.title = Hue.config.default_tv_title
    }

    if (!data.title) {
      data.title = data.source
    }

    data.message = `${
      data.setter
    } changed the tv to: ${Hue.utilz.conditional_quotes(data.title)}`

    if (data.type === "youtube") {
      let time = Hue.utilz.get_youtube_time(data.source)

      if (time !== 0) {
        data.message += ` (At ${Hue.utilz.humanize_seconds(time)})`
      }
    }

    let gets = data.id ? `${data.id.slice(-3)} | ` : ""

    data.info = `${gets}Setter: ${data.setter} | ${data.nice_date}`

    if (data.query) {
      data.info += ` | Search Term: "${data.query}"`
    }

    data.onclick = function () {
      Hue.open_url_menu({
        source: data.source,
        data: data,
        media_type: "tv"
      })
    }
  }

  if (!data.date) {
    data.date = Date.now()
  }

  if (data.message) {
    data.message_id = Hue.announce_tv(data).message_id
  }

  if (mode === "change" || mode === "show") {
    Hue.push_tv_changed(data)
  }

  if (mode === "change" || mode === "restart") {
    let bypass_lock = data.user_id === Hue.user_id

    if (mode === "change") {
      if (Hue.tv_locked) {
        $("#footer_lock_tv_icon").addClass("blinking")
      }

      Hue.change({
        type: "tv",
        force: true,
        bypass_lock: bypass_lock
      })
    } else if (mode === "restart") {
      Hue.change({
        type: "tv",
        force: true,
        play: true,
        bypass_lock: bypass_lock
      })
    }
  }
}

// Announce a tv change to the chat
Hue.announce_tv = function (data) {
  return Hue.public_feedback(data.message, {
    id: data.id,
    save: true,
    brk: Hue.get_chat_icon("tv"),
    title: data.info,
    onclick: data.onclick,
    date: data.date,
    type: data.type,
    username: data.setter,
    comment: data.comment,
    type: "tv_change",
    user_id: data.user_id,
    in_log: data.in_log,
    media_source: data.source,
    on_middle_click: function () {
      Hue.goto_url(data.source, "tab")
    }
  })
}

// Returns the current room tv
// The last tv in the tv changed array
// This is not necesarily the user's loaded tv
Hue.current_tv = function () {
  if (Hue.tv_changed.length > 0) {
    return Hue.tv_changed[Hue.tv_changed.length - 1]
  } else {
    return {}
  }
}

// Pushes a changed tv into the tv changed array
Hue.push_tv_changed = function (data) {
  Hue.tv_changed.push(data)

  if (Hue.tv_changed.length > Hue.config.media_changed_crop_limit) {
    Hue.tv_changed = Hue.tv_changed.slice(
      Hue.tv_changed.length - Hue.config.media_changed_crop_limit
    )
  }

  Hue.after_push_media_change("tv", data)
}

// Stops all defined tv players
Hue.stop_tv = function (hard_stop = true) {
  if (Hue.youtube_video_player) {
    Hue.youtube_video_player.pauseVideo()
  }

  if (Hue.twitch_video_player) {
    Hue.twitch_video_player.pause()
  }

  if (Hue.soundcloud_video_player) {
    Hue.soundcloud_video_player.pause()
  }

  if ($("#media_video").length > 0) {
    $("#media_video")[0].pause()

    if (hard_stop) {
      $("#media_video")[0].src = ""
    }
  }

  if (hard_stop) {
    $("#media_iframe_video").attr("src", "")
    $("#media_iframe_poster").css("display", "block")
  }
}

// Plays the active loaded tv
Hue.play_tv = function () {
  if (!Hue.tv_visible) {
    return false
  }

  if (Hue.current_tv().type === "youtube") {
    if (Hue.youtube_video_player) {
      Hue.youtube_video_player.playVideo()
    }
  } else if (Hue.current_tv().type === "twitch") {
    if (Hue.twitch_video_player) {
      Hue.twitch_video_player.play()
    }
  } else if (Hue.current_tv().type === "soundcloud") {
    if (Hue.soundcloud_video_player) {
      Hue.soundcloud_video_player.play()
    }
  } else if (Hue.current_tv().type === "video") {
    if ($("#media_video").length > 0) {
      $("#media_video")[0].play()
    }
  } else if (Hue.current_tv().type === "iframe") {
    $("#media_iframe_video").attr("src", Hue.current_tv().source)
    $("#media_iframe_poster").css("display", "none")
  } else {
    played = false
  }
}

// Destroys all tv players that don't match the item's type
// Makes the item's type visible
Hue.hide_tv = function (item = false) {
  $("#media_tv .media_container").each(function () {
    let id = $(this).attr("id")
    let type = id.replace("media_", "").replace("_video_container", "")

    if (!item || item.type !== type) {
      let new_el = $(`<div id='${id}' class='media_container'></div>`)
      new_el.css("display", "none")
      $(this).replaceWith(new_el)
      Hue[`${type}_video_player`] = undefined
      Hue[`${type}_video_player_requested`] = false
      Hue[`${type}_video_player_request`] = false
    } else {
      $(this).css("display", "flex")
    }
  })
}

// Loads a YouTube video
Hue.show_youtube_video = function (play = true) {
  let item = Hue.loaded_tv
  Hue.before_show_tv(item)
  let id = Hue.utilz.get_youtube_id(item.source)
  Hue.youtube_video_play_on_queue = play

  if (id[0] === "video") {
    Hue.youtube_video_player.cueVideoById({
      videoId: id[1],
      startSeconds: Hue.utilz.get_youtube_time(item.source),
    })
  } else if (id[0] === "list") {
    Hue.youtube_video_player.cuePlaylist({
      list: id[1][0],
      index: id[1][1]
    })
  } else {
    return false
  }

  Hue.after_show_tv()
}

// Loads a Twitch video
Hue.show_twitch_video = function (play = true) {
  let item = Hue.loaded_tv
  Hue.before_show_tv(item)
  let id = Hue.utilz.get_twitch_id(item.source)

  if (id[0] === "video") {
    Hue.twitch_video_player.setVideoSource(item.source)
  } else if (id[0] === "channel") {
    Hue.twitch_video_player.setChannel(id[1])
  } else {
    return false
  }

  if (play) {
    Hue.twitch_video_player.play()
  } else {
    clearTimeout(Hue.play_twitch_video_player_timeout)
    Hue.twitch_video_player.pause()
  }

  Hue.after_show_tv(play)
}

// Loads a Soundcloud video
Hue.show_soundcloud_video = function (play = true) {
  let item = Hue.loaded_tv
  Hue.before_show_tv(item)

  Hue.soundcloud_video_player.load(item.source, {
    auto_play: false,
    single_active: false,
    show_artwork: true,
    callback: function () {
      if (play) {
        Hue.soundcloud_video_player.play()
      }
    },
  })

  Hue.after_show_tv()
}

// Loads a <video> video
Hue.show_video_video = async function (play = true) {
  let item = Hue.loaded_tv

  if ($("#media_video").length === 0) {
    let s = `<video id='media_video'
        class='video_frame' width="640px" height="360px"
        preload="none" poster="${Hue.config.default_video_url}" controls></video>
        ${Hue.get_media_info_html("tv")}`

    $("#media_video_video_container").html(s)
  }

  Hue.before_show_tv(item)
  $("#media_video").prop("src", item.source)

  if (play) {
    $("#media_video")[0].play()
  }

  Hue.after_show_tv()
}

// Loads an iframe as the tv
Hue.show_iframe_video = function (play = true) {
  let item = Hue.loaded_tv

  if ($("#media_iframe_video").length === 0) {
    let s = `<div id='media_iframe_poster' class='pointer action'>Click Here To Load</div>
        <iframe sandbox="allow-same-origin allow-scripts allow-popups allow-forms" 
        width="640px" height="360px" id='media_iframe_video' class='video_frame'></iframe>
        ${Hue.get_media_info_html("tv")}`

    $("#media_iframe_video_container").html(s)

    Hue.setup_iframe_video()
  }

  Hue.before_show_tv(item)

  if (play) {
    $("#media_iframe_video").attr("src", item.source)
    $("#media_iframe_poster").css("display", "none")
  } else {
    $("#media_iframe_poster").css("display", "block")
  }

  Hue.after_show_tv()
}

// This gets called before any tv video is loaded
Hue.before_show_tv = function (item) {
  Hue.stop_tv()
  Hue.hide_tv(item)
}

// Apply tv media info
Hue.apply_tv_media_info = function () {
  let tv_media_info = $(`#media_${Hue.loaded_tv.type}_video_container`)
    .find(".media_info")
    .get(0)

  Hue.apply_media_info(tv_media_info, Hue.loaded_tv, "tv")
}

// This gets called after any tv video is loaded
Hue.after_show_tv = function () {
  Hue.apply_tv_media_info()
  Hue.fix_visible_video_frame()
  Hue.focus_input()
  Hue.set_tv_volume(false, false)
}

// Attempts to change the tv source
// It considers room state and permissions
// It considers text or url to determine if it's valid
// It includes a 'just check' flag to only return true or false
Hue.change_tv_source = function (src, just_check = false, comment = "") {
  let feedback = true

  if (just_check) {
    feedback = false
  }

  if (!Hue.can_tv) {
    if (feedback) {
      Hue.feedback("You don't have permission to change the tv")
    }

    return false
  }

  if (!comment) {
    let r = Hue.get_media_change_inline_comment("tv", src)
    src = r.source
    comment = r.comment
  }

  if (comment.length > Hue.config.max_media_comment_length) {
    if (feedback) {
      Hue.feedback("Comment is too long")
    }

    return false
  }

  if (src.length === 0) {
    return false
  }

  src = Hue.utilz.clean_string2(src)

  if (src.length > Hue.config.max_media_source_length) {
    return false
  }

  if (src.startsWith("/")) {
    return false
  }

  if (src === Hue.current_tv().source || src === Hue.current_tv().query) {
    if (feedback) {
      Hue.feedback("TV is already set to that")
    }

    return false
  } else if (src === "default") {
    // OK
  } else if (src === "prev" || src === "previous") {
    if (Hue.tv_changed.length > 1) {
      src = Hue.tv_changed[Hue.tv_changed.length - 2].source
    } else {
      if (feedback) {
        Hue.feedback("No tv source before current one")
      }

      return false
    }
  }

  if (Hue.utilz.is_url(src)) {
    if (Hue.check_domain_list("tv", src)) {
      if (feedback) {
        Hue.feedback("TV sources from that domain are not allowed")
      }

      return false
    }

    if (src.includes("youtube.com") || src.includes("youtu.be")) {
      if (Hue.utilz.get_youtube_id(src) && !Hue.config.youtube_enabled) {
        if (feedback) {
          Hue.feedback("YouTube support is not enabled")
        }

        return false
      }
    } else if (src.includes("twitch.tv")) {
      if (Hue.utilz.get_twitch_id(src) && !Hue.config.twitch_enabled) {
        if (feedback) {
          Hue.feedback("Twitch support is not enabled")
        }

        return false
      }
    } else if (src.includes("soundcloud.com")) {
      if (!Hue.config.soundcloud_enabled) {
        if (feedback) {
          Hue.feedback("Soundcloud support is not enabled")
        }

        return false
      }
    } else {
      let extension = Hue.utilz.get_extension(src).toLowerCase()

      if (extension) {
        if (
          Hue.utilz.video_extensions.includes(extension) ||
          Hue.utilz.audio_extensions.includes(extension)
        ) {
          // OK
        } else if (Hue.utilz.image_extensions.includes(extension)) {
          if (feedback) {
            Hue.feedback("That doesn't seem to be a video")
          }

          return false
        } else if (!Hue.config.iframes_enabled) {
          if (feedback) {
            Hue.feedback("IFrame support is not enabled")
          }

          return false
        }
      } else {
        if (!Hue.config.iframes_enabled) {
          if (feedback) {
            Hue.feedback("IFrame support is not enabled")
          }

          return false
        }
      }
    }
  } else if (src !== "restart" && src !== "reset") {
    if (src.length > Hue.config.safe_limit_1) {
      if (feedback) {
        Hue.feedback("Query is too long")
      }

      return false
    }

    if (!Hue.config.youtube_enabled) {
      if (feedback) {
        Hue.feedback("YouTube support is not enabled")
      }

      return false
    }
  }

  if (just_check) {
    return true
  }

  if (Hue.get_setting("confirm_tv")) {
    if (!confirm("Are you sure you want to change the tv here?")) {
      return
    }
  }

  Hue.socket_emit("change_tv_source", {
    src: src,
    comment: comment
  })
}

// Changes the tv visibility based on current state
Hue.change_tv_visibility = function (play = false) {
  if (Hue.room_tv_mode !== "disabled" && Hue.room_state.tv_enabled) {
    $("#media").css("display", "flex")
    $("#media_tv").css("display", "flex")
    $("#footer_toggle_tv_icon").find("use").eq(0).attr("href", "#icon_toggle-on")

    if (!Hue.tv_visible) {
      Hue.tv_visible = true

      if (Hue.room_tv_mode === "enabled") {
        if (Hue.first_media_change && Hue.started) {
          Hue.change({
            type: "tv",
            force: true,
            play: play,
            current_source: Hue.room_state.tv_locked,
          })
        }
      }
    }

    Hue.fix_visible_video_frame()
  } else {
    Hue.stop_tv()
    Hue.hide_tv()

    $("#media_tv").css("display", "none")

    let num_visible = Hue.num_media_elements_visible()

    if (num_visible === 0) {
      Hue.hide_media()
    }

    $("#footer_toggle_tv_icon").find("use").eq(0).attr("href", "#icon_toggle-off")

    Hue.tv_visible = false
  }

  if (Hue.image_visible) {
    Hue.fix_image_frame()
  }

  Hue.check_footer_media_rotate()
  Hue.goto_bottom(false, false)
}

// Checks if tv is maximized
Hue.tv_is_maximized = function () {
  return Hue.tv_visible && !Hue.image_visible
}

// Maximizes the tv, hiding the image
Hue.maximize_tv = function () {
  if (Hue.tv_visible) {
    if (Hue.image_visible) {
      Hue.toggle_media({type:"image", what:false, save:false})
    } else {
      Hue.toggle_media({type:"image", what:true, save:false})
    }
  } else {
    Hue.toggle_media({type:"tv", what:true, save:false})

    if (Hue.image_visible) {
      Hue.toggle_media({type:"image", what:false, save:false})
    }
  }

  Hue.save_room_state()
}

// Increases the tv volume
Hue.tv_volume_increase = function (step = 0.1) {
  if (Hue.room_state.tv_volume === 1) {
    return false
  }

  let nv = Hue.room_state.tv_volume + step

  Hue.set_tv_volume(nv)
}

// Decreases the tv volume
Hue.tv_volume_decrease = function (step = 0.1) {
  if (Hue.room_state.tv_volume === 0) {
    return false
  }

  let nv = Hue.room_state.tv_volume - step

  Hue.set_tv_volume(nv)
}

// Used to change the tv
// Shows the tv picker window to input a URL
Hue.show_tv_picker = function () {
  if (!Hue.can_tv) {
    Hue.feedback("You don't have tv permission")
    return false
  }

  Hue.msg_tv_picker.show(function () {
    $("#tv_source_picker_input").focus()
    Hue.show_media_history("tv")
    Hue.scroll_modal_to_top("tv_picker")
  })
}

// Sets the tv volume
Hue.set_tv_volume = function (
  nv = false,
  changed = true,
  update_slider = true
) {
  if (typeof nv !== "number") {
    nv = Hue.room_state.tv_volume
  }

  nv = Hue.utilz.round(nv, 1)

  if (nv > 1) {
    nv = 1
  } else if (nv < 0) {
    nv = 0
  }

  Hue.room_state.tv_volume = nv

  let vt = Hue.utilz.to_hundred(nv)

  if ($("#media_video").length > 0) {
    $("#media_video")[0].volume = nv
  }

  if (Hue.youtube_video_player) {
    Hue.youtube_video_player.setVolume(vt)
  }

  if (Hue.twitch_video_player) {
    Hue.twitch_video_player.setVolume(nv)
  }

  if (Hue.soundcloud_video_player) {
    Hue.soundcloud_video_player.setVolume(vt)
  }

  if (changed) {
    if (update_slider) {
      Hue.set_media_menu_tv_volume(nv)
    }

    Hue.save_room_state()
  }
}

// Reloads the tv with the same source
Hue.refresh_tv = function () {
  Hue.change({
    type: "tv",
    force: true,
    play: true,
    current_source: true
  })
}

// Sends a restart signal to reload the tv for everyone
Hue.restart_tv = function () {
  Hue.change_tv_source("restart")
  Hue.msg_tv_picker.close()
}

// Room tv mode setter
Hue.set_room_tv_mode = function (what) {
  Hue.room_tv_mode = what
  Hue.config_admin_room_tv_mode()
}

// Does the change of tv display percentage
Hue.do_media_tv_size_change = function (size, notify = true) {
  if (size === "max") {
    size = 90
  } else if (size === "min") {
    size = 10
  } else if (size === "default") {
    size = Hue.config.room_state_default_tv_display_percentage
  }

  size = Hue.utilz.nearest_ten(parseInt(size))

  if (size < 0 || size > 100) {
    return false
  }

  Hue.room_state.tv_display_percentage = size
  Hue.save_room_state()
  Hue.apply_media_percentages()

  if (notify) {
    Hue.notify_media_tv_size_change(size)
  }

  if (size === 0) {
    if (!Hue.image_is_maximized()) {
      Hue.maximize_image()
      Hue.show_infotip("Image Maximized")
    }
  } else if (size === 100) {
    if (!Hue.tv_is_maximized()) {
      Hue.maximize_tv()
      Hue.show_infotip("TV Maximized")
    }
  }
}

// Increases the tv display percentage
Hue.increase_tv_percentage = function () {
  let size = Hue.room_state.tv_display_percentage
  size += 10
  size = Hue.utilz.round2(size, 10)
  Hue.do_media_tv_size_change(size)
}

// Decreases the tv display percentage
Hue.decrease_tv_percentage = function () {
  let size = Hue.room_state.tv_display_percentage
  size -= 10
  size = Hue.utilz.round2(size, 10)
  Hue.do_media_tv_size_change(size)
}

// Gets the id of the visible tv frame
Hue.get_visible_video_frame_id = function () {
  let id = false

  $(".video_frame").each(function () {
    if ($(this).parent().css("display") !== "none") {
      id = this.id
      return false
    }
  })

  return id
}

// Sets the tv display percentage to default
Hue.set_default_tv_size = function () {
  Hue.do_media_tv_size_change("default")
}

// Announces room tv mode changes
Hue.announce_room_tv_mode_change = function (data) {
  Hue.show_room_notification(
    data.username,
    `${data.username} changed the tv mode to ${data.what}`
  )
  Hue.set_room_tv_mode(data.what)
  Hue.change_tv_visibility(false)
  Hue.check_media_permissions()
  Hue.check_media_maxers()
  Hue.update_footer_separators()
  Hue.change_media_lock_icon("tv")
}

// Sets the media menu tv slider
Hue.set_media_menu_tv_volume = function (n = false) {
  if (n === false) {
    n = Hue.room_state.tv_volume
  } else if (n === "increase") {
    n = Hue.room_state.tv_volume + 0.2

    if (n > 1) {
      n = 1
    }
  } else if (n === "decrease") {
    n = Hue.room_state.tv_volume - 0.2

    if (n < 0) {
      n = 0
    }
  } else if (n === "max") {
    n = 1
  } else if (n === "min") {
    n = 0
  } else if (n === "default") {
    n = Hue.config.room_state_default_tv_volume
  }

  $("#media_menu_tv_volume").val(n)

  Hue.set_tv_volume(n, true, false)
}

// Shows the new tv display percentage in the infotip
Hue.notify_media_tv_size_change = function (size) {
  let info

  if (size === Hue.config.room_state_default_tv_display_percentage) {
    info = " (Default)"
  } else {
    info = ""
  }

  Hue.show_infotip(`TV Size: ${size}%${info}`)
}

// Setup for the tv iframe
Hue.setup_iframe_video = function () {
  $("#media_iframe_poster").click(function () {
    Hue.play_tv()
  })
}

// Updates dimensions of the visible tv frame
Hue.fix_visible_video_frame = function () {
  let id = Hue.get_visible_video_frame_id()

  if (id) {
    Hue.fix_frame(id)
  }
}

// Changes the room tv mode
Hue.change_room_tv_mode = function (what) {
  if (!Hue.check_op_permission(Hue.role, "media")) {
    return false
  }

  let modes = ["enabled", "disabled", "locked"]

  if (!modes.includes(what)) {
    Hue.feedback(`Valid tv modes: ${modes.join(" ")}`)
    return false
  }

  if (what === Hue.room_tv_mode) {
    Hue.feedback(`TV mode is already set to that`)
    return false
  }

  Hue.socket_emit("change_tv_mode", {
    what: what
  })
}

Hue.tv_picker_submit = function () {
  let val = $("#tv_source_picker_input").val().trim()

  if (val !== "") {
    Hue.change_tv_source(val)
    Hue.msg_tv_picker.close()
  }
}

// Checks if tv is abled to be synced with another user
Hue.can_sync_tv = function () {
  if (!Hue.room_state.tv_enabled) {
    return false
  }

  if (Hue.loaded_tv.type === "youtube") {
    if (!Hue.youtube_video_player) {
      return false
    }
  } else if (Hue.loaded_tv.type === "video") {
    if ($("#media_video").length === 0) {
      return false
    }
  } else {
    return false
  }

  return true
}

// Sends a request to the server to send a request to the user to report video progress
Hue.sync_tv = function (username) {
  if (!Hue.can_sync_tv()) {
    return false
  }

  if (!Hue.user_is_online_by_username(username)) {
    return false
  }

  Hue.socket_emit("sync_tv", {
    username: username
  })
}

// Responds to a tv sync request to send it back to a user
Hue.report_tv_progress = function (data) {
  if (Hue.user_is_ignored(data.requester_username)) {
    return false
  }

  if (!Hue.can_sync_tv()) {
    return false
  }

  let ttype = Hue.loaded_tv.type
  let progress

  if (ttype === "youtube") {
    progress = Math.round(Hue.youtube_video_player.getCurrentTime())
  } else if (ttype === "video") {
    progress = Math.round($("#media_video")[0].currentTime)
  }

  if (progress) {
    Hue.socket_emit("report_tv_progress", {
      requester: data.requester,
      progress: progress,
      type: ttype,
    })

    Hue.show_room_notification(
      data.request_username,
      `${data.requester_username} synced their tv with yours`
    )
  }
}

// After the server sends a user's tv progress response
Hue.receive_tv_progress = function (data) {
  if (!Hue.can_sync_tv()) {
    return false
  }

  if (data.type === "youtube") {
    if (Hue.loaded_tv.type !== "youtube") {
      return false
    }

    let id = Hue.utilz.get_youtube_id(Hue.loaded_tv.source)

    Hue.youtube_video_play_on_queue = true

    if (id[0] === "video") {
      Hue.youtube_video_player.cueVideoById({
        videoId: id[1],
        startSeconds: data.progress,
      })
    }
  } else if (data.type === "video") {
    if (Hue.loaded_tv.type !== "video") {
      return false
    }

    $("#media_video")[0].currentTime = data.progress
    $("#media_video")[0].play()
  }
}

// Handles volume change command for the tv
Hue.change_tv_volume = function (arg) {
  if (isNaN(arg)) {
    Hue.feedback("Argument must be a number")
    return false
  } else {
    let nv = arg / 100
    Hue.set_tv_volume(nv)
  }
}
// Starts Dropzone events for file drag and drop events
// This also handles normal uploads by clicking the Upload button
Hue.start_dropzone = function () {
  Hue.dropzone = new Dropzone("body", {
    url: "/",
    maxFiles: 1,
    maxFilesize: Hue.config.max_image_size / 1024,
    autoProcessQueue: false,
    clickable: "#image_picker_upload, #image_upload_comment_change",
    acceptedFiles: "image/jpeg,image/png,image/gif,image/webp,image/bmp",
  })

  Hue.dropzone.on("addedfile", function (file) {
    Hue.focus_input()

    if (!Hue.can_image) {
      Hue.feedback("You don't have permission to change the image")
      Hue.dropzone.files = []
      return false
    }

    if (Hue.dropzone.files.length > 1) {
      Hue.dropzone.files = []
      return false
    }

    let size = file.size / 1024

    if (size > Hue.config.max_image_size) {
      Hue.dropzone.files = []
      Hue.feedback("File is too big")
      return false
    }

    let ext = file.name.split(".").pop(-1).toLowerCase()

    if (!Hue.utilz.image_extensions.includes(ext)) {
      Hue.dropzone.files = []
      return false
    }

    Hue.dropzone.files = []

    Hue.show_image_upload_comment(file, "image_upload")
  })
}

// Creates a file reader for files
Hue.create_file_reader = function (file) {
  let reader = new FileReader()

  reader.addEventListener("loadend", function (e) {
    Hue.socket_emit("slice_upload", {
      data: reader.result,
      action: file.hue_data.action,
      name: file.hue_data.name,
      type: file.hue_data.type,
      size: file.hue_data.size,
      date: file.hue_data.date,
      comment: file.hue_data.comment,
    })
  })

  return reader
}

// Handles file uploads of different kinds
// Sets all required data
// Creates a file reader
// Starts a sliced upload
Hue.upload_file = function (args = {}) {
  let def_args = {
    file: false,
    action: false,
    name: false,
    comment: false,
  }

  args = Object.assign(def_args, args)

  if (!args.file || !args.action) {
    return false
  }

  if (args.file.hue_data === undefined) {
    args.file.hue_data = {}
  }

  args.file.hue_data.action = args.action

  if (args.name) {
    args.file.hue_data.name = args.name
  } else {
    args.file.hue_data.name = args.file.name
  }

  if (args.comment) {
    args.file.hue_data.comment = args.comment
  }

  if (args.file.hue_data.action === "background_image_upload") {
    for (let d in Hue.files) {
      let f = Hue.files[d]

      if (f.hue_data.action === "background_image_upload") {
        Hue.cancel_file_upload(d, false)
      }
    }
  }

  args.file.hue_data.size = args.file.size
  args.file.hue_data.type = args.file.type

  let date = Date.now()

  args.file.hue_data.date = date

  if (args.file.hue_data.name !== undefined) {
    args.file.hue_data.name = Hue.utilz
      .clean_string5(args.file.hue_data.name)
      .replace(/.gifv/g, ".gif")
  } else {
    args.file.hue_data.name = "no_name"
  }

  args.file.hue_data.reader = Hue.create_file_reader(args.file)

  let slice = args.file.slice(0, Hue.config.upload_slice_size)

  Hue.files[date] = args.file
  args.file.hue_data.next = Hue.get_file_next(args.file)

  if (args.file.hue_data.next >= 100) {
    args.file.hue_data.sending_last_slice = true
  } else {
    args.file.hue_data.sending_last_slice = false
  }

  args.file.hue_data.percentage = 0

  let obj = {
    message: `Uploading ${Hue.get_file_action_name(
      args.file.hue_data.action
    )}: 0%`,
    icon: "image",
    id: `uploading_${date}`,
    title: `Size: ${Hue.utilz.get_size_string(args.file.hue_data.size / 1024)}`,
    autoclose: false
  }

  if (!args.file.hue_data.sending_last_slice) {
    obj.after_close = function () {
      Hue.cancel_file_upload(date)
    }
  }

  args.file.hue_popup = Hue.show_action_popup(obj)
  args.file.hue_data.reader.readAsArrayBuffer(slice)
}

// Cancels a file upload
// Deletes the local file and sends a signal to the server to try to cancel it on time
Hue.cancel_file_upload = function (date, check = true) {
  let file = Hue.files[date]

  if (!file) {
    return false
  }

  if (file.hue_data.sending_last_slice) {
    return false
  }

  Hue.change_upload_status(file, "Cancelled", true)

  if (check) {
    if (file.hue_data.action === "background_image_upload") {
      Hue.config_admin_background_image()
    }
  }

  delete Hue.files[date]

  Hue.socket_emit("cancel_upload", { date: date })
}

// Gets the percentage based on the next file slice to be uploaded
// Last slice would be 100
Hue.get_file_next = function (file) {
  let next = Math.floor(
    ((Hue.config.upload_slice_size * 1) / file.hue_data.size) * 100
  )

  if (next > 100) {
    next = 100
  }

  return next
}

// Updates the upload status announcement based on upload progress
Hue.change_upload_status = function (file, status, clear = false) {
  if (!file.hue_popup) {
    return false
  }

  $(file.hue_popup.content)
    .find(".action_popup_message")
    .eq(0)
    .text(
      `Uploading ${Hue.get_file_action_name(file.hue_data.action)}: ${status}`
    )

  if (clear) {
    file.hue_popup.close()
  }
}

// Gets proper names for file upload types
Hue.get_file_action_name = function (action) {
  let s = ""

  if (action === "image_upload") {
    s = "image"
  } else if (action === "profile_image_upload") {
    s = "profile image"
  } else if (action === "background_image_upload") {
    s = "background image"
  } else if (action === "audio_clip_upload") {
    s = "audio clip"
  }

  return s
}

// This is called whenever the server asks for the next slice of a file upload
Hue.request_slice_upload = function (data) {
  let file = Hue.files[data.date]

  if (!file) {
    return false
  }

  let place = data.current_slice * Hue.config.upload_slice_size
  let slice = file.slice(
    place,
    place + Math.min(Hue.config.upload_slice_size, file.hue_data.size - place)
  )

  file.hue_data.next = Hue.get_file_next(file)

  if (file.hue_data.next >= 100) {
    file.hue_data.sending_last_slice = true
  }

  file.hue_data.percentage = Math.floor(
    ((Hue.config.upload_slice_size * data.current_slice) / file.hue_data.size) *
      100
  )
  file.hue_data.reader.readAsArrayBuffer(slice)

  Hue.change_upload_status(file, `${file.hue_data.percentage}%`)
}

// What to do when a file upload finishes
Hue.upload_ended = function (data) {
  let file = Hue.files[data.date]

  if (file) {
    Hue.change_upload_status(file, "100%", true)
    delete Hue.files[data.date]
  }
}

// Shows an error message on file upload failure
Hue.show_upload_error = function () {
  Hue.feedback("The file could not be uploaded")
}

// JQuery function to turn url text into actual links
jQuery.fn.urlize = function (stop_propagation = true) {
  try {
    let html = this.html()

    if (!html || !Hue.utilz.includes_url(html)) {
      return false
    }

    let split = html.split(/\s+/)
    let matches = []
    let reg = /(?:^|\s)\"?(https?:\/\/(?:[^"|\s]*)+)/

    for (let s of split) {
      let result = reg.exec(s)

      if (result) {
        matches.push(result[1])
      }
    }

    if (matches.length > 0) {
      on_matches(matches, html, this)
    }

    function on_matches(matches, html, obj) {
      let cls = "generic action"

      if (stop_propagation) {
        cls += " stop_propagation"
      }

      let used_urls = []

      for (let i = 0; i < matches.length; i++) {
        let url = matches[i]

        if (used_urls.includes(url)) {
          continue
        }

        used_urls.push(url)

        let rep = new RegExp(
          Hue.utilz.escape_special_characters(matches[i]),
          "g"
        )
        let u = matches[i]
        let max = Hue.max_displayed_url

        if (u.length > max) {
          u = `${u.substring(0, max)}...`
        }

        html = html.replace(
          rep,
          `<a class="${cls}" target="_blank" href="${url}">${u}</a>`
        )
      }

      $(obj).html(html)

      $(obj)
        .find(".stop_propagation")
        .each(function () {
          $(this).click(function (e) {
            e.stopPropagation()
          })
        })
    }
  } catch (err) {}
}

// Goes to a url
Hue.goto_url = function (u, mode = "same", encode = false) {
  if (encode) {
    u = encodeURIComponent(u)
  }

  if (mode === "tab") {
    window.open(u, "_blank")
  } else {
    Hue.user_leaving = true
    window.location = u
  }
}

// Opens a new tab with a search query on a specified search engine
Hue.search_on = function (site, q) {
  q = encodeURIComponent(q)

  if (site === "google") {
    Hue.goto_url(`https://www.google.com/search?q=${q}`, "tab")
  } else if (site === "soundcloud") {
    Hue.goto_url(`https://soundcloud.com/search?q=${q}`, "tab")
  } else if (site === "youtube") {
    Hue.goto_url(`https://www.youtube.com/results?search_query=${q}`, "tab")
  }
}

// Handle URLS
Hue.handle_url = function (text) {
  if (text) {
    Hue.check_handle_url_options(text)
    $("#handle_url_input").val(text)
    $("#handle_url_comment").val("")
    Hue.handled_url_input = text
    Hue.handled_url_comment = ""
    Hue.msg_handle_url.show(function () {
      $("#handle_url_comment").focus()
    })
  }
}

// Handle url chat action
Hue.handle_url_chat = function () {
  let message = Hue.handled_url_input

  if (Hue.handled_url_comment) {
    message = `${Hue.handled_url_comment.trim()} ${message.trim()}`
  }
    
  Hue.process_message({ message: message, handle_url: false })
  Hue.close_all_modals()
}

// Setups drop listeners
// This is used to display actions when dropping a URL
// Like changing the tv when dropping a YouTube URL
Hue.setup_drag_events = function () {
  $("#main_container")[0].addEventListener("drop", function (e) {
    Hue.handle_url(e.dataTransfer.getData("text/plain").trim())
  })

  $("#handle_url_chat").click(function () {
    Hue.handle_url_chat()
  })

  $("#handle_url_image").click(function () {
    Hue.change_image_source(
      Hue.handled_url_input,
      false,
      Hue.handled_url_comment
    )
    Hue.close_all_modals()
  })

  $("#handle_url_tv").click(function () {
    Hue.change_tv_source(Hue.handled_url_input, false, Hue.handled_url_comment)
    Hue.close_all_modals()
  })

  $("#handle_url_input").on("input blur", function () {
    Hue.handled_url_input = $(this).val().trim()
    $("#handle_url_input").val(Hue.handled_url_input)
    Hue.check_handle_url_options(Hue.handled_url_input)
  })

  $("#handle_url_comment").on("input blur", function () {
    Hue.handled_url_comment = $(this)
      .val()
      .substring(0, Hue.config.max_media_comment_length)
    $("#handle_url_comment").val(Hue.handled_url_comment)
  })
}

// Changes button visibility based on url
Hue.check_handle_url_options = function (text) {
  if (text && text.length < Hue.config.max_input_length) {
    $("#handle_url_chat").css("display", "inline-block")
  } else {
    $("#handle_url_chat").css("display", "none")
  }

  if (Hue.change_image_source(text, true)) {
    $("#handle_url_image").css("display", "inline-block")
  } else {
    $("#handle_url_image").css("display", "none")
  }

  if (Hue.change_tv_source(text, true)) {
    $("#handle_url_tv").css("display", "inline-block")
  } else {
    $("#handle_url_tv").css("display", "none")
  }

  Hue.horizontal_separator.separate("handle_url_container")
}

// Setups the Open URL picker window
Hue.setup_open_url = function () {
  $("#open_url_menu_open").click(function () {
    Hue.goto_url(Hue.open_url_source, "tab")
    Hue.close_all_modals()
  })

  $("#open_url_menu_copy").click(function () {
    Hue.copy_string(Hue.open_url_source)
    Hue.close_all_modals()
  })

  $("#open_url_menu_copy_title").click(function () {
    Hue.copy_string(Hue.open_url_title)
    Hue.close_all_modals()
  })

  $("#open_url_menu_load").click(function () {
    Hue.toggle_media({type:Hue.open_url_media_type, what:true})
    
    Hue.change({
      type: Hue.open_url_media_type,
      item: Hue.open_url_data,
      force: true,
    })

    Hue.change_media_lock({type:Hue.open_url_media_type, what:true})
    Hue.close_all_modals()
  })

  $("#open_url_menu_change").click(function () {
    if (confirm("This will change it for everyone. Are you sure?")) {
      Hue[`change_${Hue.open_url_media_type}_source`](Hue.open_url_data.source)
      Hue.close_all_modals()
    }
  })
}

// Shows the Open URL menu
// This is used to show actions for links and media
Hue.open_url_menu = function (args = {}) {
  let def_args = {
    source: false,
    type: 1,
    data: {},
    media_type: false,
    title: false,
  }

  args = Object.assign(def_args, args)

  Hue.open_url_title = args.title || args.data.title

  if (Hue.open_url_title && Hue.open_url_title !== args.source) {
    $("#open_url_menu_copy_title").css("display", "inline-block")
  } else {
    $("#open_url_menu_copy_title").css("display", "none")
  }

  if (args.media_type && args.data) {
    let mode = Hue[`room_${args.media_type}_mode`]

    if (
      (mode === "enabled" || mode === "locked") &&
      args.data !== Hue[`loaded_${args.media_type}`]
    ) {
      $("#open_url_menu_load").css("display", "inline-block")
    } else {
      $("#open_url_menu_load").css("display", "none")
    }

    if (Hue[`change_${args.media_type}_source`](args.source, true)) {
      $("#open_url_menu_change").css("display", "inline-block")
    } else {
      $("#open_url_menu_change").css("display", "none")
    }
  } else {
    $("#open_url_menu_load").css("display", "none")
    $("#open_url_menu_change").css("display", "none")
  }

  Hue.horizontal_separator.separate("open_url_container")

  Hue.open_url_source = args.source
  Hue.open_url_data = args.data
  Hue.open_url_media_type = args.media_type

  let title = Hue.utilz.get_limited_string(
    args.source,
    Hue.config.url_title_max_length
  )

  Hue.msg_open_url.set_title(title)
  Hue.msg_open_url.show()
}

// Checks if a URL of a media type is from a blacklisted or whitelisted domain
Hue.check_domain_list = function (media_type, src) {
  let list_type = Hue.config[`${media_type}_domain_allow_or_deny_list`]

  if (list_type !== "allow" && list_type !== "deny") {
    return false
  }

  let list = Hue.config[`${media_type}_domain_list`]

  if (list.length === 0) {
    return false
  }

  let domain = Hue.utilz.get_root(src)
  let includes = list.includes(domain) || list.includes(`${domain}/`)

  if (list_type === "allow") {
    if (!includes) {
      return true
    }
  } else if (list_type === "deny") {
    if (includes) {
      return true
    }
  }

  return false
}

// Custom chat search to show links
Hue.show_links = function () {
  Hue.show_chat_search("http:// https://")
}

// Logs out the user
Hue.logout = function () {
  Hue.goto_url("/logout")
}

// Changes the user's username
Hue.change_username = function (uname, show_feedback = true) {
  if (Hue.utilz.clean_username(uname) !== uname) {
    if (show_feedback) {
      Hue.feedback("Username contains invalid characters")
    }

    return false
  }

  if (uname.length === 0) {
    if (show_feedback) {
      Hue.feedback("Username can't be empty")
    }

    return false
  }

  if (uname.length > Hue.config.max_username_length) {
    if (show_feedback) {
      Hue.feedback("Username is too long")
    }

    return false
  }

  if (uname === Hue.username) {
    if (show_feedback) {
      Hue.feedback("That's already your username")
    }

    return false
  }

  Hue.socket_emit("change_username", { username: uname })

  return true
}

// Changes the user's password
Hue.change_password = function (passwd, show_feedback = true) {
  if (passwd.length < Hue.config.min_password_length) {
    if (show_feedback) {
      Hue.feedback(
        `Password is too short. It must be at least ${Hue.config.min_password_length} characters long`
      )
    }

    return false
  }

  if (passwd.length > Hue.config.max_password_length) {
    if (show_feedback) {
      Hue.feedback("Password is too long")
    }

    return false
  }

  Hue.socket_emit("change_password", { password: passwd })

  return true
}

// Feedback on password change
Hue.password_changed = function (data) {
  Hue.feedback(
    `Password succesfully changed. To force other clients connected to your account to disconnect you can use ${Hue.config.commands_prefix}disconnectothers`
  )
}

// Changes the user's email
Hue.change_email = function (email, show_feedback = true) {
  if (Hue.utilz.clean_string5(email) !== email) {
    if (show_feedback) {
      Hue.feedback("Invalid email address")
    }

    return false
  }

  if (email.length === 0) {
    if (show_feedback) {
      Hue.feedback("Username can't be empty")
    }

    return false
  }

  if (!email.includes("@")) {
    if (show_feedback) {
      Hue.feedback("Invalid email address")
    }

    return false
  }

  if (email.length > Hue.config.max_email_length) {
    if (show_feedback) {
      Hue.feedback("Email is too long")
    }

    return false
  }

  Hue.socket_emit("change_email", { email: email })

  return true
}

// Feedback on email change
Hue.email_changed = function (data) {
  Hue.set_email(data.email)
  Hue.feedback(`Email succesfully changed to ${data.email}`)
}

// Changes the user's bio
Hue.change_bio = function (value) {
  if (value !== Hue.utilz.clean_string12(value)) {
    return false
  }

  if (value === Hue.bio) {
    return false
  }

  if (value.length > Hue.config.max_bio_length) {
    return false
  }

  if (value.split("\n").length > Hue.config.max_bio_lines) {
    return false
  }

  Hue.socket_emit("change_bio", { bio: value })

  return true
}

// Setups the user details window
Hue.build_details = function () {
  $("#details_username").text(Hue.username)
  $("#details_email").text(Hue.user_email)

  let s = `<div>${Hue.utilz.nice_date(Hue.user_reg_date)}</div>
    </div>(${Hue.get_timeago(Hue.user_reg_date)})</div>`

  $("#details_reg_date").html(s)

  s = `<div>${Hue.utilz.nice_date(Hue.date_joined)}</div>
    </div>(${Hue.get_timeago(Hue.date_joined)})</div>`

  $("#details_joined_room").html(s)
}

// Shows the user's details window
Hue.show_details = function (data) {
  Hue.build_details()
  Hue.msg_details.show()
}

// Shows the change username form
Hue.show_change_username = function () {
  let s = `
    <input type='text' placeholder='New Username' id='change_username_input' class='nice_input_2'>
    <div class='flex_row_center'>
        <div class='action pointer bigger details_change_submit' id='change_username_submit'>Change</div>
    </div>`

  Hue.msg_info2.show(["Change Username", s], function () {
    $("#change_username_input").val(Hue.username)
    $("#change_username_input").focus()

    $("#change_username_submit").click(function () {
      Hue.submit_change_username()
    })

    Hue.change_user_username_open = true
  })
}

// Submits the change username form
Hue.submit_change_username = function () {
  let uname = $("#change_username_input").val().trim()

  if (Hue.change_username(uname, false)) {
    Hue.msg_info2.close()
  } else {
    alert("Invalid username format")
  }
}

// Shows the change password form
Hue.show_change_password = function () {
  let s = `
    <input type='password' placeholder='New Password' id='change_password_input' class='nice_input_2'>
    <div class='flex_row_center'>
        <div class='action pointer bigger details_change_submit' id='change_password_submit'>Change</div>
    </div>`

  Hue.msg_info2.show(["Change Password", s], function () {
    $("#change_password_input").focus()

    $("#change_password_submit").click(function () {
      Hue.submit_change_password()
    })

    Hue.change_user_password_open = true
  })
}

// Submits the change password form
Hue.submit_change_password = function () {
  let uname = $("#change_password_input").val().trim()

  if (Hue.change_password(uname, false)) {
    Hue.msg_info2.close()
  } else {
    alert("Invalid password format")
  }
}

// Shows the change email form
Hue.show_change_email = function () {
  let s = `
    <input type='text' placeholder='New Email' id='change_email_input' class='nice_input_2'>
    <div class='flex_row_center'>
        <div class='action pointer bigger details_change_submit' id='change_email_submit'>Change</div>
    </div>`

  Hue.msg_info2.show(["Change Email", s], function () {
    $("#change_email_input").focus()

    $("#change_email_submit").click(function () {
      Hue.submit_change_email()
    })

    Hue.change_user_email_open = true
  })
}

// Submits the change email form
Hue.submit_change_email = function () {
  let uname = $("#change_email_input").val().trim()

  if (Hue.change_email(uname, false)) {
    Hue.msg_info2.close()
  } else {
    alert("Invalid email format")
  }
}

// Username setter
Hue.set_username = function (uname) {
  Hue.username = uname
  Hue.generate_mentions_regex()
  $("#user_menu_username").text(Hue.username)
}

// Email setter
Hue.set_email = function (email) {
  Hue.user_email = email
}

// Bio setter
Hue.set_bio = function (bio) {
  Hue.bio = bio
  $("#user_menu_bio_textarea").val(Hue.bio)
}

// Setups the user menu
Hue.setup_user_menu = function () {
  $("#user_menu_profile_image").on("error", function () {
    if ($(this).attr("src") !== Hue.config.default_profile_image_url) {
      $(this).attr("src", Hue.config.default_profile_image_url)
    }
  })

  $("#user_menu_bio_textarea").blur(function () {
    let value = Hue.utilz.clean_string12($(this).val())

    if (value !== Hue.bio) {
      let result = Hue.change_bio(value)

      if (!result) {
        $(this).val(Hue.bio)
      } else {
        $(this).val(value)
      }
    } else {
      $(this).val(value)
    }
  })

  Hue.setup_togglers("user_menu")

  $("#user_menu_username").click(function () {
    Hue.show_change_username()
  })

  $("#user_menu_profile_image").click(function () {
    Hue.open_profile_image_picker()
  })

  $("#user_menu_audio_clip").click(function () {
    if (Hue.get_user_by_username("mad").audio_clip) {
      Hue.show_audio_clip_menu()
    } else {
      Hue.select_audio_clip()
    }
  })

  $("#user_menu_details").click(function () {
    Hue.show_details()
  })

  $("#user_menu_logout").click(function () {
    Hue.needs_confirm("logout")
  })

  $("#user_menu_highlights").click(function () {
    Hue.show_highlights()
  })

  $("#user_menu_history").click(function () {
    Hue.show_input_history()
  })

  $("#user_menu_settings").click(function () {
    Hue.show_global_settings()
  })

  $("#user_menu_change_username").click(function () {
    Hue.show_change_username()    
  })

  $("#user_menu_change_password").click(function () {
    Hue.show_change_password()    
  })

  $("#user_menu_change_email").click(function () {
    Hue.show_change_email()    
  })

  $("#user_menu_import_settings").click(function () {
    Hue.show_import_settings()   
  })

  $("#user_menu_export_settings").click(function () {
    Hue.show_export_settings()   
  })

  $("#user_menu_request_notifications").click(function () {
    Hue.request_desktop_notifications_permission()
  })
}

// Updates some user menu elements
Hue.update_user_menu = function () {
  $("#user_menu_profile_image").attr("src", Hue.profile_image)
  $("#user_menu_bio_textarea").val(Hue.bio)
}

// Stops the reaction's box show timeout or hides it
Hue.clear_show_chat_functions_box = function () {
  clearTimeout(Hue.show_chat_functions_timeout)
  Hue.hide_chat_functions_box()
}

// Shows the user menu
Hue.show_user_menu = function () {
  Hue.clear_show_chat_functions_box()
  Hue.msg_user_menu.show()
}

// Send the code to verify email change
Hue.verify_email = function (code) {
  if (Hue.utilz.clean_string5(code) !== code) {
    Hue.feedback("Invalid code")
    return
  }

  if (code.length === 0) {
    Hue.feedback("Empty code")
    return
  }

  if (code.length > Hue.config.email_change_code_max_length) {
    Hue.feedback("Invalid code")
    return
  }

  Hue.socket_emit("verify_email", { code: code })
}

// Opens the profile image picker to change the profile image
Hue.open_profile_image_picker = function () {
  $("#profile_image_picker").click()
}

// Setups the profile image circular cropper
Hue.setup_profile_image_cropper = function () {
  $("#profile_image_cropper_upload").click(function () {
    Hue.profile_image_cropper
      .croppie("result", {
        type: "blob",
        size: {
          width: Hue.config.profile_image_diameter,
          height: Hue.config.profile_image_diameter,
        },
        format: "png",
        circle: true,
        quality: 0.95,
      })

      .then(function (blob) {
        $("#user_menu_profile_image").attr(
          "src",
          Hue.config.profile_image_loading_url
        )
        Hue.upload_file({
          file: blob,
          action: "profile_image_upload",
          name: "profile.png",
        })
        Hue.msg_profile_image_cropper.close()
      })
  })

  $("#profile_image_cropper_change").click(function () {
    Hue.open_profile_image_picker()
  })

  Hue.horizontal_separator.separate("profile_image_cropper_buttons")
}

// Resets the profile image cropper to default state
Hue.reset_profile_image_cropper = function () {
  if (Hue.profile_image_cropper && Hue.profile_image_cropper.croppie) {
    Hue.profile_image_cropper.croppie("destroy")
  }
}

// This is executed after a profile image has been selected in the file dialog
Hue.profile_image_selected = function (input) {
  if (input.files && input.files[0]) {
    let reader = new FileReader()

    reader.onload = function (e) {
      Hue.reset_profile_image_cropper()

      Hue.msg_profile_image_cropper.show(function () {
        $("#profile_image_picker").closest("form").get(0).reset()

        Hue.profile_image_cropper = $("#profile_image_cropper").croppie({
          viewport: {
            width: 200,
            height: 200,
            type: "circle",
          },
          boundary: { width: 350, height: 350 },
        })

        Hue.profile_image_cropper
          .croppie("bind", {
            url: e.target.result,
            points: [],
          })

          .then(function () {
            Hue.profile_image_cropper.croppie("setZoom", 0)
          })
      })
    }

    reader.readAsDataURL(input.files[0])
  }
}

// Feedback that the user is not an operator
Hue.not_an_op = function () {
  Hue.feedback("You are not a room operator")
}

// Checks if the user is joining for the first time
// This is site wide, not room wide
Hue.check_firstime = function () {
  if (Hue.get_local_storage(Hue.ls_first_time) === null) {
    Hue.first_time = true
    Hue.show_intro()
    Hue.request_desktop_notifications_permission()
    Hue.save_local_storage(Hue.ls_first_time, false)
  } else {
    Hue.first_time = false
  }
}

// Shows a feedback message upon joining the room
Hue.show_joined = function () {
  Hue.feedback(`You joined ${Hue.room_name}`, {})
  Hue.show_topic()
}

// Disconnect other clients of the same account
Hue.disconnect_others = function () {
  Hue.socket_emit("disconnect_others", {})
}

// Shows how many clients of the same account were disconnected
Hue.show_others_disconnected = function (data) {
  let s

  if (data.amount === 1) {
    s = `${data.amount} client was disconnected`
  } else {
    s = `${data.amount} clients were disconnected`
  }

  Hue.feedback(s)
}

// Show an intro with popups when a user first joins the site
Hue.show_intro = function () {
  let s = `
    You can chat in this area. The icon on the left opens the user menu where you can change your profile image and other settings.
    There is also a button for reactions and functions.`

  Hue.create_popup({ position: "bottomleft" }).show(["Chat and User Menu", s])

  s = `
    This area has media controls. You can use these to change the room's media or control what is displayed to you.`

  Hue.create_popup({ position: "bottomright" }).show(["Media Controls", s])

  s = `This side shows the users online and recently present users.`

  Hue.create_popup({ position: "topleft" }).show(["Top Left", s])

  s = `Some useful buttons here.`

  Hue.create_popup({ position: "topright" }).show(["Top Right", s])

  s = `Close this to close all the popups.`

  Hue.create_popup({ position: "center" }).show(["Close Popups", s])

  let f = () => {
    Hue.close_all_popups()
  }

  Hue.create_popup({ position: "center", after_close: f }).show(["Welcome", s])
}

// Shows some options for the audio clip
Hue.show_audio_clip_menu = function () {
  Hue.msg_info2.show(["Change Audio Clip", Hue.template_audio_clip_menu()], function () {
    $("#upload_audio_clip").click(function () {
      Hue.select_audio_clip()
      Hue.msg_info2.close()
    })

    $("#remove_audio_clip").click(function () {
      Hue.needs_confirm_2(function () {
        Hue.socket_emit("remove_audio_clip", {})
        Hue.msg_info2.close()
      })
    })

    Hue.horizontal_separator.separate("background_image_select_container")
  })
}

// Opens the file picker to choose an audio clip
Hue.select_audio_clip = function () {
  $("#audio_clip_picker").click()
}

// When an audio clip gets selected from the file picker
Hue.audio_clip_selected = function (input) {
  let file = input.files[0]
  let size = file.size / 1024

  if (size > Hue.config.max_audio_clip_size) {
    Hue.msg_info.show("File is too big")
    return false
  }

  Hue.upload_file({ file: file, action: "audio_clip_upload" })
}

// Setups user function buttons in the reaction box
Hue.setup_user_functions = function () {
  for (let i = 1; i < Hue.user_functions.length + 1; i++) {
    $(`#user_function_button_${i}`).click(function () {
      Hue.run_user_function(i)
    })

    $(`#user_function_button_${i}`).on("auxclick", function (e) {
      if (e.which === 2) {
        setTimeout(() => {
          Hue.open_user_function_in_settings(i)
        }, 100);
      }
    })
  }

  Hue.setup_user_function_titles()
}

// Executes the user function of a given number
Hue.run_user_function = function (n) {
  if (!Hue.user_functions.includes(n)) {
    return false
  }

  if (Hue.get_setting(`user_function_${n}`)) {
    Hue.execute_commands(`user_function_${n}`)
  } else {
    Hue.open_user_function_in_settings(n)
  }

  Hue.hide_chat_functions_box()
}

// Setups the user function switch feature
// This allows user functions to change positions between each other
// For instance user function 2 can change position with user function 4
Hue.setup_user_function_switch_selects = function () {
  $(".user_function_switch_select").each(function () {
    $(this).change(function () {
      let num2 = $(this).find("option:selected").val()

      if (num2 == "0") {
        return false
      }

      let num = $(this).data("number")
      let type = $(this).data("type")
      let o_user_function = Hue[type][`user_function_${num}`]
      let o_user_function_name = Hue[type][`user_function_${num}_name`]
      let n_user_function = Hue[type][`user_function_${num2}`]
      let n_user_function_name = Hue[type][`user_function_${num2}_name`]

      if (
        o_user_function_name ===
        Hue.config[`global_settings_default_user_function_${num}_name`]
      ) {
        o_user_function_name =
          Hue.config[`global_settings_default_user_function_${num2}_name`]
      }

      if (
        n_user_function_name ===
        Hue.config[`global_settings_default_user_function_${num2}_name`]
      ) {
        n_user_function_name =
          Hue.config[`global_settings_default_user_function_${num}_name`]
      }

      Hue[type][`user_function_${num}`] = n_user_function
      Hue[type][`user_function_${num}_name`] = n_user_function_name

      Hue[type][`user_function_${num2}`] = o_user_function
      Hue[type][`user_function_${num2}_name`] = o_user_function_name

      $(`#${type}_user_function_${num}`).val(Hue[type][`user_function_${num}`])
      $(`#${type}_user_function_${num}_name`).val(
        Hue[type][`user_function_${num}_name`]
      )

      $(`#${type}_user_function_${num2}`).val(
        Hue[type][`user_function_${num2}`]
      )
      $(`#${type}_user_function_${num2}_name`).val(
        Hue[type][`user_function_${num2}_name`]
      )

      $(this)
        .find("option")
        .each(function () {
          if ($(this).val() == "0") {
            $(this).prop("selected", true)
          }
        })

      if (
        Hue.active_settings(`user_function_${num}`) === type ||
        Hue.active_settings(`user_function_${num2}`) === type ||
        Hue.active_settings(`user_function_${num}_name`) === type ||
        Hue.active_settings(`user_function_${num2}_name`) === type
      ) {
        Hue.setup_user_function_titles()
      }

      Hue[`save_${type}`]()
    })
  })
}

// Setups the user function names in the reactions box
Hue.setup_user_function_titles = function () {
  let n = $(".user_function_button").length

  if (n === 0) {
    return false
  }

  for (let i = 1; i < n + 1; i++) {
    let t = Hue.utilz
      .clean_string2(Hue.get_setting(`user_function_${i}`))
      .substring(0, 100)

    if (!t) {
      t = "Empty User Function. Set what it does in the User Settings"
    }

    let name = Hue.get_setting(`user_function_${i}_name`)

    $(`#user_function_button_${i}`).text(name)
    $(`#user_function_button_${i}`).attr("title", t)
  }
}

// Opens the settings in the category where the user functions are and opens the toggler
Hue.open_user_function_in_settings = function (n) {
  Hue.open_user_settings_category("functions")
  Hue.go_to_user_settings_item(`user_function_${n}`)
}

// Special function used for all User Function actions
Hue.setting_user_function_do_action = function (number, type, save = true) {
  let cmds = Hue.utilz.remove_multiple_empty_lines(
    $(`#${type}_user_function_${number}`).val()
  )

  $(`#${type}_user_function_${number}`).val(cmds)

  Hue[type][`user_function_${number}`] = cmds

  if (Hue.active_settings(`user_function_${number}`) === type) {
    Hue.setup_user_function_titles()
  }

  if (save) {
    Hue[`save_${type}`]()
  }
}

// Special function used for all User Function name actions
Hue.setting_user_function_name_do_action = function (
  number,
  type,
  save = true
) {
  let val = Hue.utilz.clean_string2(
    $(`#${type}_user_function_${number}_name`).val()
  )

  if (!val) {
    val = Hue.config[`global_settings_default_user_function_${number}_name`]
  }

  $(`#${type}_user_function_${number}_name`).val(val)

  Hue[type][`user_function_${number}_name`] = val

  if (Hue.active_settings(`user_function_${number}_name`) === type) {
    Hue.setup_user_function_titles()
  }

  if (save) {
    Hue[`save_${type}`]()
  }
}

// Makes the user functions controls for the settings windows
Hue.make_settings_user_functions = function (type) {
  let s = ""

  for (let i = 1; i < Hue.user_functions.length + 1; i++) {
    let o = "<option value='0' selected>----</option>"

    for (let j = 1; j < Hue.user_functions.length + 1; j++) {
      if (i !== j) {
        o += `<option value='${j}'>Switch With ${j}</option>`
      }
    }

    s += Hue.template_settings_user_function({
      number: i,
      type: type,
      options: o,
    })
  }

  return s
}

// Shows the user's role
Hue.show_role = function () {
  if (Hue.role === "admin") {
    Hue.feedback("You are an admin")
  } else if (Hue.role.startsWith("op")) {
    Hue.feedback("You are an op")
  } else if (Hue.role.startsWith("voice")) {
    Hue.feedback(`You have ${Hue.role}`)
  }

  let ps = 0

  if (Hue.can_chat) {
    Hue.feedback("You have chat permission")

    ps += 1
  }

  if (Hue.can_image) {
    Hue.feedback("You have image permission")

    ps += 1
  }

  if (Hue.can_tv) {
    Hue.feedback("You have tv permission")

    ps += 1
  }

  if (ps === 0) {
    Hue.feedback("You cannot interact")
  }
}

// Shows the user's username
Hue.show_username = function () {
  Hue.feedback(`Username: ${Hue.username}`)
}

// This handles new users joining the room
Hue.user_join = function (data) {
  Hue.add_to_userlist({
    user_id: data.user_id,
    username: data.username,
    role: data.role,
    profile_image: data.profile_image,
    date_joined: data.date_joined,
    bio: data.bio,
    hearts: data.hearts,
    skulls: data.skulls,
    audio_clip: data.audio_clip,
  })

  let f = function () {
    Hue.show_profile(data.username)
  }

  let item = Hue.make_info_popup_item({
    icon: "user-plus",
    message: `${data.username} has joined`,
    on_click: f,
    type: "user_join",
  })

  if (!Hue.user_is_ignored(data.username)) {
    Hue.show_popup(Hue.make_info_popup(f), item)
  }

  if(data.username !== Hue.username) {
      Hue.on_activity("join")
  }

  Hue.update_user_last_message(data.user_id)

  if (Hue.open_profile_username === data.username) {
    Hue.show_profile(data.username, $("#show_profile_image").attr("src"))
  }
}

// Updates the user data with their last message
Hue.update_user_last_message = function (user_id) {
  let last_chat_message = Hue.get_last_chat_message_by_user_id(user_id)

  if (!last_chat_message) {
    return false
  }

  let text = $(last_chat_message).find(".chat_content").last().text()

  if (!text) {
    return false
  }

  if (last_chat_message) {
    Hue.replace_property_in_userlist_by_user_id(user_id, "last_message", text)
  }
}

// Updates the user count in the header and user list
Hue.update_usercount = function () {
  let s = `${Hue.utilz.singular_or_plural(Hue.usercount, "Users")} Online`

  $("#header_users_count").text(`(${Hue.usercount})`)

  if (Hue.userlist_mode === "normal") {
    Hue.msg_userlist.set_title(s)
  }
}

// Adds a user to the user list
Hue.add_to_userlist = function (args = {}) {
  let def_args = {
    user_id: false,
    username: false,
    role: false,
    profile_image: false,
    date_joined: false,
    bio: "",
    hearts: 0,
    skulls: 0,
    last_message: "",
    audio_clip: false,
  }

  args = Object.assign(def_args, args)

  for (let i = 0; i < Hue.userlist.length; i++) {
    if (Hue.userlist[i].user_id === args.user_id) {
      Hue.userlist[i].user_id = args.user_id
      Hue.userlist[i].username = args.username
      Hue.userlist[i].role = args.role
      Hue.userlist[i].profile_image = args.profile_image
      Hue.userlist[i].bio = args.bio
      Hue.userlist[i].hearts = args.hearts
      Hue.userlist[i].skulls = args.skulls
      Hue.userlist[i].last_message = args.last_message
      Hue.userlist[i].audio_clip = args.audio_clip

      Hue.update_userlist()

      return false
    }
  }

  Hue.userlist.push({
    user_id: args.user_id,
    username: args.username,
    role: args.role,
    profile_image: args.profile_image,
    date_joined: args.date_joined,
    bio: args.bio,
    hearts: args.hearts,
    skulls: args.skulls,
    last_message: args.last_message,
    audio_clip: args.audio_clip,
  })

  Hue.update_userlist()

  return true
}

// Removes a user from the user list
Hue.remove_from_userlist = function (user_id) {
  for (let i = 0; i < Hue.userlist.length; i++) {
    if (Hue.userlist[i].user_id === user_id) {
      Hue.userlist.splice(i, 1)
      Hue.update_userlist()
      break
    }
  }
}

// Replaces a property of a user in the userlist by username
Hue.replace_property_in_userlist_by_username = function (
  username,
  prop,
  new_value,
  update = true
) {
  let changed = false

  for (let i = 0; i < Hue.userlist.length; i++) {
    if (Hue.userlist[i].username === username) {
      Hue.userlist[i][prop] = new_value
      changed = true
      break
    }
  }

  if (update && changed) {
    Hue.update_userlist(prop)

    if (Hue.open_profile_username === username) {
      Hue.show_profile(username)
    }
  }
}

// Replaces a property of a user by user_id
Hue.replace_property_in_userlist_by_user_id = function (
  user_id,
  prop,
  new_value,
  update = true
) {
  let changed = false
  let user

  for (let i = 0; i < Hue.userlist.length; i++) {
    if (Hue.userlist[i].user_id === user_id) {
      Hue.userlist[i][prop] = new_value
      user = Hue.userlist[i]
      changed = true
      break
    }
  }

  if (update && changed) {
    Hue.update_userlist(prop)

    if (Hue.open_profile_username === user.username) {
      Hue.show_profile(user.username)
    }
  }
}

// Gets the role of a user by username
Hue.get_role = function (uname) {
  for (let i = 0; i < Hue.userlist.length; i++) {
    if (Hue.userlist[i].username === uname) {
      return Hue.userlist[i].role
    }
  }
}

// Sets all voice roles to voice_1
Hue.reset_voices_userlist = function () {
  for (let i = 0; i < Hue.userlist.length; i++) {
    if (
      Hue.userlist[i].role.startsWith("voice") &&
      Hue.userlist[i].role !== "voice_1"
    ) {
      Hue.userlist[i].role = "voice_1"
    }
  }

  Hue.update_userlist()
}

// Sets all op roles to op_1
Hue.reset_ops_userlist = function () {
  for (let i = 0; i < Hue.userlist.length; i++) {
    if (
      Hue.userlist[i].role.startsWith("op") &&
      Hue.userlist[i].role !== "op_1"
    ) {
      Hue.userlist[i].role = "op_1"
    }
  }

  Hue.update_userlist()
}

// Sets all op roles to voice_1
Hue.remove_ops_userlist = function () {
  for (let i = 0; i < Hue.userlist.length; i++) {
    if (Hue.userlist[i].role.startsWith("op")) {
      Hue.userlist[i].role = "voice_1"
    }
  }

  Hue.update_userlist()
}

// Gets the short form of a specified role
// These are displayed next to the usernames in the user list
Hue.role_tag = function (p) {
  let s

  if (p === "admin") {
    s = "[A]"
  } else if (p === "op_1") {
    s = "[Op1]"
  } else if (p === "op_2") {
    s = "[Op2]"
  } else if (p === "op_3") {
    s = "[Op3]"
  } else if (p === "op_4") {
    s = "[Op4]"
  } else if (p === "voice_1") {
    s = "[V1]"
  } else if (p === "voice_2") {
    s = "[V2]"
  } else if (p === "voice_3") {
    s = "[V3]"
  } else if (p === "voice_4") {
    s = "[V4]"
  } else {
    s = ""
  }

  return s
}

// Gets the full proper name of a specified role
Hue.get_pretty_role_name = function (p) {
  let s

  if (p === "admin") {
    s = "Admin"
  } else if (p === "op_1") {
    s = "Op 1"
  } else if (p === "op_2") {
    s = "Op 2"
  } else if (p === "op_3") {
    s = "Op 3"
  } else if (p === "op_4") {
    s = "Op 4"
  } else if (p === "voice_1") {
    s = "Voice 1"
  } else if (p === "voice_2") {
    s = "Voice 2"
  } else if (p === "voice_3") {
    s = "Voice 3"
  } else if (p === "voice_4") {
    s = "Voice 4"
  } else {
    s = ""
  }

  return s
}

// Gets a user from the user list by username
Hue.get_user_by_username = function (uname) {
  for (let user of Hue.userlist) {
    if (user.username === uname) {
      return user
    }
  }

  return false
}

// Gets a user from the user list by ID
Hue.get_user_by_user_id = function (id) {
  for (let user of Hue.userlist) {
    if (user.user_id === id) {
      return user
    }
  }

  return false
}

// Handles a user list update
// Rebuilds the HTML of the user list window
Hue.update_userlist = function (prop = "") {
  Hue.userlist.sort(Hue.compare_userlist)
  Hue.usernames = []

  for (let item of Hue.userlist) {
    Hue.usernames.push(item.username)
  }

  if (Hue.msg_userlist.is_open()) {
    let uchange = true

    if (prop) {
      uchange = false

      if (prop === "username" || prop == "bio" || prop === "profile_image") {
        uchange = true
      }
    }

    if (uchange) {
      Hue.update_userlist_window()
    }
  }

  Hue.usercount = Hue.userlist.length
  Hue.update_usercount()
}

// Some configurations for the userlist window
Hue.setup_userlist_window = function () {
  $("#userlist").on("click", ".userlist_item", function () {
    let username = $(this).find(".userlist_item_username").eq(0).text()

    if (Hue.userlist_mode === "normal") {
      Hue.show_profile(username)
    } else if (Hue.userlist_mode === "whisper") {
      Hue.update_whisper_users(username)
    }
  })
}

// Fills the userlist window with user information
Hue.update_userlist_window = function () {
  let s = $()

  s = s.add()

  for (let i = 0; i < Hue.userlist.length; i++) {
    let item = Hue.userlist[i]

    let h = $(`
        <div class='modal_item userlist_item dynamic_title'>
            <div class='userlist_column flex_column_center'>
                <div>
                    <div class='userlist_item_profile_image_container round_image_container action4'>
                        <img class='userlist_item_profile_image profile_image' src='${item.profile_image}' loading='lazy'>
                    </div>
                    <div class='userlist_item_details_container'>
                        <div class='userlist_item_username action'></div>
                        <div class='userlist_item_role action'></div>
                    </div>
                </div>
                <div class='userlist_item_bio action'></div>
            </div>
        </div>`)

    let t = Hue.get_user_info_title(item)

    h.attr("title", t)
    h.data("otitle", t)
    h.data("date", item.date_joined)

    let image = h.find(".userlist_item_profile_image").eq(0)

    image.on("error", function (e) {
      if ($(this).attr("src") !== Hue.config.default_profile_image_url) {
        $(this).attr("src", Hue.config.default_profile_image_url)
      }
    })

    let role_tag = Hue.role_tag(item.role)
    let role_element = h.find(".userlist_item_role").eq(0)
    role_element.text(role_tag)

    let uname = h.find(".userlist_item_username").eq(0)
    uname.text(item.username)

    let bio = h.find(".userlist_item_bio").eq(0)

    if (item.bio) {
      bio.text(item.bio.substring(0, 50))
    } else {
      bio.css("display", "none")
    }

    s = s.add(h)
  }

  $("#userlist").html(s)

  if (Hue.userlist_filtered) {
    Hue.do_modal_filter("userlist")
  }
}

// Used to sort the user list by order of roles
// Admins at the top, voice_1 at the bottom, etc
// It sorts in alphabetical order on equal roles
Hue.compare_userlist = function (a, b) {
  if (a.role === "") {
    a.role = "voice_1"
  }

  if (b.role === "") {
    b.role = "voice_1"
  }

  if (a.role.startsWith("voice") && b.role.startsWith("voice")) {
    if (a.role < b.role) {
      return 1
    } else if (a.role > b.role) {
      return -1
    }

    if (a.username > b.username) {
      return -1
    } else if (a.username < b.username) {
      return 1
    } else {
      return 0
    }
  } else {
    if (a.role > b.role) {
      return 1
    } else if (a.role < b.role) {
      return -1
    }

    if (a.username < b.username) {
      return -1
    } else if (a.username > b.username) {
      return 1
    } else {
      return 0
    }
  }
}

// Returns true or false depending if the user is online
Hue.user_is_online_by_username = function (username) {
  let user = Hue.get_user_by_username(username)
  return Boolean(user)
}

// Checks if a user is controllable
// Basically a user's role is below the user's role
// An admin can control other admins
Hue.user_is_controllable = function (user) {
  if (user.user_id === Hue.user_id) {
    return true
  }

  if (!Hue.is_admin_or_op()) {
    return false
  }

  if (
    (user.role === "admin" || user.role.startsWith("op")) &&
    Hue.role !== "admin"
  ) {
    return false
  }

  return true
}

// Shows the user list window
Hue.show_userlist_window = function (mode = "normal", filter = false) {
  Hue.userlist_mode = mode

  if (mode === "normal") {
    Hue.update_usercount()
  } else if (mode === "whisper") {
    Hue.msg_userlist.set_title("Add or Remove a User")
  }

  Hue.update_userlist_window()

  Hue.msg_userlist.show(function () {
    if (filter) {
      $("#userlist_filter").val(filter)
      Hue.do_modal_filter()
    }
  })
}

// Sorts a user list by activity date
Hue.sort_userlist_by_activity_trigger = function (a, b) {
  if (a.last_activity_trigger < b.last_activity_trigger) {
    return -1
  }

  if (a.last_activity_trigger > b.last_activity_trigger) {
    return 1
  }

  return 0
}

// Updates the profile image of a user in the userlist
Hue.update_user_profile_image = function (id, pi) {
  for (let i = 0; i < Hue.userlist.length; i++) {
    let user = Hue.userlist[i]

    if (user.user_id === id) {
      Hue.userlist[i].profile_image = pi
      return
    }
  }
}

// Gets the ignored usernames list
Hue.get_ignored_usernames_list = function () {
  let list = Hue.get_setting("ignored_usernames").split("\n")

  if (list.length === 1 && !list[0]) {
    list = []
  }

  Hue.ignored_usernames_list = list
}

// What to do when a user disconnects
Hue.user_disconnect = function (data) {
  Hue.remove_from_userlist(data.user_id)
  Hue.update_activity_bar()

  let s, mode
  let type = data.disconnection_type

  if (type === "disconnection") {
    s = `${data.username} has left`
    mode = "normal"
  } else if (type === "pinged") {
    s = `${data.username} has left (Ping Timeout)`
    mode = "normal"
  } else if (type === "kicked") {
    s = `${data.username} was kicked by ${data.info1}`
    mode = "action"
  } else if (type === "banned") {
    s = `${data.username} was banned by ${data.info1}`

    if (Hue.ban_list_open) {
      Hue.request_ban_list()
    }

    mode = "action"
  }

  let item = Hue.make_info_popup_item({
    icon: "sign-out",
    message: s,
    action: false,
    type: "user_part",
  })

  if (!Hue.user_is_ignored(data.username) || mode === "action") {
    Hue.show_popup(Hue.make_info_popup(), item)
  }

  if (Hue.open_profile_username === data.username) {
    Hue.show_profile(data.username, $("#show_profile_image").attr("src"))
  }
}

// Announces that the operation cannot be applied to a certain user
// This is usually because the user's role is not low enough
Hue.forbidden_user = function () {
  Hue.feedback("That operation is forbidden on that user")
}

// Announces username changes
Hue.announce_new_username = function (data) {
  Hue.replace_property_in_userlist_by_username(
    data.old_username,
    "username",
    data.username
  )

  let show = Hue.check_media_permission(Hue.get_role(data.username), "chat")

  if (Hue.username === data.old_username) {
    Hue.set_username(data.username)

    Hue.show_room_notification(
      data.username,
      `You are now known as ${data.username}`
    )

    Hue.update_input_placeholder()

    if (Hue.details_open) {
      Hue.show_details()
    }
  } else {
    if (show) {
      Hue.show_room_notification(
        data.username,
        `${data.old_username} is now known as ${data.username}`
      )
    }
  }

  if (Hue.admin_list_open) {
    Hue.request_admin_list()
  }

  let user = Hue.get_user_by_username(data.username)
  Hue.update_activity_bar_username(user.user_id, user.username)
}

// Check whether a user is ignored by checking the ignored usernames list
Hue.user_is_ignored = function (uname) {
  if (uname === Hue.username) {
    return false
  }

  if (Hue.ignored_usernames_list.includes(uname)) {
    return true
  }

  return false
}

// Returns feedback on wether a user is in the room or not
Hue.user_not_in_room = function (uname) {
  if (uname) {
    Hue.feedback(`${uname} is not in the room`)
  } else {
    Hue.feedback("User is not in the room")
  }
}

// Returns a list of usernames matched by a string
// It splits and joins the string until a user in the user list matches
// Or returns an empty array
Hue.get_matching_usernames = function (s) {
  let user = Hue.get_user_by_username(s)

  if (user) {
    return [user.username]
  }

  let split = s.split(" ")
  let uname = split[0]
  let matches = []

  for (let i = 0; i < split.length; i++) {
    if (i > 0) {
      uname = `${uname} ${split[i]}`
    }

    if (Hue.usernames.includes(uname)) {
      matches.push(uname)
    }
  }

  return matches
}

// Setups the profile image
Hue.setup_profile_image = function (pi) {
  if (pi === "") {
    Hue.profile_image = Hue.config.default_profile_image_url
  } else {
    Hue.profile_image = pi
  }
}

// Setups user profile windows
Hue.setup_show_profile = function () {
  $("#show_profile_whisper").click(function () {
    Hue.write_popup_message([Hue.open_profile_username])
  })

  $("#show_profile_sync_tv").click(function () {
    Hue.sync_tv(Hue.open_profile_username)
    Hue.msg_profile.close()
  })

  $("#show_profile_image").on("error", function () {
    if ($(this).attr("src") !== Hue.config.default_profile_image_url) {
      $(this).attr("src", Hue.config.default_profile_image_url)
    }
  })

  $("#show_profile_search").click(function () {
    Hue.show_chat_search(Hue.open_profile_username)
  })

  $("#show_profile_hearts_icon").click(function () {
    Hue.send_badge(Hue.open_profile_username, "heart")
  })

  $("#show_profile_skulls_icon").click(function () {
    Hue.send_badge(Hue.open_profile_username, "skull")
  })

  $("#show_profile_audio_clip").click(function () {
    if (!Hue.show_profile_audio_clip_started) {
      Hue.show_profile_audio = document.createElement("audio")
      Hue.show_profile_audio.src = Hue.open_profile_user.audio_clip

      Hue.show_profile_audio.onended = function () {
        Hue.stop_show_profile_audio()
      }

      Hue.show_profile_audio.play()

      $("#show_profile_audio_clip_icon").find("use").eq(0).attr("href", "#icon_pause")

      Hue.show_profile_audio_clip_started = true
    } else {
      Hue.stop_show_profile_audio()
    }
  })
}

// Stops the profile audio and restores default state
Hue.stop_show_profile_audio = function () {
  if (Hue.show_profile_audio) {
    Hue.show_profile_audio.pause()
    Hue.show_profile_audio_clip_started = false
    $("#show_profile_audio_clip_icon").find("use").eq(0).attr("href", "#icon_play")
  }
}

// Wrapper to show profile  by id
Hue.show_profile_by_user_id = function (id) {
  let user = Hue.get_user_by_user_id(id)
  Hue.show_profile(user.username, false, id)
}

// Shows a user's profile window
Hue.show_profile = function (username, profile_image = false, user_id = false) {
  let pi
  let role = "Offline"
  let uid = ""
  let bio = ""
  let hearts = 0
  let skulls = 0
  let user = Hue.get_user_by_username(username)

  if (user) {
    role = Hue.get_pretty_role_name(user.role)
    bio = user.bio
    hearts = user.hearts
    skulls = user.skulls
    uid = `ID: ${user.user_id}`

    if (user.username === Hue.username) {
      same_user = true
    }

    Hue.open_profile_user = user
  } else {
    if (user_id) {
      uid = `ID: ${user_id}`
    }
  }

  Hue.open_profile_username = username

  if (profile_image) {
    pi = profile_image
  } else {
    if (user && user.profile_image) {
      pi = user.profile_image
    } else {
      pi = Hue.config.default_profile_image_url
    }
  }

  $("#show_profile_username").text(username)
  $("#show_profile_username").attr("title", uid)
  $("#show_profile_role").text(`(${role})`)
  $("#show_profile_bio")
    .html(Hue.utilz.make_html_safe(bio).replace(/\n+/g, " <br> "))
    .urlize()

  $("#show_profile_image").attr("src", pi)

  if (user) {
    let t = Hue.get_user_info_title(user)
    $("#show_profile_image").attr("title", t)
    $("#show_profile_image").data("otitle", t)
    $("#show_profile_image").data("date", user.date_joined)
    $("#show_profile_image").addClass("dynamic_title")
  } else {
    $("#show_profile_image").attr("title", "")
    $("#show_profile_image").removeClass("dynamic_title")
  }

  if (!Hue.can_chat || !Hue.usernames.includes(username)) {
    $("#show_profile_whisper").css("display", "none")
    $("#show_profile_hearts").css("display", "none")
    $("#show_profile_skulls").css("display", "none")
  } else {
    $("#show_profile_whisper").css("display", "block")
    $("#show_profile_hearts").css("display", "flex")
    $("#show_profile_skulls").css("display", "flex")

    Hue.set_hearts_counter(hearts)
    Hue.set_skulls_counter(skulls)
  }

  if (user && user.audio_clip) {
    $("#show_profile_audio_clip").css("display", "inline-flex")
  } else {
    $("#show_profile_audio_clip").css("display", "none")
  }

  if (Hue.room_state["tv_enabled"] 
  && Hue.usernames.includes(username)) {
    $("#show_profile_sync_tv").css("display", "flex")
  } else {
    $("#show_profile_sync_tv").css("display", "none")
  }

  if (
    $(".show_profile_button").filter(function () {
      return $(this).css("display") !== "none"
    }).length
  ) {
    $("#show_profile_buttons").css("display", "grid")
  } else {
    $("#show_profile_buttons").css("display", "none")
  }

  $("#show_profile_user").data("username", username)
  
  Hue.msg_profile.show()
}

// Announces a user's profile image change
Hue.profile_image_changed = function (data) {
  let user = Hue.get_user_by_user_id(data.user_id)

  if (!user) {
    return false
  }

  if (data.user_id === Hue.user_id) {
    Hue.profile_image = data.profile_image
    $("#user_menu_profile_image").attr("src", Hue.profile_image)
  }

  Hue.update_user_profile_image(data.user_id, data.profile_image)

  if (!Hue.user_is_ignored(user.username)) {
    Hue.show_room_notification(
      user.username,
      `${user.username} changed their profile image`
    )
  }

  Hue.update_activity_bar_image(data.user_id, data.profile_image)
}

// When any user changes their bio
Hue.bio_changed = function (data) {
  Hue.replace_property_in_userlist_by_username(data.username, "bio", data.bio)

  if (data.username === Hue.username) {
    Hue.set_bio(data.bio)
  }

  if (data.bio && !Hue.user_is_ignored(data.username)) {
    Hue.show_room_notification(
      data.username,
      `${data.username} changed their bio`
    )
  }
}

// Resets all voice users to voice_1
Hue.reset_voices = function () {
  if (!Hue.check_op_permission(Hue.role, "voice_roles")) {
    return false
  }

  Hue.socket_emit("reset_voices", {})
}

// Resets all op users to op_1
Hue.reset_ops = function () {
  if (Hue.role !== "admin") {
    return false
  }

  Hue.socket_emit("reset_ops", {})
}

// Resets all op users to voice_1
Hue.remove_ops = function () {
  if (Hue.role !== "admin") {
    return false
  }

  Hue.socket_emit("remove_ops", {})
}

// Announces that voices were resetted
Hue.announce_voices_resetted = function (data) {
  Hue.show_room_notification(
    data.username,
    `${data.username} resetted the voices`
  )

  if (Hue.role.startsWith("voice") && Hue.role !== "voice_1") {
    Hue.set_role("voice_1")
  }

  Hue.reset_voices_userlist()
}

// Announces that ops were resetted
Hue.announce_ops_resetted = function (data) {
  Hue.show_room_notification(data.username, `${data.username} resetted the ops`)

  if (Hue.role.startsWith("op") && Hue.role !== "op_1") {
    Hue.set_role("op_1")
  }

  Hue.reset_ops_userlist()
}

// Announces that ops were resetted
Hue.announce_removed_ops = function (data) {
  Hue.show_room_notification(data.username, `${data.username} removed all ops`)

  if (Hue.role.startsWith("op")) {
    Hue.set_role("voice_1")
  }

  Hue.remove_ops_userlist()

  if (Hue.admin_list_open) {
    Hue.request_admin_list()
  }
}

// Changes a user's role
Hue.change_role = function (username, role) {
  if (!Hue.check_op_permission(Hue.role, "voice_roles")) {
    return false
  }

  if (username.length > 0 && username.length <= Hue.config.max_max_username_length) {
    if (username === Hue.username) {
      Hue.feedback("You can't assign a role to yourself")
      return false
    }

    if ((role === "admin" || role.startsWith("op")) && Hue.role !== "admin") {
      Hue.forbidden_user()
      return false
    }

    if (!Hue.roles.includes(role)) {
      Hue.feedback("Invalid role")
      return false
    }

    Hue.socket_emit("change_role", { username: username, role: role })
  }
}

// Announces a user's role change
Hue.announce_role_change = function (data) {
  if (Hue.username === data.username2) {
    Hue.set_role(data.role)
  }

  Hue.show_room_notification(
    data.username1,
    `${data.username1} gave ${data.role} to ${data.username2}`
  )
  Hue.replace_property_in_userlist_by_username(
    data.username2,
    "role",
    data.role
  )

  if (Hue.admin_list_open) {
    Hue.request_admin_list()
  }
}

// Role setter for user
Hue.set_role = function (rol, config = true) {
  Hue.role = rol
  Hue.check_media_permissions()
  Hue.check_message_board_permissions()
  
  if (config) {
    Hue.config_room_menu()
  }
}

// Bans a user
Hue.ban = function (uname) {
  if (!Hue.check_op_permission(Hue.role, "ban")) {
    return false
  }

  if (uname.length > 0 && uname.length <= Hue.config.max_max_username_length) {
    if (uname === Hue.username) {
      Hue.feedback("You can't ban yourself")
      return false
    }

    Hue.socket_emit("ban", { username: uname })
  }
}

// Unbans a user
Hue.unban = function (uname) {
  if (!Hue.check_op_permission(Hue.role, "unban")) {
    return false
  }

  if (uname.length > 0 && uname.length <= Hue.config.max_max_username_length) {
    if (uname === Hue.username) {
      Hue.feedback("You can't unban yourself")
      return false
    }

    Hue.socket_emit("unban", { username: uname })
  }
}

// Unbans all banned users
Hue.unban_all = function () {
  if (!Hue.check_op_permission(Hue.role, "unban")) {
    return false
  }

  Hue.socket_emit("unban_all", {})
}

// Gets the number of users banned
Hue.get_ban_count = function () {
  if (Hue.is_admin_or_op()) {
    Hue.socket_emit("get_ban_count", {})
  }
}

// Shows a window with the number of users banned
Hue.receive_ban_count = function (data) {
  let s

  if (data.count === 1) {
    s = `There is ${data.count} user banned`
  } else {
    s = `There are ${data.count} users banned`
  }

  Hue.msg_info.show(s)
}

// Kicks a user
Hue.kick = function (uname) {
  if (!Hue.check_op_permission(Hue.role, "kick")) {
    return false
  }

  if (uname.length > 0 && uname.length <= Hue.config.max_max_username_length) {
    if (uname === Hue.username) {
      Hue.feedback("You can't kick yourself")
      return false
    }

    if (!Hue.usernames.includes(uname)) {
      Hue.user_not_in_room()
      return false
    }

    let rol = Hue.get_role(uname)

    if ((rol === "admin" || rol.startsWith("op")) && Hue.role !== "admin") {
      Hue.forbidden_user()
      return false
    }

    Hue.socket_emit("kick", { username: uname })
  }
}

// Announces that a user was banned
Hue.announce_ban = function (data) {
  Hue.show_room_notification(
    data.username1,
    `${data.username1} banned ${data.username2}`
  )

  if (Hue.ban_list_open) {
    Hue.request_ban_list()
  }
}

// Announces that a user was unbanned
Hue.announce_unban = function (data) {
  Hue.show_room_notification(
    data.username1,
    `${data.username1} unbanned ${data.username2}`
  )

  if (Hue.ban_list_open) {
    Hue.request_ban_list()
  }
}

// Announces that all banned users were unbanned
Hue.announce_unban_all = function (data) {
  Hue.show_room_notification(
    data.username,
    `${data.username} unbanned all banned users`
  )
}

// Checks if a user already has a certain role
Hue.is_already = function (who, what) {
  Hue.feedback(`${who} already has ${what}`)
}

// Starts click events for 'generic usernames'
// Username elements with this class get included
Hue.start_generic_uname_click_events = function () {
  $("body").on("click", ".generic_uname", function () {
    let uname = $(this).text()
    Hue.show_profile(uname)
  })
}

// Checks if a role is that of an admin or an operator
// Without arguments it checks the user's role
Hue.is_admin_or_op = function (rol = false) {
  let r

  if (rol) {
    r = rol
  } else {
    r = Hue.role
  }

  if (r === "admin" || r.startsWith("op")) {
    return true
  } else {
    return false
  }
}

// Superuser command to change to any role
Hue.annex = function (rol = "admin") {
  if (!Hue.roles.includes(rol)) {
    Hue.feedback("Invalid role")
    return false
  }

  Hue.socket_emit("change_role", { username: Hue.username, role: rol })
}

// Superuser command to send a system broadcast
Hue.system_broadcast = function (rol = "admin") {
  Hue.write_popup_message([], "system_broadcast")
}

Hue.setup_badges = function () {
  Hue.start_badge_timeout()
}

// Sends 1 badge to a user
// This has a cooldown
Hue.send_badge = function (username, type) {
  if (Hue.send_badge_disabled) {
    let n = Hue.utilz.round2(Hue.config.send_badge_cooldown / 1000, 1)
    let s = n === 1 ? "1 second" : `${n} seconds`
    Hue.msg_info.show(`You can send a badge every ${s}`)
    return false
  }

  if (username === Hue.username) {
    return false
  }

  let user = Hue.get_user_by_username(username)

  if (!user) {
    return false
  }

  if (type !== "heart" && type !== "skull") {
    return false
  }

  Hue.socket_emit("send_badge", { username: username, type: type })

  Hue.send_badge_disabled = true

  Hue.start_badge_timeout()
}

// Starts a timeout to enable badge sending
Hue.start_badge_timeout = function () {
  setTimeout(function () {
    Hue.send_badge_disabled = false
  }, Hue.config.send_badge_cooldown + 100)
}

// What happens when a user receives a badge
Hue.on_badge_received = function (data) {
  if (data.username === Hue.open_profile_username) {
    if (data.type === "heart") {
      Hue.set_hearts_counter(data.badges)
    } else if (data.type === "skull") {
      Hue.set_skulls_counter(data.badges)
    }
  }

  let prop, prop_value
  let user = Hue.get_user_by_username(data.username)

  if (data.type === "heart") {
    prop = "hearts"
    prop_value = user.hearts + 1
  }

  if (data.type === "skull") {
    prop = "skulls"
    prop_value = user.skulls + 1
  }

  Hue.replace_property_in_userlist_by_username(data.username, prop, prop_value)

  if (Hue.app_focused) {
    let message = Hue.get_last_chat_message_by_username(data.username)

    if (message) {
      let profile_image_container = $(message)
        .find(".chat_profile_image_container")
        .eq(0)
      Hue.change_profile_image_badge(profile_image_container, data.type)
    }
  }
}

// Changes the profile image of a user receiving a badge
Hue.change_profile_image_badge = function (profile_image_container, type) {
  Hue.remove_badge_icons(profile_image_container)
  profile_image_container.addClass(`${type}_badge`)
  profile_image_container.addClass("profile_image_badge")

  let icon

  if (type === "heart") {
    icon = "heart-solid"
  } else if (type === "skull") {
    icon = "skull"
  }

  profile_image_container.append(
    `<svg class='other_icon profile_image_badge_icon ${type}_badge'>
      <use href='#icon_${icon}'>
    </svg>`
  )

  let number = profile_image_container.data("badge_feedback_number")

  if (!number) {
    number = 1
  } else {
    number += 1
  }

  profile_image_container.data("badge_feedback_number", number)

  setTimeout(function () {
    let number_2 = profile_image_container.data("badge_feedback_number")

    if (number !== number_2) {
      return false
    }

    Hue.remove_badge_icons(profile_image_container)
  }, Hue.config.badge_feedback_duration)
}

// Removes badge icons from profile image container
Hue.remove_badge_icons = function (profile_image_container) {
  profile_image_container.removeClass("heart_badge")
  profile_image_container.removeClass("skull_badge")
  profile_image_container.removeClass(`profile_image_badge`)
  profile_image_container.find(".profile_image_badge_icon").each(function () {
    $(this).remove()
  })
}

// Sets the hearts counter in the profile window
Hue.set_hearts_counter = function (hearts) {
  $("#show_profile_hearts_counter").text(Hue.utilz.format_number(hearts))
}

// Sets the skulls counter in the profile window
Hue.set_skulls_counter = function (skulls) {
  $("#show_profile_skulls_counter").text(Hue.utilz.format_number(skulls))
}

// Makes the title based on the last message and join date
Hue.get_user_info_title = function (user, include_username = false) {
  let last_message = ""
  let username = ""

  if (include_username) {
    username = `${user.username}\n`
  }

  if (user.last_message) {
    last_message = `Last Message: ${user.last_message.substring(0, 100)}\n`
  }

  let joined = `Joined: ${Hue.utilz.nice_date(user.date_joined)}`

  return `${username}${last_message}${joined}`
}

// If username is valid and it is not in all_usernames add it
Hue.push_to_all_usernames = function (username) {
  if (username) {
    if (!Hue.all_usernames.includes(username)) {
      Hue.all_usernames.push(username)

      if (Hue.all_usernames.length > 1000) {
        Hue.all_usernames.shift()
      }
    }
  }
}

// When a user changes the audio audio clip
Hue.audio_clip_changed = function (data) {
  Hue.replace_property_in_userlist_by_username(
    data.username,
    "audio_clip",
    data.audio_clip,
    false
  )

  if (data.username === Hue.open_profile_username) {
    Hue.show_profile(data.username)
  }

  if (data.audio_clip) {
    Hue.show_room_notification(
      data.username,
      `${data.username} changed their audio clip`
    )
  }
}

// Add a user to the ignore list
Hue.ignore_user = function (username) {
  let list = $(`#global_settings_ignored_usernames`)
  let lines = list.val().split("\n")

  for (let line of lines) {
    if (line === username) {
      Hue.feedback(`${username} is already ignored`)
      return false
    }
  }

  list.val(`${list.val()}\n${username}`.trim())
  Hue.feedback(`${username} ignored`)
  Hue.user_settings.ignored_usernames.action("global_settings")
}

// Remove a user from the ignore list
Hue.unignore_user = function (username) {
  let list = $(`#global_settings_ignored_usernames`)
  let lines = list.val().split("\n")
  let new_lines = []

  for (let line of lines) {
    if (line !== username) {
      new_lines.push(line)
    }
  }

  if(lines.length == new_lines.length) {
    Hue.feedback(`${username} is already unignored`)
    return false
  }
  
  list.val(new_lines.join("\n"))
  Hue.feedback(`${username} unignored`)
  Hue.user_settings.ignored_usernames.action("global_settings")
}

// Show the ignored list
Hue.show_ignored = function () {
  if (Hue.ignored_usernames_list.length === 0) {
    Hue.feedback("No users are ignored")
    return false
  }

  let s = `Ignored: ${Hue.ignored_usernames_list.join(", ")}`
  Hue.feedback(s)
}

// Superuser command to change a user's username
Hue.modusername = function (arg) {
  let original_uname, new_uname

  if (arg.includes(" > ")) {
    let split = arg.split(" > ")

    if (split.length !== 2) {
      return false
    }

    original_uname = split[0].trim()
    new_uname = split[1].trim()
  } else {
    let split = arg.split(" ")

    if (split.length !== 2) {
      return false
    }

    original_uname = split[0].trim()
    new_uname = split[1].trim()
  }

  if (!original_uname || !new_uname) {
    return false
  }

  if (original_uname === new_uname) {
    return false
  }

  if (new_uname.length > Hue.config.max_username_length) {
    Hue.feedback("Username is too long")
    return false
  }

  if (Hue.utilz.clean_username(new_uname) !== new_uname) {
    Hue.feedback("Username contains invalid characters")
    return false
  }

  Hue.socket_emit("modusername", {original:original_uname, new:new_uname})
}
// Creates a Separator instance
// This is used to apply horizontal separations between items
// It takes into account un-displayed items to separate properly
Hue.setup_separators = function () {
  Hue.horizontal_separator = Separator.factory({
    mode: "horizontal",
    class: "color_3",
  })

  Hue.horizontal_separator_no_margin = Separator.factory({
    mode: "horizontal",
    class: "color_3",
    margin_left: 0,
    margin_right: 0
  })

  Hue.vertical_separator = Separator.factory({
    mode: "vertical",
    class: "vertical_separator",
    html: "",
    width: "100%",
    margin_top: "1.8rem",
    margin_bottom: "1.8rem",
  })
}

// Applies separation to generic horizontal separator classes
Hue.setup_generic_separators = function () {
  $(".generic_horizontal_separator").each(function () {
    Hue.horizontal_separator.separate(this)
  })

  $(".generic_vertical_separator").each(function () {
    Hue.vertical_separator.separate(this)
  })
}

// This hides the loading animation and makes the main container visible
Hue.make_main_container_visible = function () {
  $("#loading").css("opacity", 0)
  $("#main_container").css("opacity", 1).css("pointer-events", "initial")

  setTimeout(function () {
    $("#loading").css("display", "none")
  }, 1600)
}

// Setup font loading events
Hue.setup_fonts = function () {
  document.fonts.ready.then(function () {
    Hue.on_fonts_loaded()
  })
}

// After the font finished loading
Hue.on_fonts_loaded = function () {
  Hue.goto_bottom(true, false)
}

// Utility function to create safe html elements with certain options
Hue.make_safe = function (args = {}) {
  let def_args = {
    text: "",
    text_as_html: false,
    text_classes: false,
    html: false,
    urlize: true,
    onclick: false,
    title: false,
    remove_text_if_empty: false,
    date: false,
    no_spacing: false
  }

  args = Object.assign(def_args, args)

  let c = $("<div></div>")

  if (args.text || !args.remove_text_if_empty) {
    let c_text_classes = "message_info_text inline"

    if (args.onclick) {
      c_text_classes += " pointer action"
    }

    if (args.text_classes) {
      c_text_classes += ` ${args.text_classes}`
    }

    c.append(`<div class='${c_text_classes}'></div>`)

    let c_text = c.find(".message_info_text").eq(0)

    if (args.text_as_html) {
      let h = Hue.utilz.make_html_safe(args.text)
      h = Hue.replace_markdown(h, false)

      if (args.urlize) {
        c_text.html(h).urlize()
      } else {
        c_text.html(h)
      }
    } else {
      if (args.urlize) {
        c_text.text(args.text).urlize()
      } else {
        c_text.text(args.text)
      }
    }

    if (args.onclick) {
      c_text.on("click", args.onclick)
    }

    if (args.date) {
      let nd = Hue.utilz.nice_date(args.date)

      c_text.data("date", args.date)
      c_text.data("otitle", nd)
      c_text.attr("title", nd)
      c_text.addClass("dynamic_title")
    } else {
      if (args.title) {
        c_text.attr("title", args.title)
      }
    }
  }

  if (args.html) {
    let sp

    if (!args.no_spacing && (args.text || !args.remove_text_if_empty)) {
      sp = "message_info_html_spaced"
    } else {
      sp = ""
    }

    c.append(`<div class='message_info_html ${sp}'>${args.html}</div>`)
  }

  return c[0]
}

// Checks if a user is in the room to receive a whisper
Hue.check_whisper_user = function (uname) {
  if (!Hue.can_chat) {
    Hue.cant_chat()
    return false
  }

  if (!Hue.usernames.includes(uname)) {
    Hue.user_not_in_room(uname)
    return false
  }

  return true
}

// Wrapper to process write whisper by id
Hue.process_write_whisper_by_user_id = function (id) {
  let user = Hue.get_user_by_user_id(id)
  Hue.process_write_whisper(user.username)
}

// Processes whisper commands to determine how to handle the operation
Hue.process_write_whisper = function (arg, show = true) {
  let user = Hue.get_user_by_username(arg)

  if (arg.includes(">")) {
    Hue.send_inline_whisper(arg, show)
  } else if (user) {
    Hue.write_popup_message([arg], "user")
  } else if (arg.includes("&&")) {
    let split = arg.split("&&").map((x) => x.trim())
    Hue.write_popup_message(split, "user")
  } else {
    let matches = Hue.get_matching_usernames(arg)

    if (matches.length === 1) {
      let message = arg.replace(matches[0], "")
      let arg2 = `${matches[0]} > ${message}`

      Hue.send_inline_whisper(arg2, show)
    } else if (matches.length > 1) {
      Hue.feedback(
        `Multiple usernames matched. Use the proper > syntax. For example ${Hue.config.commands_prefix}whisper bob > hi`
      )
      return false
    } else {
      Hue.user_not_in_room()
      return false
    }
  }
}

// Sends a whisper using the inline format (/whisper user > hello)
Hue.send_inline_whisper = function (arg, show = true) {
  let split = arg.split(">")

  if (split.length < 2) {
    return false
  }

  let uname = split[0].trim()
  let usplit = uname.split("&&")
  let message = Hue.utilz.clean_string2(split.slice(1).join(">"))

  if (!message) {
    return false
  }

  let message_split = message.split("\n")
  let num_lines = message_split.length

  if (num_lines > Hue.config.max_num_newlines) {
    return false
  }

  let approved = []

  for (let u of usplit) {
    u = u.trim()

    if (!Hue.check_whisper_user(u)) {
      continue
    }

    approved.push(u)
  }

  if (approved.length === 0) {
    return false
  }

  Hue.do_send_whisper({message: message, usernames: approved, 
    draw_coords: false, type: "user"}, show)
}

// Shows the window to write whispers
Hue.write_popup_message = function (unames = [], type = "user") {
  if (unames.length === 0) {
    if (type === "user") {
      return false
    }
  } else {
    for (let u of unames) {
      if (!Hue.check_whisper_user(u)) {
        return false
      }
    }
  }

  let f = function () {
    Hue.show_userlist_window("whisper")
  }

  let title 

  if (type === "user") {
    title = { text: `Whisper to ${Hue.utilz.nice_list(unames)}`, onclick: f }
  } else {
    title = { text: `Whisper (${type})`}
  }

  Hue.message_unames = unames
  Hue.msg_message.set_title(Hue.make_safe(title))
  Hue.message_type = type

  Hue.msg_message.show(function () {
    $("#write_message_area").focus()

    if (type === "user") {
      Hue.show_message_feedback("Click titlebar to add more users")
    } else if (type === "system_broadcast") {
      Hue.show_message_feedback("This will send a whisper to every user")
    }

    Hue.sending_whisper = false
  })
}

// Updates the user receivers in the whisper window after picking a username in the user list
Hue.update_whisper_users = function (uname) {
  if (!Hue.message_unames.includes(uname)) {
    Hue.message_unames.push(uname)
  } else {
    if (Hue.message_unames.length === 1) {
      return false
    }

    for (let i = 0; i < Hue.message_unames.length; i++) {
      let u = Hue.message_unames[i]

      if (u === uname) {
        Hue.message_unames.splice(i, 1)
        break
      }
    }
  }

  let f = function () {
    Hue.show_userlist_window("whisper")
  }

  let title = {
    text: `Whisper to ${Hue.utilz.nice_list(Hue.message_unames)}`,
    onclick: f,
  }

  Hue.msg_message.set_title(Hue.make_safe(title))
  Hue.msg_userlist.close()
}

// Submits the whisper window form
// Handles different types of whispers
// Includes text and drawings
Hue.send_popup_message = function (force = false) {
  if (Hue.sending_whisper) {
    return false
  }

  Hue.sending_whisper = true

  let message = Hue.utilz.remove_multiple_empty_lines($("#write_message_area").val()).trim()
  let diff = Hue.config.max_whispers_post_length - message.length
  let draw_coords

  if (Hue.draw_message_click_x.length > 0) {
    draw_coords = [
      Hue.draw_message_click_x,
      Hue.draw_message_click_y,
      Hue.draw_message_drag,
    ]
  } else {
    draw_coords = false
  }

  if (diff === Hue.config.max_whispers_post_length) {
    if (!draw_coords) {
      Hue.sending_whisper = false
      return false
    }
  } else if (diff < 0) {
    Hue.show_message_feedback(`Character limit exceeded by ${Math.abs(diff)}`)
    Hue.sending_whisper = false
    return false
  }

  let message_split = message.split("\n")
  let num_lines = message_split.length

  if (num_lines > Hue.config.max_num_newlines) {
    Hue.show_message_feedback("Too many linebreaks")
    Hue.sending_whisper = false
    return false
  }

  let ans = Hue.send_whisper(message, draw_coords, force)

  if (ans) {
    Hue.msg_message.close(function () {
      Hue.sending_whisper = false
    })
  } else {
    Hue.sending_whisper = false
  }
}

// On whisper received
Hue.whisper_received = function (data) {
  if (Hue.ignored_usernames_list.includes(data.username)) {
    return false
  }

  if (Hue.is_command(data.message)) {
    if (Hue.get_setting("accept_commands_from").split("\n").includes(data.username)) {
      Hue.execute_whisper_command(data)
      return
    }
  }

  let message = `Whisper from ${data.username}`
  let func = function () { Hue.show_whisper(data) }
  let item = Hue.make_info_popup_item({icon: "envelope", message: message, push: false})

  let open = Hue.get_setting("open_whispers_automatically")
  data.notification = Hue.push_whisper(message, func, open)
  
  if (open) {
    Hue.show_whisper(data)
  } else {
    Hue.show_popup(Hue.make_info_popup(func), item)
  }
}

// Shows a whisper message
Hue.show_whisper = function (data) {
  let title_func = function () {}
  let button_func = function () {}
  let title, button_html
  let usr

  if (data.usernames === undefined) {
    title = `Whisper from ${data.username}`
    usr = [data.username]
  } else {
    title = `Whisper sent to ${Hue.utilz.nice_list(data.usernames)}`
    usr = data.usernames
  }

  button_html = Hue.utilz.nonbreak("Send Whisper")

  button_func = function () {
    Hue.write_popup_message(usr)
  }

  title_func = function () {
    Hue.show_profile(usr[0])
  }
  
  let modal = Hue.create_modal({window_class: "!whisper_width"}, "whisper")
  modal.set(Hue.template_sent_message())
  modal.set_title(Hue.make_safe({text: title, onclick: title_func }))
  let message_html = Hue.utilz.make_html_safe(data.message)
  message_html = Hue.replace_markdown(message_html, false)

  modal.show(function () {
    let container = modal.content
    let text_el = $(container).find(".sent_message_text").eq(0)
    text_el.html(message_html)
    let button_el = $(container).find(".sent_message_button").eq(0)

    if (data.type === "user") {
      button_el.html(button_html)
      button_el.click(button_func)
    } else {
      button_el.css("display", "none")
    }
    
    Hue.setup_whispers_click(text_el, usr[0])
    let canvas =  $(container).find(".sent_message_drawing")[0]
    
    if (data.draw_coords) {
      let context = canvas.getContext("2d")

      context.clearRect(0, 0, canvas.width, canvas.height);

      Hue.canvas_redraw({
        context: context,
        click_x: data.draw_coords[0],
        click_y: data.draw_coords[1],
        drag: data.draw_coords[2],
      })

      $(canvas).css("display", "block")
    } else {
      $(canvas).css("display", "none")
    }
  })

  if (!data.notification.data("read")) {
    let text = data.notification.text().replace(/\s\(unread\)$/, "")
    data.notification.text(text)
    data.notification.data("read", true)
    Hue.update_whispers_unread_count()
  }
}

// Sends a whisper to user(s)
Hue.send_whisper = function (message, draw_coords, force = false) {
  if (Hue.message_type === "system_broadcast") {
    Hue.do_send_whisper({message: message, usernames: [], 
      draw_coords: draw_coords, type: Hue.message_type})
    
    return true
  }

  let unames = Hue.message_unames

  if (!unames) {
    return false
  }

  if (!Hue.can_chat) {
    Hue.show_message_feedback("You don't have chat permission")
    return false
  }

  let discarded = []
  let approved = []

  for (let u of unames) {
    if (!Hue.usernames.includes(u)) {
      discarded.push(u)
    } else {
      approved.push(u)
    }
  }

  if (!force) {
    if (discarded.length > 0) {
      let us = Hue.utilz.nice_list(discarded)
      let w = discarded.length === 1 ? "is" : "are"
      let dd = ""

      if (unames.length > discarded.length) {
        dd = " Double click Send to send anyway"
      }

      Hue.show_message_feedback(`(${us} ${w} not in the room)${dd}`)
      return false
    }
  }

  if (approved.length === 0) {
    return false
  }

  Hue.do_send_whisper({message: message, usernames: approved, 
    draw_coords: draw_coords, type: Hue.message_type})

  return true
}

// Does the whisper emit
Hue.do_send_whisper = function (data, show = true) {
  Hue.socket_emit("whisper", data)

  if (show) {
    let func = function () {
      Hue.show_whisper(data)
    }

    let msg = ""
    
    if (data.type === "user") {
      msg = `Whisper sent to ${Hue.utilz.nice_list(data.usernames)}`
    } else if (data.type === "system_broadcast") {
      msg = "System Broadcast Sent"
    }

    let item = Hue.make_info_popup_item({icon: "envelope", message: msg, push: false})
    Hue.show_popup(Hue.make_info_popup(func), item)
    data.notification = Hue.push_whisper(msg, func, true)
  }
}

// Setups whispers click events
Hue.setup_whispers_click = function (content, username) {
  $(content)
    .find(".whisper_link")
    .each(function () {
      $(this).click(function () {
        Hue.process_write_whisper(
          `${username} > ${$(this).data("whisper")}`,
          false
        )
      })
    })
}

// Setups the message window
Hue.setup_message_window = function () {
  $("#write_message_send_button").click(function () {
    Hue.send_popup_message()
  })

  $("#write_message_send_button").dblclick(function () {
    Hue.send_popup_message(true)
  })

  $("#write_message_clear_drawing").click(function () {
    Hue.clear_draw_message_state()
  })

  Hue.setup_message_draw_area()
}

// Setups the drawing area of write whisper windows
Hue.setup_message_draw_area = function () {
  Hue.draw_message_context = $("#draw_message_area")[0].getContext("2d")
  Hue.clear_draw_message_state()

  $("#draw_message_area").mousedown(function (e) {
    Hue.draw_message_just_entered = false
    Hue.draw_message_add_click(e.offsetX, e.offsetY, false)
    Hue.redraw_draw_message()
  })

  $("#draw_message_area").mousemove(function (e) {
    if (Hue.mouse_is_down) {
      Hue.draw_message_add_click(
        e.offsetX,
        e.offsetY,
        !Hue.draw_message_just_entered
      )
      Hue.redraw_draw_message()
    }

    Hue.draw_message_just_entered = false
  })

  $("#draw_message_area").mouseenter(function (e) {
    Hue.draw_message_just_entered = true
  })
}

// Pushes a new whisper to the whispers window
Hue.push_whisper = function (message, on_click, read) {
  let d = Date.now()
  let t = Hue.utilz.nice_date(d)

  let message_html = `<div class='whispers_message'>${Hue.utilz.make_html_safe(
    message
  )}</div>`
  let item = $(
    `<div class='whispers_item modal_item'><div class='whispers_item_content action pointer dynamic_title'>${message_html}</div>`
  )
  let content = item.find(".whispers_item_content").eq(0)

  content.attr("title", t)
  content.data("otitle", t)
  content.data("date", d)
  content.data("read", read)

  if (read) {
    content.text(message)
  } else {
    content.text(`${message} (unread)`)
  }

  content.click(function () {
    on_click()
  })

  let items = $("#whispers_container .whispers_item")
  let num_items = items.length

  if (num_items === 0) {
    $("#whispers_container").html(item)
  } else {
    $("#whispers_container").prepend(item)
  }

  if (num_items > Hue.config.whispers_crop_limit) {
    $("#whispers_container .whispers_item").last().remove()
  }

  Hue.update_whispers_unread_count()

  return content
}

// Shows information about the recent whispers
Hue.show_whispers = function (filter = false) {
  Hue.msg_whispers.show(function () {
    if (filter) {
      $("#whispers_filter").val(filter)
      Hue.do_modal_filter()
    }
  })
}

// Updates the whispers unread count
Hue.update_whispers_unread_count = function () {
  $("#header_whispers_count").text(`(${Hue.get_unread_whispers()})`)
}

// Get a list of unread whispers
Hue.get_unread_whispers = function () {
  let num_unread = 0

  $(".whispers_item_content").each(function () {
    if (!$(this).data("read")) {
      num_unread += 1
    }
  })

  return num_unread
}

// Shows the message feedback
Hue.show_message_feedback = function (s) {
  $("#write_message_feedback").text(s)
  $("#write_message_feedback").css("display", "block")
}
// Changes the tab title to reflect activity
// The character used depends on the activity type
// Either general activity, or highlighted activity
Hue.alert_title = function (mode) {
  let modes = [1, 2]

  if (!modes.includes(mode)) {
    return false
  }

  if (mode === 1 && Hue.alert_mode !== 0) {
    return false
  }

  if (mode === 2 && Hue.alert_mode === 2) {
    return false
  }

  Hue.alert_mode = mode
  Hue.generate_favicon(mode)
}

// Removes the activity indicator in the tab title
Hue.remove_alert_title = function () {
  if (Hue.alert_mode > 0) {
    Hue.alert_mode = 0
  }

  if (Hue.favicon_mode > 0) {
    Hue.generate_favicon(0)
  }
}

// Sets the tab title
Hue.set_title = function (s) {
  document.title = s.substring(0, Hue.config.max_title_length)
}

// Updates the tab title
// Taking into account the room name and topic
Hue.update_title = function () {
  let t = Hue.room_name

  if (Hue.topic !== "") {
    t += ` ${Hue.config.title_separator} ${Hue.topic}`
  }

  Hue.set_title(t)
}

// Starts the listener to check when the client is visible or not
// A function is executed on visibility change
// Blur event is also included to handle some cases
Hue.activate_visibility_listener = function () {
  document.addEventListener(
    "visibilitychange",
    function () {
      Hue.process_visibility()
    },
    false
  )

  window.onblur = function () {
    Hue.keys_pressed = {}
  }
}

// This runs after a visibility change
// Does things depending if the client is visible or not
Hue.process_visibility = function () {
  if (Hue.screen_locked) {
    return false
  }

  Hue.app_focused = !document.hidden

  if (Hue.app_focused) {
    Hue.on_app_focused()
  } else {
    Hue.on_app_unfocused()
  }
}

// This runs when the client regains visibility
Hue.on_app_focused = function () {
  Hue.change({type: "image", force: false, play: false})
  Hue.change({type: "tv", force: false, play: false})
  Hue.remove_alert_title()
  Hue.show_info_popups()
  Hue.show_fresh_messages()
  Hue.check_trigger_activity()
  Hue.focus_input()
}

// This runs when the client loses visibility
Hue.on_app_unfocused = function () {
  Hue.check_scrollers()
}

// Starts window resize events
Hue.resize_events = function () {
  $(window).resize(function () {
    Hue.resize_timer()
  })
}

// What to do after a window resize
Hue.on_resize = function () {
  Hue.fix_frames()
  Hue.goto_bottom(false, false)
  Hue.check_scrollers()
}

// Setup events for application close or refresh
Hue.setup_before_unload = function () {
  window.onbeforeunload = function (e) {
    if (
      Hue.connected &&
      !Hue.user_leaving &&
      Hue.get_setting("warn_before_closing")
    ) {
      return "Are you sure?"
    }
  }
}

// Create all the Handlebars templates
Hue.setup_templates = function () {
  $(".template").each(function () {
    let id = $(this).attr("id")
    Hue[id] = Handlebars.compile($(`#${id}`).html())
  })
}

// Starts and configures all Msg modal instances
Hue.start_msg = function () {
  let common = {
    clear_editables: true,
    class: "modal",
    show_effect: "none",
    close_effect: "none",
    after_create: function (instance) {
      Hue.after_modal_create(instance)
    },
    before_show: function (instance) {
      if (Hue.screen_locked) {
        if (instance.options.id !== "lockscreen") return false
      }
    },
    after_show: function (instance) {
      Hue.after_modal_show(instance)
      Hue.after_modal_set_or_show(instance)
    },
    after_set: function (instance) {
      Hue.after_modal_set_or_show(instance)
    },
    after_close: function (instance) {
      Hue.after_modal_close(instance)
    },
  }

  let titlebar = {
    enable_titlebar: true,
    center_titlebar: true,
    titlebar_class: "!custom_titlebar",
    window_inner_x_class: "!titlebar_inner_x",
  }

  // Start the instances

  Hue.msg_room_menu = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "room_menu",
      window_width: "22rem",
      after_close: function (instance) {
        common.after_close(instance)
        Hue.close_togglers("room_menu")
        Hue.close_togglers("room_menu_permissions")
      },
    })
  )

  Hue.msg_user_menu = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "user_menu",
      clear_editables: false,
      window_width: "22rem",
      after_close: function (instance) {
        common.after_close(instance)
        Hue.close_togglers("user_menu")
      },
    })
  )

  Hue.msg_userlist = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "userlist",
      window_min_width: "22rem",
      window_max_width: "45rem",
    })
  )

  Hue.msg_public_roomlist = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "public_roomlist",
      window_width: "26rem",
    })
  )

  Hue.msg_visited_roomlist = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "visited_roomlist",
      window_width: "26rem",
    })
  )

  Hue.msg_played = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "played",
      window_width: "26rem",
    })
  )

  Hue.msg_modal_image = Msg.factory(
    Object.assign({}, common, {
      id: "modal_image",
      preset: "window",
      overlay_class: "!overlay_same_color",
      after_show: function (instance) {
        common.after_show(instance)
        Hue.restore_modal_image()
        Hue.modal_image_open = true
      },
      after_close: function (instance) {
        common.after_close(instance)
        Hue.clear_modal_image_info()
        Hue.msg_modal_image_number.close()
        Hue.msg_image_picker.close()
        Hue.modal_image_open = false
      },
    })
  )

  Hue.msg_modal_image_number = Msg.factory(
    Object.assign({}, common, {
      id: "modal_image_number",
      after_show: function (instance) {
        common.after_show(instance)
        Hue.modal_image_number_open = true
      },
      after_close: function (instance) {
        common.after_close(instance)
        Hue.modal_image_number_open = false
      },
    })
  )

  Hue.msg_lockscreen = Msg.factory(
    Object.assign({}, common, {
      id: "lockscreen",
      preset: "window",
      close_on_escape: false,
      overlay_class: "!overlay_same_color"
    })
  )

  Hue.msg_profile = Msg.factory(
    Object.assign({}, common, {
      id: "profile",
      window_width: "22rem",
      after_close: function (instance) {
        common.after_close(instance)
        $("#show_profile_username").text("Loading")
        $("#show_profile_image").attr(
          "src",
          Hue.config.profile_image_loading_url
        )
        Hue.open_profile_username = false
        Hue.open_profile_user = false
        Hue.stop_show_profile_audio()
      },
    })
  )

  Hue.msg_info = Msg.factory(
    Object.assign({}, common, {
      id: "info",
      window_height: "auto",
      before_show: function (instance) {
        common.before_show(instance)
        Hue.info_vars_to_false()
      },
      after_close: function (instance) {
        common.after_close(instance)
        instance.content.innerHTML = ""
        Hue.info_vars_to_false()
      },
    })
  )

  Hue.msg_info2 = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "info2",
      window_height: "auto",
      before_show: function (instance) {
        common.before_show(instance)
        Hue.info2_vars_to_false()
      },
      after_close: function (instance) {
        common.after_close(instance)
        instance.content.innerHTML = ""
        instance.titlebar.innerHTML = ""
        Hue.info2_vars_to_false()
      },
    })
  )

  Hue.msg_image_picker = Msg.factory(
    Object.assign({}, common, {
      id: "image_picker",
      window_width: "24rem",
      after_show: function (instance) {
        common.after_show(instance)
        Hue.image_picker_open = true
      },
      after_close: function (instance) {
        common.after_close(instance)
        $("#image_source_picker_input").val("")
        $("#image_source_picker_input_comment").val("")
        Hue.check_image_picker()
        Hue.reset_media_history_filter("image")
        Hue.image_picker_open = false
      },
    })
  )

  Hue.msg_tv_picker = Msg.factory(
    Object.assign({}, common, {
      id: "tv_picker",
      window_width: "24rem",
      after_show: function (instance) {
        common.after_show(instance)
        Hue.tv_picker_open = true
      },
      after_close: function (instance) {
        common.after_close(instance)
        $("#tv_source_picker_input").val("")
        $("#tv_source_picker_input_comment").val("")
        Hue.reset_media_history_filter("tv")
        Hue.tv_picker_open = false
      },
    })
  )

  Hue.msg_media_menu = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "media_menu",
      window_width: "22rem",
      after_show: function (instance) {
        common.after_show(instance)
        Hue.media_menu_open = true
      },
      after_close: function (instance) {
        common.after_close(instance)
        Hue.media_menu_open = false
      },
    })
  )

  Hue.msg_reaction_picker = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "reactions"
    })
  )

  Hue.msg_message = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "message",
      window_width: "28rem",
      close_on_overlay_click: false,
      after_show: function (instance) {
        common.after_show(instance)
        Hue.writing_message = true
      },
      after_close: function (instance) {
        common.after_close(instance)
        $("#write_message_area").val("")
        $("#write_message_feedback").text("")
        $("#write_message_feedback").css("display", "none")
        Hue.writing_message = false
        Hue.clear_draw_message_state()
      },
    })
  )

  Hue.msg_input_history = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "input_history",
      window_width: "24rem",
    })
  )

  Hue.msg_chat_search = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "chat_search",
      window_width: "30rem",
      after_close: function (instance) {
        common.after_close(instance)
        Hue.reset_chat_search_filter()
      },
    })
  )

  Hue.msg_highlights = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "highlights",
      window_width: "30rem",
      after_close: function (instance) {
        common.after_close(instance)
        Hue.reset_highlights_filter()
      },
    })
  )

  Hue.msg_locked = Msg.factory(
    Object.assign({}, common, {
      id: "locked",
      closeable: false,
      window_x: "none",
      show_effect: "none",
      close_effect: "none",
      enable_overlay: true,
      window_class: "!no_effects",
    })
  )

  Hue.msg_global_settings = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "global_settings",
      after_close: function (instance) {
        common.after_close(instance)
        Hue.close_togglers("global_settings")
      },
    })
  )

  Hue.msg_room_settings = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "room_settings",
      after_close: function (instance) {
        common.after_close(instance)
        Hue.close_togglers("room_settings")
      },
    })
  )

  Hue.msg_draw_image = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "draw_image",
      close_on_overlay_click: false,
      after_show: function (instance) {
        common.after_show(instance)
        Hue.draw_image_open = true
      },
      after_close: function (instance) {
        common.after_close(instance)
        Hue.draw_image_open = false
      },
    })
  )

  Hue.msg_room_status = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "room_status",
      window_width: "22rem",
      after_show: function (instance) {
        common.after_show(instance)
        Hue.room_status_open = true
      },
      after_close: function (instance) {
        common.after_close(instance)
        Hue.room_status_open = false
      },
    })
  )

  Hue.msg_admin_activity = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "admin_activity",
    })
  )

  Hue.msg_access_log = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "access_log",
    })
  )

  Hue.msg_expand_image = Msg.factory(
    Object.assign({}, common, {
      id: "expand_image",
      preset: "window",
      overlay_class: "!overlay_same_color"
    })
  )

  Hue.msg_image_upload_comment = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "image_upload_comment",
      after_show: function (instance) {
        common.after_show(instance)
        Hue.image_upload_comment_open = true
      },
      after_close: function (instance) {
        common.after_close(instance)
        $("#image_upload_comment_input").val("")
        Hue.image_upload_comment_file = false
        Hue.image_upload_comment_type = false
        Hue.image_upload_comment_open = false
      },
    })
  )

  Hue.msg_reply = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "reply",
      window_width: "26rem",
      after_show: function (instance) {
        common.after_show(instance)
        Hue.writing_reply = true
      },
      after_close: function (instance) {
        common.after_close(instance)
        Hue.writing_reply = false
      },
    })
  )

  Hue.msg_handle_url = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "handle_url",
      after_show: function (instance) {
        common.after_show(instance)
        Hue.handle_url_open = true
      },
      after_close: function (instance) {
        common.after_close(instance)
        Hue.handle_url_open = false
      },
    })
  )

  Hue.msg_open_url = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "open_url"
    })
  )

  Hue.msg_details = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "details",
      after_show: function (instance) {
        common.after_show(instance)
        Hue.details_open = true
      },
      after_close: function (instance) {
        common.after_close(instance)
        Hue.details_open = false
      },
    })
  )

  Hue.msg_notifications = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "notifications",
      window_width: "26rem",
    })
  )

  Hue.msg_whispers = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "whispers",
      window_width: "26rem",
    })
  )

  Hue.msg_message_board = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "message_board",
      window_width: "30rem",
      after_show: function (instance) {
        common.after_show(instance)
        Hue.message_board_open = true
      },
      after_close: function (instance) {
        common.after_close(instance)
        Hue.message_board_open = false
      },
    })
  )

  Hue.msg_profile_image_cropper = Msg.factory(
    Object.assign({}, common, titlebar, {
      id: "profile_image_cropper",
      after_close: function (instance) {
        common.after_close(instance)
        Hue.reset_profile_image_cropper()
      },
    })
  )

  // Set the templates

  Hue.msg_room_menu.set(
    Hue.template_room_menu({
      voice_permissions_containers: Hue.make_room_menu_voice_permissions_container(),
      op_permissions_containers: Hue.make_room_menu_op_permissions_container(),
    })
  )

  Hue.msg_global_settings.set(
    Hue.template_global_settings({
      settings: Hue.template_settings({
        type: "global_settings",
        user_functions: Hue.make_settings_user_functions("global_settings"),
      }),
    })
  )

  Hue.msg_room_settings.set(
    Hue.template_room_settings({
      settings: Hue.template_settings({
        type: "room_settings",
        user_functions: Hue.make_settings_user_functions("room_settings"),
      }),
    })
  )

  Hue.msg_user_menu.set(Hue.template_user_menu())
  Hue.msg_userlist.set(Hue.template_userlist())
  Hue.msg_public_roomlist.set(
    Hue.template_roomlist({ type: "public_roomlist" })
  )
  Hue.msg_visited_roomlist.set(
    Hue.template_roomlist({ type: "visited_roomlist" })
  )
  Hue.msg_played.set(Hue.template_played())
  Hue.msg_profile.set(
    Hue.template_profile({
      profile_image: Hue.config.profile_image_loading_url,
    })
  )
  Hue.msg_image_picker.set(Hue.template_image_picker())
  Hue.msg_tv_picker.set(Hue.template_tv_picker())
  Hue.msg_media_menu.set(Hue.template_media_menu())
  Hue.msg_message.set(Hue.template_message())
  Hue.msg_highlights.set(Hue.template_highlights())
  Hue.msg_input_history.set(Hue.template_input_history())
  Hue.msg_chat_search.set(Hue.template_chat_search())
  Hue.msg_modal_image.set(Hue.template_modal_image())
  Hue.msg_modal_image_number.set(Hue.template_modal_image_number())
  Hue.msg_lockscreen.set(Hue.template_lockscreen())
  Hue.msg_locked.set(Hue.template_locked_menu())
  Hue.msg_notifications.set(Hue.template_notifications())
  Hue.msg_whispers.set(Hue.template_whispers())
  Hue.msg_draw_image.set(Hue.template_draw_image())
  Hue.msg_room_status.set(Hue.template_room_status())
  Hue.msg_admin_activity.set(Hue.template_admin_activity())
  Hue.msg_access_log.set(Hue.template_access_log())
  Hue.msg_expand_image.set(Hue.template_expand_image())
  Hue.msg_image_upload_comment.set(Hue.template_image_upload_comment())
  Hue.msg_reply.set(Hue.template_reply())
  Hue.msg_handle_url.set(Hue.template_handle_url())
  Hue.msg_open_url.set(Hue.template_open_url())
  Hue.msg_details.set(Hue.template_details())
  Hue.msg_message_board.set(Hue.template_message_board())
  Hue.msg_profile_image_cropper.set(Hue.template_profile_image_cropper())
  Hue.msg_reaction_picker.set(Hue.template_reaction_picker())

  Hue.msg_info.create()
  Hue.msg_info2.create()

  // Set the titles

  Hue.msg_highlights.set_title(
    "<span id='highlights_window_title' class='pointer'>Highlights</span>"
  )
  Hue.msg_chat_search.set_title(
    "<span id='chat_search_window_title' class='pointer'>Chat Search</span>"
  )
  Hue.msg_public_roomlist.set_title(
    "<span id='public_rooms_window_title' class='pointer'>Public Rooms</span>"
  )
  Hue.msg_visited_roomlist.set_title(
    "<span id='visited_rooms_window_title' class='pointer'>Visited Rooms</span>"
  )
  Hue.msg_played.set_title("Recently Played")
  Hue.msg_room_menu.set_title(
    "<span id='room_menu_window_title' class='pointer'>Room Menu</span>"
  )
  Hue.msg_user_menu.set_title(
    "<span id='user_menu_window_title' class='pointer'>User Menu</span>"
  )

  Hue.msg_input_history.set_title("Input History")
  Hue.msg_global_settings.set_title("Global Settings")
  Hue.msg_room_settings.set_title("Room Settings")
  Hue.msg_media_menu.set_title("Media Menu")
  Hue.msg_draw_image.set_title("Draw an Image")
  Hue.msg_room_status.set_title("Room Status")
  Hue.msg_admin_activity.set_title("Admin Activity")
  Hue.msg_access_log.set_title("Access Log")
  Hue.msg_image_upload_comment.set_title("Add a Comment")
  Hue.msg_reply.set_title("Write a Reply")
  Hue.msg_details.set_title("User Details")
  Hue.msg_notifications.set_title("Notifications")
  Hue.msg_whispers.set_title("Whispers")
  Hue.msg_handle_url.set_title("Drag n' Drop")
  Hue.msg_message_board.set_title("Message Board")
  Hue.msg_profile_image_cropper.set_title("Crop A Circle")
  Hue.msg_reaction_picker.set_title("React With")

  // Titlebar click events

  $("#public_rooms_window_title").click(function () {
    Hue.toggle_rooms_windows()
  })

  $("#visited_rooms_window_title").click(function () {
    Hue.toggle_rooms_windows()
  })

  $("#room_menu_window_title").click(function () {
    Hue.toggle_menu_windows()
  })

  $("#user_menu_window_title").click(function () {
    Hue.toggle_menu_windows()
  })

  $("#chat_search_window_title").click(function () {
    Hue.toggle_search_windows()
  })

  $("#highlights_window_title").click(function () {
    Hue.toggle_search_windows()
  })
}

// Sets all info window variables to false
Hue.info_vars_to_false = function () {}

// Sets all info window 2 variables to false
Hue.info2_vars_to_false = function () {
  Hue.create_room_open = false
  Hue.import_settings_open = false
  Hue.goto_room_open = false
  Hue.open_room_open = false
  Hue.background_image_input_open = false
  Hue.admin_list_open = false
  Hue.ban_list_open = false
  Hue.change_user_username_open = false
  Hue.change_user_password_open = false
  Hue.change_user_email_open = false
}

// Focuses the filter widget of a modal
Hue.focus_modal_filter = function (instance) {
  let filter = $(`#Msg-content-${instance.options.id}`)
    .find(".filter_input, .filter_input_2")
    .eq(0)

  if (filter.length) {
    filter.focus()
  }
}

// Empties the filter of a modal and updates it
Hue.reset_modal_filter = function (instance) {
  let id = instance.options.id
  let filter = $(`#Msg-content-${id}`)
    .find(".filter_input, .filter_input_2")
    .eq(0)

  if (id === "info" || id === "info2" || filter.data("mode") === "manual") {
    return false
  }

  if (filter.length) {
    if (filter.val()) {
      filter.val("")
      Hue.do_modal_filter(id)
    }
  }
}

// This is called after a modal is created
Hue.after_modal_create = function (instance) {}

// This is called after a modal is shown
Hue.after_modal_show = function (instance) {
  Hue.active_modal = instance
  Hue.modal_open = true
  Hue.blur_input()
  Hue.focus_modal_filter(instance)
}

// This is called after a modal is set or shown
Hue.after_modal_set_or_show = function (instance) {
  setTimeout(function () {
    if (
      instance.options.id === "global_settings" ||
      instance.options.id === "room_settings"
    ) {
      $(
        `#settings_window_${instance.options.id} .settings_window_category_container_selected`
      ).get(0).scrollTop = 0
      $(`#settings_window_left_content_${instance.options.id}`).get(
        0
      ).scrollTop = 0
    } else {
      instance.content_container.scrollTop = 0
    }
  }, 100)
}

// This is called after a modal is closed
Hue.after_modal_close = function (instance) {
  if (!Hue.any_modal_open()) {
    Hue.active_modal = false
    Hue.modal_open = false
    Hue.focus_input()
  } else {
    Hue.active_modal = Hue.get_highest_modal()
  }

  Hue.reset_modal_filter(instance)
}

// Gets all Msg modal instances
Hue.get_modal_instances = function () {
  return Hue.msg_room_menu.higher_instances()
}

// Gets all Msg popup instances
Hue.get_popup_instances = function () {
  return Hue.msg_room_menu.lower_instances()
}

// Gets all Msg instances
Hue.get_all_msg_instances = function () {
  return Hue.msg_room_menu.instances()
}

// Checks if any Msg instance is open
Hue.any_msg_open = function () {
  return Hue.msg_room_menu.any_open()
}

// Checks if any Msg modal instance is open
Hue.any_modal_open = function () {
  return Hue.msg_room_menu.any_higher_open()
}

// Checks if any Msg popup instance is open
Hue.any_popup_open = function () {
  return Hue.msg_room_menu.any_lower_open()
}

// Gets the highest open Msg modal
Hue.get_highest_modal = function () {
  return Hue.msg_room_menu.highest_instance()
}

// Closes all Msg instances
Hue.close_all_msg = function (callback = false) {
  if (callback) {
    Hue.msg_room_menu.close_all(callback)
  } else {
    Hue.msg_room_menu.close_all()
  }
}

// Closes all Msg modal instances
Hue.close_all_modals = function (callback = false) {
  if (callback) {
    Hue.msg_room_menu.close_all_higher(callback)
  } else {
    Hue.msg_room_menu.close_all_higher()
  }
}

// Closes all Msg popup instances
Hue.close_all_popups = function (callback = false) {
  if (callback) {
    Hue.msg_room_menu.close_all_lower(callback)
  } else {
    Hue.msg_room_menu.close_all_lower()
  }
}

// Starts custom filters events
Hue.start_filters = function () {
  $("#chat_search_filter").on("input", function () {
    Hue.chat_search_timer()
  })

  $("#highlights_filter").on("input", function () {
    Hue.highlights_filter_timer()
  })

  $("#global_settings_filter").on("input", function () {
    Hue.settings_filter_timer("global_settings")
  })

  $("#room_settings_filter").on("input", function () {
    Hue.settings_filter_timer("room_settings")
  })

  $("#input_history_filter").on("input", function () {
    Hue.input_history_filter_timer()
  })

  $("#image_history_filter").on("input", function () {
    Hue.media_history_filter_timer("image")
  })

  $("#tv_history_filter").on("input", function () {
    Hue.media_history_filter_timer("tv")
  })
}

// Filter action for normal filter windows
Hue.do_modal_filter = function (id = false) {
  if (!id) {
    if (!Hue.active_modal) {
      return false
    }

    id = Hue.active_modal.options.id
  }

  let win = $(`#Msg-content-${id}`)
  let filter = win.find(".filter_input, .filter_input_2").eq(0)

  if (!filter.length) {
    return false
  }

  let value = filter.val().trim()
  filter.val(value)

  let lc_value = Hue.utilz.clean_string2(value).toLowerCase()
  let items = win.find(".modal_item")
  let display

  if (!win.data("filter_display")) {
    display = items.first().css("display")
    win.data("filter_display", display)
  } else {
    display = win.data("filter_display")
  }

  if (lc_value) {
    let words = lc_value.split(" ")

    items.each(function () {
      let item_value = $(this).text().toLowerCase()

      if (words.some((word) => item_value.includes(word))) {
        $(this).css("display", display)
      } else {
        $(this).css("display", "none")
      }
    })

    Hue[`${id}_filtered`] = true
  } else {
    items.each(function () {
      $(this).css("display", display)
    })

    Hue[`${id}_filtered`] = false
  }

  Hue.scroll_modal_to_top(id)

  if (Hue[`after_${id}_filtered`]) {
    Hue[`after_${id}_filtered`]()
  }
}

// Scrolls a modal window to the top
Hue.scroll_modal_to_top = function (id) {
  $(`#Msg-content-container-${id}`).scrollTop(0)
}

// Scrolls a modal window to the bottom
Hue.scroll_modal_to_bottom = function (id) {
  let container = $(`#Msg-content-container-${id}`)[0]
  container.scrollTop = container.scrollHeight
}

// Creates a Msg popup
Hue.create_popup = function (args = {}, ptype = "unset") {
  if (!args.id) {
    Hue.popup_id += 1
    args.id = `popup_${Hue.popup_id}`
  }

  let panel_size = $("#footer").height()
  let edge_padding_y = panel_size * 1.5

  let def_args = {
    preset: "popup",
    class: "popup",
    position: "top",
    clear_editables: true,
    show_effect: "none",
    close_effect: "none",
    window_class: "!custom_popup",
    enable_titlebar: true,
    center_titlebar: true,
    titlebar_class: "!custom_titlebar",
    window_inner_x_class: "!titlebar_inner_x",
    edge_padding_y: edge_padding_y,
    edge_padding_x: 12,
    persistent: false
  }

  args = Object.assign(def_args, args)
  let popup = Msg.factory(args)
  popup.hue_type = ptype
  return popup
}

// Creates a Msg popup
Hue.create_modal = function (args = {}, ptype = "unset") {
  if (!args.id) {
    Hue.modal_id += 1
    args.id = `modal_${Hue.modal_id}`
  }

  let def_args = {
    class: "modal",
    clear_editables: true,
    show_effect: "none",
    close_effect: "none",
    enable_titlebar: true,
    center_titlebar: true,
    titlebar_class: "!custom_titlebar",
    window_inner_x_class: "!titlebar_inner_x",
    persistent: false
  }

  args = Object.assign(def_args, args)
  let modal = Msg.factory(args)
  modal.hue_type = ptype
  return modal
}

// Changes the state of a toggler
// If enabled, it will show the container and show a -
// If disabled it will hide the container and show a +
Hue.set_toggler = function (type, el, action = false) {
  let container = $(el).next(`.${type}_toggle_container`)
  let display = container.css("display")

  if (display === "none") {
    if (action && action !== "open") {
      return false
    }

    Hue.close_togglers(type)
    container.css("display", "block")
    $(el).html(`- ${$(el).html().trim().substring(2)}`)
    container
      .closest(".toggler_main_container")[0]
      .scrollIntoView({ block: "center" })
  } else {
    if (action && action !== "close") {
      return false
    }

    container.css("display", "none")
    $(el).html(`+ ${$(el).html().trim().substring(2)}`)
  }
}

// Setups toggler events
// Togglers are elements that when clicked reveal more elements
// They can be toggled
Hue.setup_togglers = function (type) {
  $(`.${type}_toggle`).each(function () {
    $(this).click(function () {
      Hue.set_toggler(type, this)
    })
  })
}

// Opens a toggler
Hue.open_togglers = function (type) {
  $(`.${type}_toggle`).each(function () {
    Hue.set_toggler(type, this, "open")
  })
}

// Closes a toggler
Hue.close_togglers = function (type) {
  $(`.${type}_toggle`).each(function () {
    Hue.set_toggler(type, this, "close")
  })
}

// Determines what to do after a 'close all modals' trigger
// If it comes from a modal it closes all modals
// If it comes from a popup it closes all popups
Hue.process_msg_close_button = function (button) {
  let container = $(button).closest(".Msg-container")

  if (container.hasClass("Msg-container-modal")) {
    Hue.close_all_modals()
  } else if (container.hasClass("Msg-container-popup")) {
    Hue.close_all_popups()
  }
}

// Function to apply the defined toggles between windows
Hue.process_window_toggle = function (data) {
  let highest = Hue.msg_room_menu.highest_instance()
  let current = highest.options.id
  let next_func = data[current]

  if (!current || !next_func) {
    return false
  }

  Hue[`msg_${current}`].close(function () {
    next_func()
  })
}

// Toggles between the chat search and highlights windows when clicking the titlebar
Hue.toggle_search_windows = function () {
  let data = {}

  data["chat_search"] = function () {
    Hue.show_highlights()
  }

  data["highlights"] = function () {
    Hue.show_chat_search()
  }

  Hue.process_window_toggle(data)
}

// Toggles between the room menu and user menu when clicking the titlebar
Hue.toggle_menu_windows = function () {
  let data = {}

  data["room_menu"] = function () {
    Hue.show_user_menu()
  }

  data["user_menu"] = function () {
    Hue.show_room_menu()
  }

  Hue.process_window_toggle(data)
}

// Toggles between public and visited room lists when clicking the titlebar
Hue.toggle_rooms_windows = function () {
  let data = {}

  data["public_roomlist"] = function () {
    Hue.request_roomlist("", "visited_roomlist")
  }

  data["visited_roomlist"] = function () {
    Hue.request_roomlist("", "public_roomlist")
  }

  Hue.process_window_toggle(data)
}

// Makes action popups like for file upload progress
Hue.show_action_popup = function (args = {}) {
  let def_args = {
    id: false,
    message: "",
    icon: "",
    title: "",
    on_click: false,
    after_close: function () {},
    autoclose: true,
  }

  args = Object.assign(def_args, args)

  let on_click = function () {}

  if (args.on_click) {
    on_click = function (instance) {
      instance.close()
      args.on_click()
    }
  }

  let obj = {
    position: "bottomright",
    enable_titlebar: true,
    window_x: "inner_right",
    content_class: "!action_popup",
    window_width: "auto",
    on_click: on_click,
    after_close: args.after_close,
    close_on_escape: false,
    autoclose: args.autoclose,
    autoclose_delay: 5000,
  }

  if (!args.title) {
    args.title = "Action"
  }

  if (args.id) {
    obj.id = args.id
  }

  let popup = Hue.create_popup(obj)

  let classes = ""

  if (args.on_click) {
    classes = "pointer action"
  }

  let icon = ""

  if (args.icon) {
    icon = Hue.get_icon(args.icon, "action_popup_icon")
  }

  let html = `<div class='action_popup_item ${classes}'>${icon}<div class='action_popup_message'>${Hue.utilz.make_html_safe(
    args.message
  )}</div></div>`

  popup.show([args.title, html])
  return popup
}

