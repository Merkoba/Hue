<%- include('doctype.ejs'); %>

<html>

	<head>
		<title><%-vars.register_title%></title>
		<%- include('pages_imports.ejs'); %>
		<script src='https://www.google.com/recaptcha/api.js'></script>

		<script>
			let recaptcha_checked = false
		</script>
	</head>

	<body>
		<div class='main'>
			<form method="post" action="/register" name="register" onsubmit="return validate_form()">
				<div>Usernames are case sensitive</div>
				<div class="spacer2"></div>
				<div>Usernames can be changed later</div>
				<div class="spacer4"></div>
				<input type="text" placeholder="Username" name="username" id="register_username">

				<div id="username_taken">
					<div class="spacer3"></div>
					<div class="error">Username is already taken</div>
				</div>

				<div class="spacer4"></div>
				<input type="password" placeholder="Password" name="password" id="register_password">
				<div class="spacer4"></div>
				<input type="password" placeholder="Password Again" id="register_password2">

				<div class="spacer4"></div>

				<% if(vars.recaptcha_enabled) {%>

				<div class="g-recaptcha" data-sitekey="<%-vars.recaptcha_key%>" data-callback="recaptcha_callback"></div>
				<div class="spacer4"></div>

				<%}%>

				<input id="btn_register" type="submit" value="Register">

			</form>

			<div class="spacer1"></div>
			<a href="/login">Login</a>			

		</div>

		<script>
			Hue.el("#register_username").focus()

			function validate_form() {
				if (msg_info.is_open()) {
					return false
				}

				if (Hue.el("#username_taken").style.display !== "none") {
					return false
				}

				if (recaptcha_enabled && !recaptcha_checked) {
					return false
				}

				Hue.el("#register_username").value = Hue.el("#register_username").value.trim()

				let username = Hue.el("#register_username").value
				let password = Hue.el("#register_password").value
				let password2 = Hue.el("#register_password2").value

				if (username.length === 0) {
					set_message("Username can't be empty")
					return false
				}

				if (password.length === 0) {
					set_message("Password can't be empty")
					return false
				}

				if (username.length > max_username_length) {
					set_message("Username is too Long")
					return false
				}

				if (username !== utilz.clean_username(username)) {
					set_message("Username contains invalid characters. Only letters, numbers, and some special characters are allowed")
					return false
				}

				if (password.length < min_password_length) {
					set_message(`Password is too short. It must be at least ${min_password_length} characters long`)
					return false
				}

				if (password.length > max_password_length) {
					set_message("Password is too long")
					return false
				}

				if (password !== utilz.clean_string2(password)) {
					set_message("Password contains invalid characters. There can't be spaces at the start or end of the password, or consecutive spaces")
					return false
				}

				if (password !== password2) {
					set_message("The passwords don't match")
					return false
				}

				Hue.el("#btn_register").disabled = true

				return true
			}

			let current_username = ""

			Hue.el("#register_username").addEventListener("input", on_username_input)

			function on_username_input() {
				let username = Hue.el("#register_username").value.trim()

				if (username === current_username) {
					return
				}

				Hue.el("#username_taken").style.display = "none"

				if (username.length > max_username_length) {
					username = username.substring(0, max_username_length)
					Hue.el("#register_username").value = username
				}

				current_username = username
			}

			function recaptcha_callback() {
				recaptcha_checked = true
			}

			if (form_username && form_username !== "undefined") {
				Hue.el("#register_username").value = form_username
				on_username_input()
			}
		</script>
	</body>

</html>