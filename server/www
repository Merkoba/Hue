#!/usr/bin/env node

function normalizePort(val)
{
	let port = parseInt(val, 10)

	if(isNaN(port))
	{
		return val
	}

	if(port >= 0)
	{
		return port
	}

	return false
}

const port = normalizePort(process.env.PORT || "3210")
const config = require('../config/config.json')
const sconfig = require('../config/config.secret.json')

try
{
	const user_config = require('../config/user_config.json')
	Object.assign(config, user_config)
}

catch(err)
{
	console.error(err)
}

try
{
	const user_sconfig = require('../config/user_config.secret.json')
	Object.assign(sconfig, user_sconfig)
}

catch(err)
{
	console.error(err)
}

const path = require('path')
const mongo = require('mongodb')
const bcrypt = require('bcrypt')
const winston = require('winston')

mongo.connect(config.mongodb_path, {useNewUrlParser:true}, function(err, client)
{
	if(err)
	{
		console.error(err)
	}

	else
	{
		const db = client.db("hue")

		const logger = winston.createLogger(
		{
			format: winston.format.simple(),
			transports:
			[
				new winston.transports.File(
				{
					filename: path.join(__dirname, "../logs/error.log"),
					level: "error",
					timestamp: (new Date()).toLocaleTimeString()
				})
			]
		})

		if(logger.log_error !== undefined)
		{
			console.error("logger.log_error is reserved")
		}

		logger.log_error = function(msg)
		{
			if(process.env.NODE_ENV === "development")
			{
				console.error(msg)
			}

			if(msg instanceof Error)
			{
				msg = JSON.stringify(msg.stack, null, 2).replace(/\\n/g, "\r\n")
			}

			msg = `${new Date().toLocaleString()}\r\n${msg}`

			logger.log(
			{
				level: "error",
				message: msg
			})
		}

		const utilz = require('../public/static/js/utilz.js')()
		const db_manager = require('./db.js')(db, config, sconfig, utilz, logger)
		const app = require('./app')(db, db_manager, config, sconfig, utilz)
		const debug = require('debug')('hue:server')
		const http = require('http')

		app.set('port', port)

		const server = http.createServer(app)

		server.listen(port)
		server.on('error', onError)
		server.on('listening', onListening)

		const io = require('socket.io').listen(server)

		require('./sockets')(io, db_manager, config, sconfig, utilz, logger)

		function onError(error)
		{
			if(error.syscall !== 'listen')
			{
				throw error
			}

			let bind = typeof port === 'string'
				? 'Pipe ' + port
				: 'Port ' + port

			switch(error.code)
			{
				case 'EACCES':
					console.error(bind + ' requires elevated privileges')
					process.exit(1)
					break

				case 'EADDRINUSE':
					console.error(bind + ' is already in use')
					process.exit(1)
					break

				default:
					throw error
			}
		}

		function onListening()
		{
			let addr = server.address()

			let bind = typeof addr === 'string'
				? 'pipe ' + addr
				: 'port ' + addr.port

			debug('Listening on ' + bind)
		}
	}
})
