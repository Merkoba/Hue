#!/usr/bin/env node

const fs = require(`fs`)
const path = require(`path`)
const tar = require(`tar`)
const YAML = require(`yaml`)
const utilz = require(`../public/static/assets/js/libs/utilz.js`)()

function normalizePort(val) {
	let port = parseInt(val, 10)

	if (isNaN(port)) {
		return val
	}

	if (port >= 0) {
		return port
	}
}

let config_path = path.join(__dirname, `../config/config.yml`)
let user_config_path = path.join(__dirname, `../config/user_config.yml`)
let sconfig_path = path.join(__dirname, `../config/config.secret.yml`)
let user_sconfig_path = path.join(__dirname, `../config/user_config.secret.yml`)
let config = {}
let sconfig = {}
let config_check_delay = 5000
let banlist_path = path.join(__dirname, `../config/banlist.json`)
let banlist = {}
let config_mtime = ``

function build_config() {
	let xconfig = YAML.parse(fs.readFileSync(config_path, `utf8`))
	let xsconfig = YAML.parse(fs.readFileSync(sconfig_path, `utf8`))

	if (fs.existsSync(user_config_path)) {
		let user_config = YAML.parse(fs.readFileSync(user_config_path, `utf8`))
		Object.assign(xconfig, user_config)
	}
	else {
		utilz.loginfo(`No user config file found`)
	}

	if (fs.existsSync(user_sconfig_path)) {
		let user_sconfig = YAML.parse(fs.readFileSync(user_sconfig_path, `utf8`))
		Object.assign(xsconfig, user_sconfig)
	}
	else {
		utilz.loginfo(`No user secret config file found`)
	}

	for (let key of Object.keys(config)) {
		delete config[key]
	}

	Object.assign(config, xconfig)
	let reactions = fs.readdirSync(path.join(__dirname, `../public`, config.reactions_directory))
	reactions = reactions.filter(x => !x.startsWith(`.`))
	config.reactions = reactions

	for (let key of Object.keys(sconfig)) {
		delete sconfig[key]
	}

	Object.assign(sconfig, xsconfig)

	//Banlist

	if (!fs.existsSync(banlist_path)) {
		fs.writeFileSync(banlist_path, `{}`, `utf-8`)
	}

	let xbanlist = JSON.parse(fs.readFileSync(banlist_path, `utf8`))
	let changed = false

	if (xbanlist.usernames === undefined) {
		xbanlist.usernames = []
		changed = true
	}

	if (xbanlist.user_ids === undefined) {
		xbanlist.user_ids = []
		changed = true
	}

	if (xbanlist.ip_addresses === undefined) {
		xbanlist.ip_addresses = []
		changed = true
	}

	if (changed) {
		fs.writeFileSync(banlist_path, JSON.stringify(xbanlist), `utf-8`)
	}

	for (let key of Object.keys(banlist)) {
		delete banlist[key]
	}

	Object.assign(banlist, xbanlist)
	config.mtime = Date.now()
	config_mtime = get_config_mtime()
	utilz.loginfo(`Config built`)
}

function get_config_mtime() {
	let mtime = ``
	let conf = path.join(__dirname, `../config`)
	let files = fs.readdirSync(conf)

	for(let file of files) {
		mtime += fs.statSync(path.join(conf, file)).mtime.getTime().toString()
	}

	let reactions = path.join(__dirname, `../public`, config.reactions_directory)
	files = fs.readdirSync(reactions)

	for(let file of files) {
		mtime += file
	}

	return mtime
}

function start_config_check() {
	setInterval(() => {
		if (get_config_mtime() !== config_mtime) {
			build_config()
		}
	}, config_check_delay)
}

async function create_db_backup() {
	let store_path = path.join(__dirname, `../${sconfig.db_store_path}`)

	try {
		let file = `${store_path}/backups/${parseInt(Date.now() / 1000)}.tar.gz`
		await tar.c({file, gzip: true}, [`${store_path}/users`, `${store_path}/rooms`])
		utilz.loginfo(`DB backup created`)
	}
	catch (err) {
		console.error(err)
	}
}

let port = normalizePort(process.env.PORT || `3210`)

build_config()
start_config_check()

const winston = require(`winston`)

let logger = winston.createLogger({
	format: winston.format.simple(),
	transports: [
		new winston.transports.File({
			filename: path.join(__dirname, `../logs/error.log`),
			level: `error`,
			timestamp: (new Date()).toLocaleTimeString()
		}),
		new winston.transports.File({
			filename: path.join(__dirname, `../logs/info.log`),
			level: `info`,
			timestamp: (new Date()).toLocaleTimeString()
		})
	]
})

if (logger.log_error !== undefined) {
	console.error(`logger.log_error is reserved`)
}

logger.log_error = (msg) => {
	if (process.env.NODE_ENV === `development`) {
		console.error(msg)
	}

	if (msg instanceof Error) {
		msg = JSON.stringify(msg.stack, null, 2).replace(/\\n/g, `\r\n`)
	}

	msg = `${new Date().toLocaleString()}\r\n${msg}`

	logger.log({
		level: `error`,
		message: msg
	})
}

const db_manager = require(`./db/main.js`)(config, sconfig, utilz, logger)

// Check if main room exists
let main_room_path = path.join(__dirname, `../`, `${sconfig.db_store_path}/rooms/${config.main_room_id}`)

// If it doesn't exist then create a minimal room object
if (!fs.existsSync(main_room_path)) {
	let obj = {id: config.main_room_id, name: sconfig.default_main_room_name}
	fs.writeFileSync(main_room_path, JSON.stringify(obj), `utf-8`)
	utilz.loginfo(`Main room created`)
}

const app = require(`./app`)(db_manager, config, sconfig, utilz)
const debug = require(`debug`)(`hue:server`)
const http = require(`http`)

app.set(`port`, port)

let server = http.createServer(app)

server.on(`error`, on_error)
server.on(`listening`, on_listening)

const io = require(`socket.io`)(server, {
	pingTimeout: 60000
})

server.listen(port)

const App = {}

App.io = io
App.db_manager = db_manager
App.config = config
App.sconfig = sconfig
App.utilz = utilz
App.logger = logger
App.banlist = banlist
App.banlist_path = banlist_path

require(`./sockets/main`)(App)

function on_error(error) {
	if (error.syscall !== `listen`) {
		throw error
	}

	let bind = typeof port === `string` ?
		`Pipe ` + port :
		`Port ` + port

	switch (error.code) {
		case `EACCES`:
			console.error(bind + ` requires elevated privileges`)
			process.exit(1)

		case `EADDRINUSE`:
			console.error(bind + ` is already in use`)
			process.exit(1)

		default:
			throw error
	}
}

function on_listening() {
	let addr = server.address()

	let bind = typeof addr === `string` ?
		`pipe ` + addr :
		`port ` + addr.port

	debug(`Listening on ` + bind)
}

function do_shutdown() {
	App.vars.exiting = true

	App.i.exiftool.end()
	io.httpServer.close()
	io.close()

	server.close(() => {
		process.exit(0)
	})
}

process.on(`SIGINT`, () => {
	if (process.env.NODE_ENV === `development`) {
		process.exit(0)
	}
	else {
		do_shutdown()
	}
})

// Backup db files in case something goes wrong
create_db_backup()