#!/usr/bin/env node

const config = require('../config.json')
const sconfig = require('../config.secret.json')
const mongo = require('mongodb')

mongo.connect(config.mongodb_path, function(err, database) 
{
	if(err)
	{
		console.error(err) 
	}

	else
	{
		const db_manager = require('../db_manager.js')(database, config, sconfig)
		const app = require('../app')(db_manager, config, sconfig)
		const debug = require('debug')('armtrak:server')
		const http = require('http')
		const port = normalizePort(process.env.PORT || '3210')
		
		app.set('port', port)

		const server = http.createServer(app)

		server.listen(port)
		server.on('error', onError)
		server.on('listening', onListening)

		const io = require('socket.io').listen(server)

		require('../sockets')(io, db_manager, config, sconfig)

		function normalizePort(val) 
		{
			var port = parseInt(val, 10)

			if (isNaN(port)) 
			{
				return val
			}

			if (port >= 0) 
			{
				return port
			}

			return false
		}

		function onError(error) 
		{
			if (error.syscall !== 'listen') 
			{
				throw error
			}

			var bind = typeof port === 'string'
				? 'Pipe ' + port
				: 'Port ' + port

			switch (error.code) 
			{
				case 'EACCES':
					console.error(bind + ' requires elevated privileges')
					process.exit(1)
					break

				case 'EADDRINUSE':
					console.error(bind + ' is already in use')
					process.exit(1)
					break

				default:
					throw error
			}
		}

		function onListening() 
		{
			var addr = server.address()

			var bind = typeof addr === 'string'
				? 'pipe ' + addr
				: 'port ' + addr.port

			debug('Listening on ' + bind)
		}
	}
})
