# If you run the server in a user's directory:
# These commands give www-data (apache's group) and the user called node access:
#     usermod -a -G www-data node
# This adds the user node to www-data group
#     chgrp -R www-data /home/node/app/public
# This makes everything inside public belong to the www-data group
#     chmod -R g+wrxs /home/node/app/public
# This makes new files created there to inherit these permissions

# Add this file, or the content of the following, in a file called ssl.conf in /etc/apache2/sites-available/ or however you want to call it
# Edit any information to adapt it to your site/environment, like ServerName and paths
# Edit the location of the ssl certificate files at the bottom to match yours
# Then enable it with a2ensite (if you're using Debian)
#     a2ensite ssl.conf
# Then restart apache
#     systemctl restart apache2.service (If you're using Debian 8+)

NameVirtualHost *:443

<VirtualHost *:443>
  ServerName app.site.com
  
  ProxyPreserveHost   On

  RequestHeader set "X-Forwarded-Proto" expr=%{REQUEST_SCHEME}
  RequestHeader set "X-Forwarded-SSL" expr=%{HTTPS}

  Alias "/static/" "/home/node/app/public/static/"
  
  <Directory /home/node/app/public>

    Options FollowSymLinks
    AllowOverride None
    Require all granted

    <filesMatch "\.(ico|gif|jpg|png|webp)$">
        ExpiresActive On
        ExpiresDefault "access plus 11 month"
        Header append Cache-Control "public"
    </filesMatch>

  </Directory>

  RewriteEngine On
  RewriteCond %{HTTP:Upgrade} =websocket [NC]
  RewriteRule /(.*)                  ws://localhost:3210/$1 [P,L]
  RewriteCond %{HTTP:Upgrade} !=websocket [NC]
  RewriteRule ^/(?!static/)(.*)$ http://localhost:3210/$1 [P,L]

  SSLCertificateFile /etc/letsencrypt/live/app.site.com/fullchain.pem
  SSLCertificateKeyFile /etc/letsencrypt/live/app.site.com/privkey.pem
  Include /etc/letsencrypt/options-ssl-apache.conf

</VirtualHost>
